
ADXL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bdc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc0  08003dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc8  08003dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  08003ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003ddc  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6ae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbf  00000000  00000000  0002c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002199f  00000000  00000000  0002f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4c8  00000000  00000000  000510d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd632  00000000  00000000  0005c59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  00129c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d58 	.word	0x08003d58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003d58 	.word	0x08003d58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <reg_read>:
static void reg_write(SPI_Comm, uint8_t, uint8_t);
static void fifo_init(SPI_Comm);
static void int1_init(SPI_Comm);

void reg_read(SPI_Comm spi, uint8_t addr, uint8_t* rx, unsigned int size)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	f107 0408 	add.w	r4, r7, #8
 80004d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	4613      	mov	r3, r2
 80004de:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f000 fec6 	bl	800128c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000500:	68b8      	ldr	r0, [r7, #8]
 8000502:	f107 0117 	add.w	r1, r7, #23
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	2201      	movs	r2, #1
 800050c:	f002 f987 	bl	800281e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, size, HAL_MAX_DELAY);
 8000510:	68b8      	ldr	r0, [r7, #8]
 8000512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000514:	b29a      	uxth	r2, r3
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	f002 faed 	bl	8002afa <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	889b      	ldrh	r3, [r3, #4]
 8000528:	4619      	mov	r1, r3
 800052a:	4610      	mov	r0, r2
 800052c:	f000 feae 	bl	800128c <HAL_GPIO_TogglePin>

	return;
 8000530:	bf00      	nop
}
 8000532:	371c      	adds	r7, #28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <reg_write>:

static void reg_write(SPI_Comm spi, uint8_t addr, uint8_t payload)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	f107 0408 	add.w	r4, r7, #8
 8000542:	e884 0003 	stmia.w	r4, {r0, r1}
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4613      	mov	r3, r2
 8000550:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[] = {(addr << 1), payload};
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	753b      	strb	r3, [r7, #20]
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	889b      	ldrh	r3, [r3, #4]
 8000566:	4619      	mov	r1, r3
 8000568:	4610      	mov	r0, r2
 800056a:	f000 fe8f 	bl	800128c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 800056e:	68b8      	ldr	r0, [r7, #8]
 8000570:	f107 0114 	add.w	r1, r7, #20
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	2202      	movs	r2, #2
 800057a:	f002 f950 	bl	800281e <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	889b      	ldrh	r3, [r3, #4]
 8000586:	4619      	mov	r1, r3
 8000588:	4610      	mov	r0, r2
 800058a:	f000 fe7f 	bl	800128c <HAL_GPIO_TogglePin>

	return;
 800058e:	bf00      	nop
}
 8000590:	371c      	adds	r7, #28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}

08000596 <fifo_init>:


static void fifo_init(SPI_Comm spi) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	463b      	mov	r3, r7
 800059e:	e883 0003 	stmia.w	r3, {r0, r1}
	reg_write(spi, ADXL372_FIFO_CTL, 0x03); //0b00000011 -> stream mode; sample MSB
 80005a2:	2303      	movs	r3, #3
 80005a4:	223a      	movs	r2, #58	; 0x3a
 80005a6:	4639      	mov	r1, r7
 80005a8:	c903      	ldmia	r1, {r0, r1}
 80005aa:	f7ff ffc5 	bl	8000538 <reg_write>
	reg_write(spi, ADXL372_FIFO_SAMPLES, 0x00); //0b1_00000000 -> 256 samples
 80005ae:	2300      	movs	r3, #0
 80005b0:	2239      	movs	r2, #57	; 0x39
 80005b2:	4639      	mov	r1, r7
 80005b4:	c903      	ldmia	r1, {r0, r1}
 80005b6:	f7ff ffbf 	bl	8000538 <reg_write>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <int1_init>:

static void int1_init(SPI_Comm spi) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	463b      	mov	r3, r7
 80005ca:	e883 0003 	stmia.w	r3, {r0, r1}
	reg_write(spi, ADXL372_INT1_MAP, 0x04); //0b00000100 -> INT1 on FIFO Full Condition
 80005ce:	2304      	movs	r3, #4
 80005d0:	223b      	movs	r2, #59	; 0x3b
 80005d2:	4639      	mov	r1, r7
 80005d4:	c903      	ldmia	r1, {r0, r1}
 80005d6:	f7ff ffaf 	bl	8000538 <reg_write>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <stream_start>:

void stream_start(SPI_Comm spi) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	463b      	mov	r3, r7
 80005ea:	e883 0003 	stmia.w	r3, {r0, r1}
	fifo_init(spi);
 80005ee:	463b      	mov	r3, r7
 80005f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005f4:	f7ff ffcf 	bl	8000596 <fifo_init>
	int1_init(spi);
 80005f8:	463b      	mov	r3, r7
 80005fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005fe:	f7ff ffe0 	bl	80005c2 <int1_init>

	reg_write(spi, ADXL372_POWER_CTL, 0x03); //full bandwidth mode; HPF/LPF enabled
 8000602:	2303      	movs	r3, #3
 8000604:	223f      	movs	r2, #63	; 0x3f
 8000606:	4639      	mov	r1, r7
 8000608:	c903      	ldmia	r1, {r0, r1}
 800060a:	f7ff ff95 	bl	8000538 <reg_write>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <fifo_data>:

void fifo_data(SPI_Comm spi, uint8_t* data) { //important that user provide data of size 512 bytes
 8000616:	b580      	push	{r7, lr}
 8000618:	b088      	sub	sp, #32
 800061a:	af02      	add	r7, sp, #8
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	e883 0003 	stmia.w	r3, {r0, r1}
 8000624:	607a      	str	r2, [r7, #4]
	uint8_t dummy = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	75fb      	strb	r3, [r7, #23]
	reg_read(spi, ADXL372_FIFO_DATA, data, sizeof data);
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2242      	movs	r2, #66	; 0x42
 8000632:	f107 0108 	add.w	r1, r7, #8
 8000636:	c903      	ldmia	r1, {r0, r1}
 8000638:	f7ff ff48 	bl	80004cc <reg_read>
	reg_read(spi, ADXL372_STATUS_1, &dummy, sizeof dummy);
 800063c:	f107 0317 	add.w	r3, r7, #23
 8000640:	2201      	movs	r2, #1
 8000642:	9200      	str	r2, [sp, #0]
 8000644:	2204      	movs	r2, #4
 8000646:	f107 0108 	add.w	r1, r7, #8
 800064a:	c903      	ldmia	r1, {r0, r1}
 800064c:	f7ff ff3e 	bl	80004cc <reg_read>
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fad0 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f82a 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f906 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f8d4 	bl	8000818 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000670:	f000 f894 	bl	800079c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */




  GPIO_Pin chip_select = {
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <main+0x5c>)
 8000676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800067a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067e:	e883 0003 	stmia.w	r3, {r0, r1}
  		.port = GPIOB,
  		.pin = GPIO_PIN_6
  };

  SPI_Comm accel_spi = {
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <main+0x60>)
 8000684:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800068c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  		uint8_t *fifo_buffer;
  		fifo_buffer = (uint8_t *) malloc(*tmp_buffer);
  		reg_read(accel_spi, (uint8_t) ADXL372_POWER_CTL, (uint8_t*) &rxbuffer);
  */

  stream_start(accel_spi);
 8000690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000698:	f7ff ffa3 	bl	80005e2 <stream_start>
	  //printstr = (char *) malloc(enough);
	  //sprintf(printstr, "%d\r\n", rxbufferFIFO);
	  //HAL_UART_Transmit(&huart2, &printstr, sizeof(printstr), HAL_MAX_DELAY);
	  //free(printstr);

	  reg_read(accel_spi, (uint8_t) ADXL372_FIFO_DATA, (uint8_t*) &fifo_buffer);
 800069c:	463b      	mov	r3, r7
 800069e:	2242      	movs	r2, #66	; 0x42
 80006a0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80006a4:	c903      	ldmia	r1, {r0, r1}
 80006a6:	f7ff ff11 	bl	80004cc <reg_read>
	  //fifo_data(accel_spi, fifo_buffer);

	  HAL_Delay(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f000 fb26 	bl	8000cfc <HAL_Delay>
  {
 80006b0:	e7f4      	b.n	800069c <main+0x44>
 80006b2:	bf00      	nop
 80006b4:	08003d70 	.word	0x08003d70
 80006b8:	20000230 	.word	0x20000230

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0b0      	sub	sp, #192	; 0xc0
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006c6:	2244      	movs	r2, #68	; 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fb3c 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2268      	movs	r2, #104	; 0x68
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fb2e 	bl	8003d48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000710:	230a      	movs	r3, #10
 8000712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000716:	2307      	movs	r3, #7
 8000718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fe4f 	bl	80013d0 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000738:	f000 f91a 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000750:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000754:	2104      	movs	r1, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fa5a 	bl	8001c10 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000762:	f000 f905 	bl	8000970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000766:	2302      	movs	r3, #2
 8000768:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fc53 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800077c:	f000 f8f8 	bl	8000970 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000780:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000784:	f000 fdce 	bl	8001324 <HAL_PWREx_ControlVoltageScaling>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800078e:	f000 f8ef 	bl	8000970 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	37c0      	adds	r7, #192	; 0xc0
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_SPI1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d2:	2218      	movs	r2, #24
 80007d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_SPI1_Init+0x74>)
 80007fc:	f001 ff6c 	bl	80026d8 <HAL_SPI_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f8b3 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000230 	.word	0x20000230
 8000814:	40013000 	.word	0x40013000

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART2_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800085c:	f002 fe44 	bl	80034e8 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f883 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000294 	.word	0x20000294
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <MX_GPIO_Init+0xe8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a33      	ldr	r2, [pc, #204]	; (8000960 <MX_GPIO_Init+0xe8>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_GPIO_Init+0xe8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a27      	ldr	r2, [pc, #156]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_GPIO_Init+0xe8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_GPIO_Init+0xec>)
 80008f4:	f000 fcb2 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0xf0>)
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4817      	ldr	r0, [pc, #92]	; (800096c <MX_GPIO_Init+0xf4>)
 800090e:	f000 fb2b 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_GPIO_Init+0xf4>)
 8000926:	f000 fb1f 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_GPIO_Init+0xec>)
 8000942:	f000 fb11 	bl	8000f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2028      	movs	r0, #40	; 0x28
 800094c:	f000 fad5 	bl	8000efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f000 faee 	bl	8000f32 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	48000400 	.word	0x48000400
 8000968:	10210000 	.word	0x10210000
 800096c:	48000800 	.word	0x48000800

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6613      	str	r3, [r2, #96]	; 0x60
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_SPI_MspInit+0x7c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d128      	bne.n	8000a38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 80009ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f0:	6613      	str	r3, [r2, #96]	; 0x60
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a16:	23e0      	movs	r3, #224	; 0xe0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a26:	2305      	movs	r3, #5
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f000 fa98 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <HAL_UART_MspInit+0x7c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d128      	bne.n	8000abc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fa56 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8d0 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)) {
		fifo_data(accel_spi, fifo_buffer);
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <EXTI9_5_IRQHandler+0x1c>)
 8000b26:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <EXTI9_5_IRQHandler+0x20>)
 8000b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b2c:	f7ff fd73 	bl	8000616 <fifo_data>
	//}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	f000 fbc5 	bl	80012c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000228 	.word	0x20000228
 8000b40:	20000028 	.word	0x20000028

08000b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SystemInit+0x64>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <SystemInit+0x64>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <SystemInit+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <SystemInit+0x68>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <SystemInit+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <SystemInit+0x68>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <SystemInit+0x68>)
 8000b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <SystemInit+0x68>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <SystemInit+0x68>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <SystemInit+0x68>)
 8000b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <SystemInit+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x64>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffc6 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
	ldr	r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bd4:	f842 3b04 	str.w	r3, [r2], #4

08000bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <LoopForever+0x16>)
	cmp	r2, r3
 8000bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 f88f 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fd39 	bl	8000658 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000bec:	08003dd0 	.word	0x08003dd0
	ldr	r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bfc:	20000318 	.word	0x20000318

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_Init+0x3c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_Init+0x3c>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f962 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f80f 	bl	8000c44 <HAL_InitTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	e001      	b.n	8000c36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c32:	f7ff fea3 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f96d 	bl	8000f4e <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f937 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000314 	.word	0x20000314

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000314 	.word	0x20000314

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff31 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e154      	b.n	8001222 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8146 	beq.w	800121c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d00b      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	2b11      	cmp	r3, #17
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b12      	cmp	r3, #18
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0xea>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b12      	cmp	r3, #18
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80a0 	beq.w	800121c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b58      	ldr	r3, [pc, #352]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e0:	4a57      	ldr	r2, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6613      	str	r3, [r2, #96]	; 0x60
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a53      	ldr	r2, [pc, #332]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111e:	d019      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2e0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2e4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2ec>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1dc>
 8001140:	2304      	movs	r3, #4
 8001142:	e008      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001144:	2307      	movs	r3, #7
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2303      	movs	r3, #3
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001166:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ec:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f aea3 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48001000 	.word	0x48001000
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43d9      	mvns	r1, r3
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	400b      	ands	r3, r1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f806 	bl	80012f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_PWREx_GetVoltageRange+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001332:	d130      	bne.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001340:	d038      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2232      	movs	r2, #50	; 0x32
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	e002      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d102      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f2      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001390:	d110      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e00f      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	d007      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000
 80013c8:	20000000 	.word	0x20000000
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 bc11 	b.w	8001c06 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80e4 	beq.w	80015ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x4c>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	f040 808b 	bne.w	800152a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	f040 8087 	bne.w	800152a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_OscConfig+0x64>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e3e8      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_RCC_OscConfig+0x7e>
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144c:	e005      	b.n	800145a <HAL_RCC_OscConfig+0x8a>
 800144e:	4b86      	ldr	r3, [pc, #536]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145a:	4293      	cmp	r3, r2
 800145c:	d223      	bcs.n	80014a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fd7a 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3c9      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001472:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7c      	ldr	r2, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4977      	ldr	r1, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	4972      	ldr	r1, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e025      	b.n	80014f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	496a      	ldr	r1, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4965      	ldr	r1, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fd3a 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e389      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014f2:	f000 fc6f 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	495a      	ldr	r1, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x29c>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x2a0>)
 8001510:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x2a4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb94 	bl	8000c44 <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d052      	beq.n	80015cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	e36d      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d032      	beq.n	8001598 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800153e:	f7ff fbd1 	bl	8000ce4 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001546:	f7ff fbcd 	bl	8000ce4 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e356      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	493a      	ldr	r1, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4935      	ldr	r1, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
 8001596:	e01a      	b.n	80015ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a32      	ldr	r2, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb9e 	bl	8000ce4 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb9a 	bl	8000ce4 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e323      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1dc>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d073      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d005      	beq.n	80015ec <HAL_RCC_OscConfig+0x21c>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d10e      	bne.n	8001604 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d063      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d15f      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e300      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x24c>
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0x288>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x270>
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x288>
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb40 	bl	8000ce4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	e010      	b.n	800168a <HAL_RCC_OscConfig+0x2ba>
 8001668:	40021000 	.word	0x40021000
 800166c:	08003d78 	.word	0x08003d78
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fb34 	bl	8000ce4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e2bd      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	4baf      	ldr	r3, [pc, #700]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2a8>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb24 	bl	8000ce4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb20 	bl	8000ce4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2a9      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b2:	4ba5      	ldr	r3, [pc, #660]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2d0>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d060      	beq.n	8001790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x310>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d119      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d116      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	4b99      	ldr	r3, [pc, #612]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x328>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e286      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4990      	ldr	r1, [pc, #576]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	e040      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d023      	beq.n	800175e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a8b      	ldr	r2, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fadf 	bl	8000ce4 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fadb 	bl	8000ce4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e264      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	497c      	ldr	r1, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a79      	ldr	r2, [pc, #484]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fabb 	bl	8000ce4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fab7 	bl	8000ce4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e240      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001784:	4b70      	ldr	r3, [pc, #448]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d03c      	beq.n	8001816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01c      	beq.n	80017de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	4a67      	ldr	r2, [pc, #412]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa96 	bl	8000ce4 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa92 	bl	8000ce4 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e21b      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ef      	beq.n	80017bc <HAL_RCC_OscConfig+0x3ec>
 80017dc:	e01b      	b.n	8001816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa79 	bl	8000ce4 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fa75 	bl	8000ce4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1fe      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80a6 	beq.w	8001970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10d      	bne.n	8001850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184c:	2301      	movs	r3, #1
 800184e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d118      	bne.n	800188e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a3a      	ldr	r2, [pc, #232]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001868:	f7ff fa3c 	bl	8000ce4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff fa38 	bl	8000ce4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1c1      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4d8>
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a6:	e024      	b.n	80018f2 <HAL_RCC_OscConfig+0x522>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d110      	bne.n	80018d2 <HAL_RCC_OscConfig+0x502>
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	e00f      	b.n	80018f2 <HAL_RCC_OscConfig+0x522>
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f9f3 	bl	8000ce4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f9ef 	bl	8000ce4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e176      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ed      	beq.n	8001902 <HAL_RCC_OscConfig+0x532>
 8001926:	e01a      	b.n	800195e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f9dc 	bl	8000ce4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f9d8 	bl	8000ce4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d906      	bls.n	8001950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e15f      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001950:	4baa      	ldr	r3, [pc, #680]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e8      	bne.n	8001930 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4ba5      	ldr	r3, [pc, #660]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4aa4      	ldr	r2, [pc, #656]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001984:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198a:	4a9c      	ldr	r2, [pc, #624]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f9a6 	bl	8000ce4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199c:	f7ff f9a2 	bl	8000ce4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e12b      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x5cc>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019be:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c4:	4a8d      	ldr	r2, [pc, #564]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f989 	bl	8000ce4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d6:	f7ff f985 	bl	8000ce4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e10e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8102 	beq.w	8001c04 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 80c5 	bne.w	8001b94 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0203 	and.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d12c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d123      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d11b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d113      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d067      	beq.n	8001b48 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d062      	beq.n	8001b44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0bb      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a9a:	f7ff f923 	bl	8000ce4 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff f91f 	bl	8000ce4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_OscConfig+0x830>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ada:	0212      	lsls	r2, r2, #8
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0552      	lsls	r2, r2, #21
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0652      	lsls	r2, r2, #25
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001afa:	06d2      	lsls	r2, r2, #27
 8001afc:	430a      	orrs	r2, r1
 8001afe:	493f      	ldr	r1, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b10:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7ff f8e2 	bl	8000ce4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f8de 	bl	8000ce4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b42:	e05f      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e05e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b6c:	f7ff f8ba 	bl	8000ce4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f8b6 	bl	8000ce4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e03f      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x7a4>
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d02d      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bb8:	f023 0303 	bic.w	r3, r3, #3
 8001bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f889 	bl	8000ce4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f885 	bl	8000ce4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e00e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x806>
 8001bf4:	e006      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0c8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4961      	ldr	r1, [pc, #388]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d04c      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e09e      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d115      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e092      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c98:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e086      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e07e      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 0203 	bic.w	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	493f      	ldr	r1, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cca:	f7ff f80b 	bl	8000ce4 <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7ff f807 	bl	8000ce4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e066      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 020c 	and.w	r2, r3, #12
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d1eb      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	492c      	ldr	r1, [pc, #176]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4924      	ldr	r1, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e036      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4910      	ldr	r1, [pc, #64]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d86:	f000 f825 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff4a 	bl	8000c44 <HAL_InitTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db4:	7afb      	ldrb	r3, [r7, #11]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003d78 	.word	0x08003d78
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11e      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e30:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e004      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d134      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d003      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xac>
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	617b      	str	r3, [r7, #20]
      break;
 8001e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	3301      	adds	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0e5b      	lsrs	r3, r3, #25
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003d90 	.word	0x08003d90
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f08:	f7ff fff0 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4904      	ldr	r1, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003d88 	.word	0x08003d88

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f34:	f7ff ffda 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0adb      	lsrs	r3, r3, #11
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003d88 	.word	0x08003d88

08001f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff f9c8 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
 8001f7a:	e014      	b.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f94:	f7ff f9b8 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d10b      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d919      	bls.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb8:	d902      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e013      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e010      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d902      	bls.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fcc:	2303      	movs	r3, #3
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e00a      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d102      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e004      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b70      	cmp	r3, #112	; 0x70
 8001fe2:	d101      	bne.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002040:	d01a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002046:	d814      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800204c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002050:	d10f      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a5c      	ldr	r2, [pc, #368]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fa44 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002080:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	494e      	ldr	r1, [pc, #312]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 809e 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a39      	ldr	r2, [pc, #228]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fdfa 	bl	8000ce4 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fdf6 	bl	8000ce4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	74fb      	strb	r3, [r7, #19]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01e      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d019      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002162:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d016      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fdb6 	bl	8000ce4 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	e00b      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fdb2 	bl	8000ce4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d902      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	74fb      	strb	r3, [r7, #19]
            break;
 8002192:	e006      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ec      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021be:	e009      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e006      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b9e      	ldr	r3, [pc, #632]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a9d      	ldr	r2, [pc, #628]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4b98      	ldr	r3, [pc, #608]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4994      	ldr	r1, [pc, #592]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 020c 	bic.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	498c      	ldr	r1, [pc, #560]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002236:	4b87      	ldr	r3, [pc, #540]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	4983      	ldr	r1, [pc, #524]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002258:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	497b      	ldr	r1, [pc, #492]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800227a:	4b76      	ldr	r3, [pc, #472]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	4972      	ldr	r1, [pc, #456]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229c:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	4961      	ldr	r1, [pc, #388]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e0:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4959      	ldr	r1, [pc, #356]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	4950      	ldr	r1, [pc, #320]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	4948      	ldr	r1, [pc, #288]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800234c:	f023 0203 	bic.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	493f      	ldr	r1, [pc, #252]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	4937      	ldr	r1, [pc, #220]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f8a4 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	491f      	ldr	r1, [pc, #124]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e011      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f875 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02b      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002442:	d109      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a02      	ldr	r2, [pc, #8]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
 8002450:	e014      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f843 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f820 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002502:	4b74      	ldr	r3, [pc, #464]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d018      	beq.n	8002540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800250e:	4b71      	ldr	r3, [pc, #452]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
       ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002526:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
       ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d047      	beq.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e044      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d018      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x86>
 8002548:	2b03      	cmp	r3, #3
 800254a:	d825      	bhi.n	8002598 <RCCEx_PLLSAI1_Config+0xa4>
 800254c:	2b01      	cmp	r3, #1
 800254e:	d002      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0x62>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d009      	beq.n	8002568 <RCCEx_PLLSAI1_Config+0x74>
 8002554:	e020      	b.n	8002598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11d      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002566:	e01a      	b.n	800259e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002568:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e013      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002586:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002596:	e006      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e004      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	430b      	orrs	r3, r1
 80025c4:	4943      	ldr	r1, [pc, #268]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d17c      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7fe fb82 	bl	8000ce4 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e2:	e009      	b.n	80025f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e4:	f7fe fb7e 	bl	8000ce4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	73fb      	strb	r3, [r7, #15]
        break;
 80025f6:	e005      	b.n	8002604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ef      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15f      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d110      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	06d2      	lsls	r2, r2, #27
 8002628:	430a      	orrs	r2, r1
 800262a:	492a      	ldr	r1, [pc, #168]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
 8002630:	e027      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d112      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6912      	ldr	r2, [r2, #16]
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	430a      	orrs	r2, r1
 8002656:	491f      	ldr	r1, [pc, #124]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	610b      	str	r3, [r1, #16]
 800265c:	e011      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	0211      	lsls	r1, r2, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6952      	ldr	r2, [r2, #20]
 8002674:	0852      	lsrs	r2, r2, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	0652      	lsls	r2, r2, #25
 800267a:	430a      	orrs	r2, r1
 800267c:	4915      	ldr	r1, [pc, #84]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe fb29 	bl	8000ce4 <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002694:	e009      	b.n	80026aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002696:	f7fe fb25 	bl	8000ce4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d902      	bls.n	80026aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	73fb      	strb	r3, [r7, #15]
          break;
 80026a8:	e005      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ef      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e095      	b.n	8002816 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fa:	d009      	beq.n	8002710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	e005      	b.n	8002710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f94a 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002746:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002750:	d902      	bls.n	8002758 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e002      	b.n	800275e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002766:	d007      	beq.n	8002778 <HAL_SPI_Init+0xa0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	0c1b      	lsrs	r3, r3, #16
 80027d4:	f003 0204 	and.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027f4:	ea42 0103 	orr.w	r1, r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_SPI_Transmit+0x22>
 800283c:	2302      	movs	r3, #2
 800283e:	e158      	b.n	8002af2 <HAL_SPI_Transmit+0x2d4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002848:	f7fe fa4c 	bl	8000ce4 <HAL_GetTick>
 800284c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002862:	e13d      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Transmit+0x52>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002874:	e134      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	d10f      	bne.n	80028e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d007      	beq.n	8002900 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002908:	d94b      	bls.n	80029a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_SPI_Transmit+0xfa>
 8002912:	8afb      	ldrh	r3, [r7, #22]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d13e      	bne.n	8002996 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800293c:	e02b      	b.n	8002996 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d112      	bne.n	8002972 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002970:	e011      	b.n	8002996 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002972:	f7fe f9b7 	bl	8000ce4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d803      	bhi.n	800298a <HAL_SPI_Transmit+0x16c>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Transmit+0x172>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002994:	e0a4      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ce      	bne.n	800293e <HAL_SPI_Transmit+0x120>
 80029a0:	e07c      	b.n	8002a9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x192>
 80029aa:	8afb      	ldrh	r3, [r7, #22]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d170      	bne.n	8002a92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d912      	bls.n	80029e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b02      	subs	r3, #2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029de:	e058      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a06:	e044      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d12b      	bne.n	8002a6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d912      	bls.n	8002a46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b02      	subs	r3, #2
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a44:	e025      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a6c:	e011      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6e:	f7fe f939 	bl	8000ce4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d803      	bhi.n	8002a86 <HAL_SPI_Transmit+0x268>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d102      	bne.n	8002a8c <HAL_SPI_Transmit+0x26e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a90:	e026      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1b5      	bne.n	8002a08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fcdb 	bl	800345c <SPI_EndRxTxTransaction>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e000      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b088      	sub	sp, #32
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b16:	d112      	bne.n	8002b3e <HAL_SPI_Receive+0x44>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2204      	movs	r2, #4
 8002b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f910 	bl	8002d5a <HAL_SPI_TransmitReceive>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e109      	b.n	8002d52 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_SPI_Receive+0x52>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e102      	b.n	8002d52 <HAL_SPI_Receive+0x258>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b54:	f7fe f8c6 	bl	8000ce4 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b6a:	e0e9      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_SPI_Receive+0x7e>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b7c:	e0e0      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2204      	movs	r2, #4
 8002b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc8:	d908      	bls.n	8002bdc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e007      	b.n	8002bec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d10f      	bne.n	8002c16 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d007      	beq.n	8002c34 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c3c:	d867      	bhi.n	8002d0e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c3e:	e030      	b.n	8002ca2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d117      	bne.n	8002c7e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f103 020c 	add.w	r2, r3, #12
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c7c:	e011      	b.n	8002ca2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe f831 	bl	8000ce4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d803      	bhi.n	8002c96 <HAL_SPI_Receive+0x19c>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_Receive+0x1a2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca0:	e04e      	b.n	8002d40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1c8      	bne.n	8002c40 <HAL_SPI_Receive+0x146>
 8002cae:	e034      	b.n	8002d1a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d115      	bne.n	8002cea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	1c9a      	adds	r2, r3, #2
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ce8:	e011      	b.n	8002d0e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cea:	f7fd fffb 	bl	8000ce4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d803      	bhi.n	8002d02 <HAL_SPI_Receive+0x208>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Receive+0x20e>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d0c:	e018      	b.n	8002d40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ca      	bne.n	8002cb0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb44 	bl	80033ac <SPI_EndRxTransaction>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
 8002d3c:	e000      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

error :
 8002d3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x26>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e1fb      	b.n	8003178 <HAL_SPI_TransmitReceive+0x41e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d88:	f7fd ffac 	bl	8000ce4 <HAL_GetTick>
 8002d8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002da4:	7efb      	ldrb	r3, [r7, #27]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00e      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x6e>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x66>
 8002dba:	7efb      	ldrb	r3, [r7, #27]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d003      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dc6:	e1cd      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x80>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x80>
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002de0:	e1c0      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2205      	movs	r2, #5
 8002df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e38:	d802      	bhi.n	8002e40 <HAL_SPI_TransmitReceive+0xe6>
 8002e3a:	8a3b      	ldrh	r3, [r7, #16]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d908      	bls.n	8002e52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d007      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e88:	d97c      	bls.n	8002f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x13e>
 8002e92:	8a7b      	ldrh	r3, [r7, #18]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d169      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ebc:	e056      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d11b      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d113      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11c      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x1f2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f4c:	f7fd feca 	bl	8000ce4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d807      	bhi.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d003      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f6a:	e0fb      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1a3      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x164>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d19d      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x164>
 8002f82:	e0df      	b.n	8003144 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x23a>
 8002f8c:	8a7b      	ldrh	r3, [r7, #18]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 80cb 	bne.w	800312a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d912      	bls.n	8002fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b02      	subs	r3, #2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc2:	e0b2      	b.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fea:	e09e      	b.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d134      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02f      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2b01      	cmp	r3, #1
 8003008:	d12c      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d912      	bls.n	800303a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b02      	subs	r3, #2
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003038:	e012      	b.n	8003060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d148      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x3aa>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d042      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d923      	bls.n	80030d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	b292      	uxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b02      	subs	r3, #2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d81f      	bhi.n	8003100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e016      	b.n	8003100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f103 020c 	add.w	r2, r3, #12
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003100:	2301      	movs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003104:	f7fd fdee 	bl	8000ce4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_TransmitReceive+0x3c2>
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x3c8>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003128:	e01c      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f af5b 	bne.w	8002fec <HAL_SPI_TransmitReceive+0x292>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	f47f af54 	bne.w	8002fec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f987 	bl	800345c <SPI_EndRxTxTransaction>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
 8003160:	e000      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003190:	f7fd fda8 	bl	8000ce4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a0:	f7fd fda0 	bl	8000ce4 <HAL_GetTick>
 80031a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b6:	e054      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d050      	beq.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c0:	f7fd fd90 	bl	8000ce4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d902      	bls.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d13d      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ee:	d111      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	d004      	beq.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d107      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d10f      	bne.n	800323e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800323c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e017      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d19b      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000000 	.word	0x20000000

08003290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800329e:	f7fd fd21 	bl	8000ce4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ae:	f7fd fd19 	bl	8000ce4 <HAL_GetTick>
 80032b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032b4:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00da      	lsls	r2, r3, #3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	0d1b      	lsrs	r3, r3, #20
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80032cc:	e05f      	b.n	800338e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032d4:	d106      	bne.n	80032e4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d050      	beq.n	800338e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032ec:	f7fd fcfa 	bl	8000ce4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d902      	bls.n	8003302 <SPI_WaitFifoStateUntilTimeout+0x72>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d13d      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d111      	bne.n	8003340 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d004      	beq.n	8003330 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d107      	bne.n	8003340 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003348:	d10f      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e010      	b.n	80033a0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3b01      	subs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d197      	bne.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000000 	.word	0x20000000

080033ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c0:	d111      	bne.n	80033e6 <SPI_EndRxTransaction+0x3a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d004      	beq.n	80033d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d107      	bne.n	80033e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fec5 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e023      	b.n	8003454 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003414:	d11d      	bne.n	8003452 <SPI_EndRxTransaction+0xa6>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d004      	beq.n	800342a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d113      	bne.n	8003452 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff ff2a 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e000      	b.n	8003454 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff ff0b 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e027      	b.n	80034e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fe70 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e014      	b.n	80034e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fee4 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e000      	b.n	80034e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e040      	b.n	800357c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fa9c 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f82c 	bl	8003584 <UART_SetConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e022      	b.n	800357c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa7c 	bl	8003a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb03 	bl	8003b80 <UART_CheckIdleState>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4ba4      	ldr	r3, [pc, #656]	; (8003840 <UART_SetConfig+0x2bc>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	69f9      	ldr	r1, [r7, #28]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a99      	ldr	r2, [pc, #612]	; (8003844 <UART_SetConfig+0x2c0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a90      	ldr	r2, [pc, #576]	; (8003848 <UART_SetConfig+0x2c4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d121      	bne.n	800364e <UART_SetConfig+0xca>
 800360a:	4b90      	ldr	r3, [pc, #576]	; (800384c <UART_SetConfig+0x2c8>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b03      	cmp	r3, #3
 8003616:	d817      	bhi.n	8003648 <UART_SetConfig+0xc4>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x9c>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003631 	.word	0x08003631
 8003624:	0800363d 	.word	0x0800363d
 8003628:	08003637 	.word	0x08003637
 800362c:	08003643 	.word	0x08003643
 8003630:	2301      	movs	r3, #1
 8003632:	76fb      	strb	r3, [r7, #27]
 8003634:	e0bc      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003636:	2302      	movs	r3, #2
 8003638:	76fb      	strb	r3, [r7, #27]
 800363a:	e0b9      	b.n	80037b0 <UART_SetConfig+0x22c>
 800363c:	2304      	movs	r3, #4
 800363e:	76fb      	strb	r3, [r7, #27]
 8003640:	e0b6      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003642:	2308      	movs	r3, #8
 8003644:	76fb      	strb	r3, [r7, #27]
 8003646:	e0b3      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003648:	2310      	movs	r3, #16
 800364a:	76fb      	strb	r3, [r7, #27]
 800364c:	e0b0      	b.n	80037b0 <UART_SetConfig+0x22c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7f      	ldr	r2, [pc, #508]	; (8003850 <UART_SetConfig+0x2cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d132      	bne.n	80036be <UART_SetConfig+0x13a>
 8003658:	4b7c      	ldr	r3, [pc, #496]	; (800384c <UART_SetConfig+0x2c8>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d828      	bhi.n	80036b8 <UART_SetConfig+0x134>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <UART_SetConfig+0xe8>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080036b9 	.word	0x080036b9
 8003674:	080036b9 	.word	0x080036b9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036ad 	.word	0x080036ad
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036a7 	.word	0x080036a7
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036b9 	.word	0x080036b9
 800369c:	080036b3 	.word	0x080036b3
 80036a0:	2300      	movs	r3, #0
 80036a2:	76fb      	strb	r3, [r7, #27]
 80036a4:	e084      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036a6:	2302      	movs	r3, #2
 80036a8:	76fb      	strb	r3, [r7, #27]
 80036aa:	e081      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036ac:	2304      	movs	r3, #4
 80036ae:	76fb      	strb	r3, [r7, #27]
 80036b0:	e07e      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036b2:	2308      	movs	r3, #8
 80036b4:	76fb      	strb	r3, [r7, #27]
 80036b6:	e07b      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036b8:	2310      	movs	r3, #16
 80036ba:	76fb      	strb	r3, [r7, #27]
 80036bc:	e078      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a64      	ldr	r2, [pc, #400]	; (8003854 <UART_SetConfig+0x2d0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d120      	bne.n	800370a <UART_SetConfig+0x186>
 80036c8:	4b60      	ldr	r3, [pc, #384]	; (800384c <UART_SetConfig+0x2c8>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036d2:	2b30      	cmp	r3, #48	; 0x30
 80036d4:	d013      	beq.n	80036fe <UART_SetConfig+0x17a>
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d814      	bhi.n	8003704 <UART_SetConfig+0x180>
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d009      	beq.n	80036f2 <UART_SetConfig+0x16e>
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d810      	bhi.n	8003704 <UART_SetConfig+0x180>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <UART_SetConfig+0x168>
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d006      	beq.n	80036f8 <UART_SetConfig+0x174>
 80036ea:	e00b      	b.n	8003704 <UART_SetConfig+0x180>
 80036ec:	2300      	movs	r3, #0
 80036ee:	76fb      	strb	r3, [r7, #27]
 80036f0:	e05e      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036f2:	2302      	movs	r3, #2
 80036f4:	76fb      	strb	r3, [r7, #27]
 80036f6:	e05b      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036f8:	2304      	movs	r3, #4
 80036fa:	76fb      	strb	r3, [r7, #27]
 80036fc:	e058      	b.n	80037b0 <UART_SetConfig+0x22c>
 80036fe:	2308      	movs	r3, #8
 8003700:	76fb      	strb	r3, [r7, #27]
 8003702:	e055      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003704:	2310      	movs	r3, #16
 8003706:	76fb      	strb	r3, [r7, #27]
 8003708:	e052      	b.n	80037b0 <UART_SetConfig+0x22c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a52      	ldr	r2, [pc, #328]	; (8003858 <UART_SetConfig+0x2d4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <UART_SetConfig+0x1d2>
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <UART_SetConfig+0x2c8>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800371e:	2bc0      	cmp	r3, #192	; 0xc0
 8003720:	d013      	beq.n	800374a <UART_SetConfig+0x1c6>
 8003722:	2bc0      	cmp	r3, #192	; 0xc0
 8003724:	d814      	bhi.n	8003750 <UART_SetConfig+0x1cc>
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x1ba>
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d810      	bhi.n	8003750 <UART_SetConfig+0x1cc>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x1b4>
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x1c0>
 8003736:	e00b      	b.n	8003750 <UART_SetConfig+0x1cc>
 8003738:	2300      	movs	r3, #0
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e038      	b.n	80037b0 <UART_SetConfig+0x22c>
 800373e:	2302      	movs	r3, #2
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e035      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003744:	2304      	movs	r3, #4
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e032      	b.n	80037b0 <UART_SetConfig+0x22c>
 800374a:	2308      	movs	r3, #8
 800374c:	76fb      	strb	r3, [r7, #27]
 800374e:	e02f      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003750:	2310      	movs	r3, #16
 8003752:	76fb      	strb	r3, [r7, #27]
 8003754:	e02c      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <UART_SetConfig+0x2c0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d125      	bne.n	80037ac <UART_SetConfig+0x228>
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <UART_SetConfig+0x2c8>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800376a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376e:	d017      	beq.n	80037a0 <UART_SetConfig+0x21c>
 8003770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003774:	d817      	bhi.n	80037a6 <UART_SetConfig+0x222>
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d00b      	beq.n	8003794 <UART_SetConfig+0x210>
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003780:	d811      	bhi.n	80037a6 <UART_SetConfig+0x222>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <UART_SetConfig+0x20a>
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d006      	beq.n	800379a <UART_SetConfig+0x216>
 800378c:	e00b      	b.n	80037a6 <UART_SetConfig+0x222>
 800378e:	2300      	movs	r3, #0
 8003790:	76fb      	strb	r3, [r7, #27]
 8003792:	e00d      	b.n	80037b0 <UART_SetConfig+0x22c>
 8003794:	2302      	movs	r3, #2
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	e00a      	b.n	80037b0 <UART_SetConfig+0x22c>
 800379a:	2304      	movs	r3, #4
 800379c:	76fb      	strb	r3, [r7, #27]
 800379e:	e007      	b.n	80037b0 <UART_SetConfig+0x22c>
 80037a0:	2308      	movs	r3, #8
 80037a2:	76fb      	strb	r3, [r7, #27]
 80037a4:	e004      	b.n	80037b0 <UART_SetConfig+0x22c>
 80037a6:	2310      	movs	r3, #16
 80037a8:	76fb      	strb	r3, [r7, #27]
 80037aa:	e001      	b.n	80037b0 <UART_SetConfig+0x22c>
 80037ac:	2310      	movs	r3, #16
 80037ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <UART_SetConfig+0x2c0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f040 8084 	bne.w	80038c4 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037bc:	7efb      	ldrb	r3, [r7, #27]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d823      	bhi.n	800380a <UART_SetConfig+0x286>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0x244>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	0800380b 	.word	0x0800380b
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	080037fb 	.word	0x080037fb
 80037dc:	0800380b 	.word	0x0800380b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800380b 	.word	0x0800380b
 80037e8:	08003803 	.word	0x08003803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fb8a 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80037f0:	6178      	str	r0, [r7, #20]
        break;
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <UART_SetConfig+0x2d8>)
 80037f6:	617b      	str	r3, [r7, #20]
        break;
 80037f8:	e00c      	b.n	8003814 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7fe faeb 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80037fe:	6178      	str	r0, [r7, #20]
        break;
 8003800:	e008      	b.n	8003814 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	617b      	str	r3, [r7, #20]
        break;
 8003808:	e004      	b.n	8003814 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	76bb      	strb	r3, [r7, #26]
        break;
 8003812:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8102 	beq.w	8003a20 <UART_SetConfig+0x49c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d305      	bcc.n	8003838 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	d913      	bls.n	8003860 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	76bb      	strb	r3, [r7, #26]
 800383c:	e0f0      	b.n	8003a20 <UART_SetConfig+0x49c>
 800383e:	bf00      	nop
 8003840:	efff69f3 	.word	0xefff69f3
 8003844:	40008000 	.word	0x40008000
 8003848:	40013800 	.word	0x40013800
 800384c:	40021000 	.word	0x40021000
 8003850:	40004400 	.word	0x40004400
 8003854:	40004800 	.word	0x40004800
 8003858:	40004c00 	.word	0x40004c00
 800385c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4618      	mov	r0, r3
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	020b      	lsls	r3, r1, #8
 8003872:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003876:	0202      	lsls	r2, r0, #8
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6849      	ldr	r1, [r1, #4]
 800387c:	0849      	lsrs	r1, r1, #1
 800387e:	4608      	mov	r0, r1
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	1814      	adds	r4, r2, r0
 8003886:	eb43 0501 	adc.w	r5, r3, r1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	4620      	mov	r0, r4
 8003896:	4629      	mov	r1, r5
 8003898:	f7fc fc9c 	bl	80001d4 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038aa:	d308      	bcc.n	80038be <UART_SetConfig+0x33a>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d204      	bcs.n	80038be <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e0b0      	b.n	8003a20 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	76bb      	strb	r3, [r7, #26]
 80038c2:	e0ad      	b.n	8003a20 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	d15c      	bne.n	8003988 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80038ce:	7efb      	ldrb	r3, [r7, #27]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d828      	bhi.n	8003926 <UART_SetConfig+0x3a2>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_SetConfig+0x358>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003909 	.word	0x08003909
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003927 	.word	0x08003927
 80038ec:	08003917 	.word	0x08003917
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003927 	.word	0x08003927
 80038f8:	08003927 	.word	0x08003927
 80038fc:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7fe fb00 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8003904:	6178      	str	r0, [r7, #20]
        break;
 8003906:	e013      	b.n	8003930 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe fb12 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 800390c:	6178      	str	r0, [r7, #20]
        break;
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <UART_SetConfig+0x4b4>)
 8003912:	617b      	str	r3, [r7, #20]
        break;
 8003914:	e00c      	b.n	8003930 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7fe fa5d 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 800391a:	6178      	str	r0, [r7, #20]
        break;
 800391c:	e008      	b.n	8003930 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	617b      	str	r3, [r7, #20]
        break;
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	76bb      	strb	r3, [r7, #26]
        break;
 800392e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d074      	beq.n	8003a20 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005a      	lsls	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b0f      	cmp	r3, #15
 8003952:	d916      	bls.n	8003982 <UART_SetConfig+0x3fe>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d212      	bcs.n	8003982 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f023 030f 	bic.w	r3, r3, #15
 8003964:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	b29a      	uxth	r2, r3
 8003972:	89fb      	ldrh	r3, [r7, #14]
 8003974:	4313      	orrs	r3, r2
 8003976:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	89fa      	ldrh	r2, [r7, #14]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e04e      	b.n	8003a20 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	76bb      	strb	r3, [r7, #26]
 8003986:	e04b      	b.n	8003a20 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003988:	7efb      	ldrb	r3, [r7, #27]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d827      	bhi.n	80039de <UART_SetConfig+0x45a>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0x410>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039c1 	.word	0x080039c1
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	080039df 	.word	0x080039df
 80039a4:	080039cf 	.word	0x080039cf
 80039a8:	080039df 	.word	0x080039df
 80039ac:	080039df 	.word	0x080039df
 80039b0:	080039df 	.word	0x080039df
 80039b4:	080039d7 	.word	0x080039d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7fe faa4 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80039bc:	6178      	str	r0, [r7, #20]
        break;
 80039be:	e013      	b.n	80039e8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7fe fab6 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 80039c4:	6178      	str	r0, [r7, #20]
        break;
 80039c6:	e00f      	b.n	80039e8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <UART_SetConfig+0x4b4>)
 80039ca:	617b      	str	r3, [r7, #20]
        break;
 80039cc:	e00c      	b.n	80039e8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ce:	f7fe fa01 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80039d2:	6178      	str	r0, [r7, #20]
        break;
 80039d4:	e008      	b.n	80039e8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e004      	b.n	80039e8 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	76bb      	strb	r3, [r7, #26]
        break;
 80039e6:	bf00      	nop
    }

    if (pclk != 0U)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	085a      	lsrs	r2, r3, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	d908      	bls.n	8003a1c <UART_SetConfig+0x498>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d204      	bcs.n	8003a1c <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e001      	b.n	8003a20 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a2c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01a      	beq.n	8003b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3a:	d10a      	bne.n	8003b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b8e:	f7fd f8a9 	bl	8000ce4 <HAL_GetTick>
 8003b92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d10e      	bne.n	8003bc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f82a 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e020      	b.n	8003c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d10e      	bne.n	8003bec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f814 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e00a      	b.n	8003c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	e05d      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d059      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fd f85e 	bl	8000ce4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11b      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e042      	b.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02b      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8e:	d123      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ca8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e00f      	b.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d092      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	; (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	; (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	; (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 f820 	bl	8003d58 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003dc8 	.word	0x08003dc8
 8003d3c:	08003dc8 	.word	0x08003dc8
 8003d40:	08003dc8 	.word	0x08003dc8
 8003d44:	08003dcc 	.word	0x08003dcc

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
