
ADXL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d0  080057d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d8  080057d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080057e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08005854  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08005854  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c427  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac8  00000000  00000000  0002c4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002df98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022404  00000000  00000000  0002f400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ce2  00000000  00000000  00051804  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d097f  00000000  00000000  0005a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ae65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  0012aee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005724 	.word	0x08005724

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005724 	.word	0x08005724

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <reg_read>:




void reg_read(SPI_Comm spi, uint8_t addr, uint8_t* rx)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	f107 0408 	add.w	r4, r7, #8
 8000eb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	f000 feee 	bl	8001cb8 <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f107 0117 	add.w	r1, r7, #23
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f002 f985 	bl	80031f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, sizeof(*rx), HAL_MAX_DELAY);
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	f002 faec 	bl	80034d2 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f000 fed7 	bl	8001cb8 <HAL_GPIO_TogglePin>

	return;
 8000f0a:	bf00      	nop
}
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <reg_write>:

void reg_write(SPI_Comm spi, uint8_t addr, uint8_t payload)
{
 8000f12:	b590      	push	{r4, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	f107 0408 	add.w	r4, r7, #8
 8000f1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f20:	4611      	mov	r1, r2
 8000f22:	461a      	mov	r2, r3
 8000f24:	460b      	mov	r3, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[] = {(addr << 1), payload};
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	753b      	strb	r3, [r7, #20]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	889b      	ldrh	r3, [r3, #4]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f000 feb8 	bl	8001cb8 <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f107 0114 	add.w	r1, r7, #20
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	2202      	movs	r2, #2
 8000f54:	f002 f94f 	bl	80031f6 <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f000 fea8 	bl	8001cb8 <HAL_GPIO_TogglePin>

	return;
 8000f68:	bf00      	nop
}
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b08b      	sub	sp, #44	; 0x2c
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 fb89 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f8d5 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 f9b1 	bl	80012e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f82:	f000 f97f 	bl	8001284 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f86:	f000 f93f 	bl	8001208 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GPIO_Pin chip_select = {
 8000f8a:	4a62      	ldr	r2, [pc, #392]	; (8001114 <main+0x1a4>)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	e883 0003 	stmia.w	r3, {r0, r1}
  		.port = GPIOB,
  		.pin = GPIO_PIN_6
  };

  SPI_Comm accel_spi = {
 8000f98:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <main+0x1a8>)
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	617b      	str	r3, [r7, #20]
  		.handle = &hspi1,
  		.cs = &chip_select
  };


  uint8_t rxbuffer = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]

  // Set Stand By Mode
  uint8_t payload = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  reg_write(accel_spi, (uint8_t) ADXL372_POWER_CTL, payload);
 8000fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb0:	223f      	movs	r2, #63	; 0x3f
 8000fb2:	f107 0110 	add.w	r1, r7, #16
 8000fb6:	c903      	ldmia	r1, {r0, r1}
 8000fb8:	f7ff ffab 	bl	8000f12 <reg_write>
  reg_read(accel_spi, (uint8_t) ADXL372_POWER_CTL, (uint8_t*) &rxbuffer);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	223f      	movs	r2, #63	; 0x3f
 8000fc2:	f107 0110 	add.w	r1, r7, #16
 8000fc6:	c903      	ldmia	r1, {r0, r1}
 8000fc8:	f7ff ff6e 	bl	8000ea8 <reg_read>

  HAL_UART_Transmit(&huart2, &rxbuffer, sizeof(rxbuffer), HAL_MAX_DELAY);
 8000fcc:	f107 010f 	add.w	r1, r7, #15
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4851      	ldr	r0, [pc, #324]	; (800111c <main+0x1ac>)
 8000fd8:	f002 ffc0 	bl	8003f5c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe0:	f000 fbd0 	bl	8001784 <HAL_Delay>

  // Set FIFO Mode
  payload = (uint8_t) 0x02; // 00000010 - stream
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  reg_write(accel_spi, (uint8_t) ADXL372_FIFO_CTL, payload);
 8000fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fee:	223a      	movs	r2, #58	; 0x3a
 8000ff0:	f107 0110 	add.w	r1, r7, #16
 8000ff4:	c903      	ldmia	r1, {r0, r1}
 8000ff6:	f7ff ff8c 	bl	8000f12 <reg_write>
  reg_read(accel_spi, (uint8_t) ADXL372_FIFO_CTL, (uint8_t*) &rxbuffer);
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	223a      	movs	r2, #58	; 0x3a
 8001000:	f107 0110 	add.w	r1, r7, #16
 8001004:	c903      	ldmia	r1, {r0, r1}
 8001006:	f7ff ff4f 	bl	8000ea8 <reg_read>

  HAL_UART_Transmit(&huart2, &rxbuffer, sizeof(rxbuffer), HAL_MAX_DELAY);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	4841      	ldr	r0, [pc, #260]	; (800111c <main+0x1ac>)
 8001016:	f002 ffa1 	bl	8003f5c <HAL_UART_Transmit>
  HAL_Delay(1000);
 800101a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101e:	f000 fbb1 	bl	8001784 <HAL_Delay>

  // Set Full Bandwidth Mode with high threshold
  payload = (uint8_t) 0x23; // 00100011
 8001022:	2323      	movs	r3, #35	; 0x23
 8001024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  reg_write(accel_spi, (uint8_t) ADXL372_POWER_CTL, payload);
 8001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102c:	223f      	movs	r2, #63	; 0x3f
 800102e:	f107 0110 	add.w	r1, r7, #16
 8001032:	c903      	ldmia	r1, {r0, r1}
 8001034:	f7ff ff6d 	bl	8000f12 <reg_write>
  reg_read(accel_spi, (uint8_t) ADXL372_POWER_CTL, (uint8_t*) &rxbuffer);
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	223f      	movs	r2, #63	; 0x3f
 800103e:	f107 0110 	add.w	r1, r7, #16
 8001042:	c903      	ldmia	r1, {r0, r1}
 8001044:	f7ff ff30 	bl	8000ea8 <reg_read>

  HAL_UART_Transmit(&huart2, &rxbuffer, sizeof(rxbuffer), HAL_MAX_DELAY);
 8001048:	f107 010f 	add.w	r1, r7, #15
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	2201      	movs	r2, #1
 8001052:	4832      	ldr	r0, [pc, #200]	; (800111c <main+0x1ac>)
 8001054:	f002 ff82 	bl	8003f5c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105c:	f000 fb92 	bl	8001784 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int rxbufferFIFO = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  int enough = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  while (1)
  {
    /* USER CODE END WHILE */
	  // Set Read the FIFO Register
	  reg_read(accel_spi, (uint8_t) ADXL372_FIFO_DATA, (uint8_t*) &rxbufferFIFO);
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2242      	movs	r2, #66	; 0x42
 800106e:	f107 0110 	add.w	r1, r7, #16
 8001072:	c903      	ldmia	r1, {r0, r1}
 8001074:	f7ff ff18 	bl	8000ea8 <reg_read>
	  enough = (rxbufferFIFO > 0) ? (int)(((ceil(log10(rxbufferFIFO))+1)*sizeof(char)) + 2) : 3;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	dd2c      	ble.n	80010d8 <main+0x168>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	ec44 3b10 	vmov	d0, r3, r4
 800108e:	f004 f883 	bl	8005198 <log10>
 8001092:	eeb0 7a40 	vmov.f32	s14, s0
 8001096:	eef0 7a60 	vmov.f32	s15, s1
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	eef0 0a67 	vmov.f32	s1, s15
 80010a2:	f003 fff9 	bl	8005098 <ceil>
 80010a6:	ec51 0b10 	vmov	r0, r1, d0
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <main+0x1b0>)
 80010b0:	f7ff f8ec 	bl	800028c <__adddf3>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c4:	f7ff f8e2 	bl	800028c <__adddf3>
 80010c8:	4603      	mov	r3, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4618      	mov	r0, r3
 80010ce:	4621      	mov	r1, r4
 80010d0:	f7ff fd42 	bl	8000b58 <__aeabi_d2iz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	e000      	b.n	80010da <main+0x16a>
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
	  //char printstr[enough];
	  char *printstr;
	  printstr = (char *) malloc(enough);
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fbba 	bl	8004858 <malloc>
 80010e4:	4603      	mov	r3, r0
 80010e6:	607b      	str	r3, [r7, #4]
	  sprintf(printstr, "%d\r\n", rxbufferFIFO);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	490d      	ldr	r1, [pc, #52]	; (8001124 <main+0x1b4>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fc82 	bl	80049f8 <siprintf>
	  HAL_UART_Transmit(&huart2, &printstr, sizeof(printstr), HAL_MAX_DELAY);
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2204      	movs	r2, #4
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <main+0x1ac>)
 80010fe:	f002 ff2d 	bl	8003f5c <HAL_UART_Transmit>
	  free(printstr);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fbaf 	bl	8004868 <free>
	  HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f000 fb3a 	bl	8001784 <HAL_Delay>
  {
 8001110:	e7aa      	b.n	8001068 <main+0xf8>
 8001112:	bf00      	nop
 8001114:	08005744 	.word	0x08005744
 8001118:	2000009c 	.word	0x2000009c
 800111c:	20000100 	.word	0x20000100
 8001120:	3ff00000 	.word	0x3ff00000
 8001124:	0800573c 	.word	0x0800573c

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0b0      	sub	sp, #192	; 0xc0
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001132:	2244      	movs	r2, #68	; 0x44
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fb9e 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2268      	movs	r2, #104	; 0x68
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fb90 	bl	8004878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 800117c:	230a      	movs	r3, #10
 800117e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001182:	2307      	movs	r3, #7
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fe0b 	bl	8001db4 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011a4:	f000 f906 	bl	80013b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2303      	movs	r3, #3
 80011ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011c0:	2104      	movs	r1, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fa16 	bl	80025f4 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011ce:	f000 f8f1 	bl	80013b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fc0d 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011e8:	f000 f8e4 	bl	80013b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f0:	f000 fd8a 	bl	8001d08 <HAL_PWREx_ControlVoltageScaling>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80011fa:	f000 f8db 	bl	80013b4 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	37c0      	adds	r7, #192	; 0xc0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_SPI1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_SPI1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_SPI1_Init+0x74>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI1_Init+0x74>)
 8001222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001226:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0x74>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_SPI1_Init+0x74>)
 800123e:	2228      	movs	r2, #40	; 0x28
 8001240:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_SPI1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI1_Init+0x74>)
 8001256:	2207      	movs	r2, #7
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0x74>)
 8001262:	2208      	movs	r2, #8
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_SPI1_Init+0x74>)
 8001268:	f001 ff22 	bl	80030b0 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 f89f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000009c 	.word	0x2000009c
 8001280:	40013000 	.word	0x40013000

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_USART2_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_USART2_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_USART2_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012c8:	f002 fdfa 	bl	8003ec0 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f86f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000100 	.word	0x20000100
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_GPIO_Init+0xc0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_GPIO_Init+0xc0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_GPIO_Init+0xc0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <MX_GPIO_Init+0xc4>)
 8001360:	f000 fc92 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_GPIO_Init+0xc8>)
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0xcc>)
 800137a:	f000 fb0b 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_GPIO_Init+0xc4>)
 8001396:	f000 fafd 	bl	8001994 <HAL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	10210000 	.word	0x10210000
 80013b0:	48000800 	.word	0x48000800

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ba:	e7fe      	b.n	80013ba <Error_Handler+0x6>

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x44>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x44>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x44>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_SPI_MspInit+0x7c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d128      	bne.n	8001478 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_SPI_MspInit+0x80>)
 800142c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_SPI_MspInit+0x80>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23e0      	movs	r3, #224	; 0xe0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001466:	2305      	movs	r3, #5
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f000 fa8e 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40013000 	.word	0x40013000
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ea:	2307      	movs	r3, #7
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 fa4c 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004400 	.word	0x40004400
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8f4 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f003 f938 	bl	8004804 <__errno>
 8001594:	4602      	mov	r2, r0
 8001596:	230c      	movs	r3, #12
 8001598:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20028000 	.word	0x20028000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	20000090 	.word	0x20000090
 80015c8:	20000188 	.word	0x20000188

080015cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <SystemInit+0x64>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <SystemInit+0x64>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <SystemInit+0x68>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <SystemInit+0x68>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <SystemInit+0x68>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <SystemInit+0x68>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <SystemInit+0x68>)
 80015f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001600:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <SystemInit+0x68>)
 8001604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001608:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <SystemInit+0x68>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <SystemInit+0x68>)
 8001610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <SystemInit+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SystemInit+0x64>)
 800161e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001622:	609a      	str	r2, [r3, #8]
#endif
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	40021000 	.word	0x40021000

08001638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff ffc6 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001640:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001642:	e003      	b.n	800164c <LoopCopyDataInit>

08001644 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001646:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001648:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800164a:	3104      	adds	r1, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <LoopForever+0xa>)
	ldr	r3, =_edata
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001650:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001652:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001654:	d3f6      	bcc.n	8001644 <CopyDataInit>
	ldr	r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001658:	e002      	b.n	8001660 <LoopFillZerobss>

0800165a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800165a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800165c:	f842 3b04 	str.w	r3, [r2], #4

08001660 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <LoopForever+0x16>)
	cmp	r2, r3
 8001662:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001664:	d3f9      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f003 f8d3 	bl	8004810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166a:	f7ff fc81 	bl	8000f70 <main>

0800166e <LoopForever>:

LoopForever:
    b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001670:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001674:	080057e0 	.word	0x080057e0
	ldr	r0, =_sdata
 8001678:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800167c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001680:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001684:	20000188 	.word	0x20000188

08001688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_IRQHandler>
	...

0800168c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_Init+0x3c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x3c>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f000 f942 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 f80f 	bl	80016cc <HAL_InitTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	e001      	b.n	80016be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ba:	f7ff fe7f 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016be:	79fb      	ldrb	r3, [r7, #7]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_InitTick+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d023      	beq.n	8001728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_InitTick+0x70>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0x6c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f93f 	bl	800197a <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d809      	bhi.n	800171c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f917 	bl	8001942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_InitTick+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e007      	b.n	800172c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e004      	b.n	800172c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e001      	b.n	800172c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000180 	.word	0x20000180

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000180 	.word	0x20000180

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_Delay+0x40>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff47 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5c 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e154      	b.n	8001c4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8146 	beq.w	8001c48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d00b      	beq.n	80019dc <HAL_GPIO_Init+0x48>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d130      	bne.n	8001a3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a12:	2201      	movs	r2, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 0201 	and.w	r2, r3, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0xea>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80a0 	beq.w	8001c48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0c:	4a57      	ldr	r2, [pc, #348]	; (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6613      	str	r3, [r2, #96]	; 0x60
 8001b14:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b20:	4a53      	ldr	r2, [pc, #332]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4a:	d019      	beq.n	8001b80 <HAL_GPIO_Init+0x1ec>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_GPIO_Init+0x1e8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_GPIO_Init+0x2e4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <HAL_GPIO_Init+0x1e4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d007      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_GPIO_Init+0x2ec>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e008      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b70:	2307      	movs	r3, #7
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e004      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b80:	2300      	movs	r3, #0
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	f002 0203 	and.w	r2, r2, #3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b92:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc4:	4a2f      	ldr	r2, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c18:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f aea3 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000c00 	.word	0x48000c00
 8001c80:	48001000 	.word	0x48001000
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43d9      	mvns	r1, r3
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	400b      	ands	r3, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40007000 	.word	0x40007000

08001d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d16:	d130      	bne.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d038      	beq.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2232      	movs	r2, #50	; 0x32
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4c:	e002      	b.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d60:	d102      	bne.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f2      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d110      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e00f      	b.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d007      	beq.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40007000 	.word	0x40007000
 8001dac:	20000000 	.word	0x20000000
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f000 bc11 	b.w	80025ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc8:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80e4 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4c>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	f040 808b 	bne.w	8001f0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 8087 	bne.w	8001f0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x64>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e3e8      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_RCC_OscConfig+0x7e>
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e30:	e005      	b.n	8001e3e <HAL_RCC_OscConfig+0x8a>
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d223      	bcs.n	8001e8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fd78 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e3c9      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e56:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4977      	ldr	r1, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e74:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	4972      	ldr	r1, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
 8001e88:	e025      	b.n	8001ed6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8a:	4b70      	ldr	r3, [pc, #448]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	496a      	ldr	r1, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4965      	ldr	r1, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fd38 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e389      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed6:	f000 fc6f 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	4a5a      	ldr	r2, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef2:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_RCC_OscConfig+0x2a0>)
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_RCC_OscConfig+0x2a4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fbe6 	bl	80016cc <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d052      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	e36d      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d032      	beq.n	8001f7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f16:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fc23 	bl	800176c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fc1f 	bl	800176c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e356      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	493a      	ldr	r1, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4935      	ldr	r1, [pc, #212]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e01a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fbf0 	bl	800176c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f90:	f7ff fbec 	bl	800176c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e323      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1dc>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d073      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x21c>
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d063      	beq.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d15f      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e300      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x24c>
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0x288>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x270>
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_OscConfig+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_RCC_OscConfig+0x298>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x288>
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x298>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_RCC_OscConfig+0x298>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fb92 	bl	800176c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	e010      	b.n	800206e <HAL_RCC_OscConfig+0x2ba>
 800204c:	40021000 	.word	0x40021000
 8002050:	0800574c 	.word	0x0800574c
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fb86 	bl	800176c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e2bd      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	4baf      	ldr	r3, [pc, #700]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x2a8>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fb76 	bl	800176c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fb72 	bl	800176c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e2a9      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	4ba5      	ldr	r3, [pc, #660]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x2d0>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d060      	beq.n	8002174 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x310>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d116      	bne.n	80020f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	4b99      	ldr	r3, [pc, #612]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x328>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e286      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020dc:	4b93      	ldr	r3, [pc, #588]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	4990      	ldr	r1, [pc, #576]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f0:	e040      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d023      	beq.n	8002142 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fa:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a8b      	ldr	r2, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002106:	f7ff fb31 	bl	800176c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fb2d 	bl	800176c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e264      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	497c      	ldr	r1, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e018      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff fb0d 	bl	800176c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002156:	f7ff fb09 	bl	800176c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e240      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002168:	4b70      	ldr	r3, [pc, #448]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03c      	beq.n	80021fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff fae8 	bl	800176c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff fae4 	bl	800176c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e21b      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b2:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ef      	beq.n	80021a0 <HAL_RCC_OscConfig+0x3ec>
 80021c0:	e01b      	b.n	80021fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7ff facb 	bl	800176c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff fac7 	bl	800176c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1fe      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ef      	bne.n	80021da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80a6 	beq.w	8002354 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800220c:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10d      	bne.n	8002234 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a43      	ldr	r2, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002234:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCC_OscConfig+0x57c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d118      	bne.n	8002272 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x57c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <HAL_RCC_OscConfig+0x57c>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224c:	f7ff fa8e 	bl	800176c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7ff fa8a 	bl	800176c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1c1      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_RCC_OscConfig+0x57c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_RCC_OscConfig+0x4d8>
 800227a:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228a:	e024      	b.n	80022d6 <HAL_RCC_OscConfig+0x522>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d110      	bne.n	80022b6 <HAL_RCC_OscConfig+0x502>
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_RCC_OscConfig+0x578>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b4:	e00f      	b.n	80022d6 <HAL_RCC_OscConfig+0x522>
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff fa45 	bl	800176c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff fa41 	bl	800176c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e176      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x578>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ed      	beq.n	80022e6 <HAL_RCC_OscConfig+0x532>
 800230a:	e01a      	b.n	8002342 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff fa2e 	bl	800176c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002312:	e00f      	b.n	8002334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff fa2a 	bl	800176c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d906      	bls.n	8002334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e15f      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002334:	4baa      	ldr	r3, [pc, #680]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e8      	bne.n	8002314 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4ba5      	ldr	r3, [pc, #660]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4aa4      	ldr	r2, [pc, #656]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002368:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236e:	4a9c      	ldr	r2, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff f9f8 	bl	800176c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002380:	f7ff f9f4 	bl	800176c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e12b      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002392:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x5cc>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023a2:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80023a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a8:	4a8d      	ldr	r2, [pc, #564]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7ff f9db 	bl	800176c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ba:	f7ff f9d7 	bl	800176c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e10e      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023cc:	4b84      	ldr	r3, [pc, #528]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80023ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8102 	beq.w	80025e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f040 80c5 	bne.w	8002578 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	429a      	cmp	r2, r3
 8002400:	d12c      	bne.n	800245c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	3b01      	subs	r3, #1
 800240e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d123      	bne.n	800245c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d11b      	bne.n	800245c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d113      	bne.n	800245c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	3b01      	subs	r3, #1
 8002442:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d109      	bne.n	800245c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d067      	beq.n	800252c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d062      	beq.n	8002528 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002462:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0bb      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5a      	ldr	r2, [pc, #360]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800247e:	f7ff f975 	bl	800176c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff f971 	bl	800176c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0a8      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCC_OscConfig+0x830>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024be:	0212      	lsls	r2, r2, #8
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024c6:	0852      	lsrs	r2, r2, #1
 80024c8:	3a01      	subs	r2, #1
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0652      	lsls	r2, r2, #25
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024de:	06d2      	lsls	r2, r2, #27
 80024e0:	430a      	orrs	r2, r1
 80024e2:	493f      	ldr	r1, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002500:	f7ff f934 	bl	800176c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff f930 	bl	800176c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e067      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002526:	e05f      	b.n	80025e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e05e      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002550:	f7ff f90c 	bl	800176c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff f908 	bl	800176c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e03f      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x7a4>
 8002576:	e037      	b.n	80025e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d02d      	beq.n	80025da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002588:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 800259c:	f023 0303 	bic.w	r3, r3, #3
 80025a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80025a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7ff f8db 	bl	800176c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff f8d7 	bl	800176c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e00e      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_OscConfig+0x82c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x806>
 80025d8:	e006      	b.n	80025e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e005      	b.n	80025ea <HAL_RCC_OscConfig+0x836>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop

080025f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0c8      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d910      	bls.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4961      	ldr	r1, [pc, #388]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b0      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d04c      	beq.n	80026de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d121      	bne.n	800269c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e09e      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d107      	bne.n	8002674 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d115      	bne.n	800269c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e092      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267c:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e086      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e07e      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800269c:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 0203 	bic.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	493f      	ldr	r1, [pc, #252]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7ff f85d 	bl	800176c <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b6:	f7ff f859 	bl	800176c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e066      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 020c 	and.w	r2, r3, #12
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	429a      	cmp	r2, r3
 80026dc:	d1eb      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	492c      	ldr	r1, [pc, #176]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d210      	bcs.n	800272c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4924      	ldr	r1, [pc, #144]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1b0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e036      	b.n	800279a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4918      	ldr	r1, [pc, #96]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4910      	ldr	r1, [pc, #64]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800276a:	f000 f825 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 800276e:	4601      	mov	r1, r0
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	fa21 f303 	lsr.w	r3, r1, r3
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe ff9c 	bl	80016cc <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	72fb      	strb	r3, [r7, #11]

  return status;
 8002798:	7afb      	ldrb	r3, [r7, #11]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	0800574c 	.word	0x0800574c
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x34>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d121      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d11e      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e005      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d102      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e004      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d101      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800283e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d133      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0xa4>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0xaa>
 800285a:	e005      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800285e:	617b      	str	r3, [r7, #20]
      break;
 8002860:	e005      	b.n	800286e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	e002      	b.n	800286e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	617b      	str	r3, [r7, #20]
      break;
 800286c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	3301      	adds	r3, #1
 800287a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	fb02 f203 	mul.w	r2, r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_GetSysClockFreq+0x104>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0e5b      	lsrs	r3, r3, #25
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028ae:	69bb      	ldr	r3, [r7, #24]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08005764 	.word	0x08005764
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	007a1200 	.word	0x007a1200

080028cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000000 	.word	0x20000000

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e8:	f7ff fff0 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028ec:	4601      	mov	r1, r0
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	0800575c 	.word	0x0800575c

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002914:	f7ff ffda 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	0800575c 	.word	0x0800575c

0800293c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002954:	f7ff f9ca 	bl	8001cec <HAL_PWREx_GetVoltageRange>
 8002958:	6178      	str	r0, [r7, #20]
 800295a:	e014      	b.n	8002986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002966:	6593      	str	r3, [r2, #88]	; 0x58
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002974:	f7ff f9ba 	bl	8001cec <HAL_PWREx_GetVoltageRange>
 8002978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	d10b      	bne.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d919      	bls.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2ba0      	cmp	r3, #160	; 0xa0
 8002998:	d902      	bls.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800299a:	2302      	movs	r3, #2
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	e013      	b.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029a0:	2301      	movs	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e010      	b.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d902      	bls.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029ac:	2303      	movs	r3, #3
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e00a      	b.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d102      	bne.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029b8:	2302      	movs	r3, #2
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	e004      	b.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b70      	cmp	r3, #112	; 0x70
 80029c2:	d101      	bne.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029c4:	2301      	movs	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 0207 	bic.w	r2, r3, #7
 80029d0:	4909      	ldr	r1, [pc, #36]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40022000 	.word	0x40022000

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a04:	2300      	movs	r3, #0
 8002a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a20:	d005      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a2c:	e00f      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a5c      	ldr	r2, [pc, #368]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3a:	e00c      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fa44 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	74fb      	strb	r3, [r7, #19]
      break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a5c:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	494e      	ldr	r1, [pc, #312]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a72:	e001      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 809e 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a8a:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fe50 	bl	800176c <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ace:	e009      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe fe4c 	bl	800176c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae2:	e005      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ef      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d15a      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01e      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d019      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b3e:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe0c 	bl	800176c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	e00b      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe08 	bl	800176c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d902      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b6e:	e006      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ec      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b92:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb0:	7c7b      	ldrb	r3, [r7, #17]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b9e      	ldr	r3, [pc, #632]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	4a9d      	ldr	r2, [pc, #628]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bce:	4b98      	ldr	r3, [pc, #608]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 0203 	bic.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4994      	ldr	r1, [pc, #592]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 020c 	bic.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	498c      	ldr	r1, [pc, #560]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c12:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	4983      	ldr	r1, [pc, #524]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4972      	ldr	r1, [pc, #456]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c78:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	496a      	ldr	r1, [pc, #424]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	4961      	ldr	r1, [pc, #388]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	4959      	ldr	r1, [pc, #356]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	4950      	ldr	r1, [pc, #320]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	4948      	ldr	r1, [pc, #288]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d28:	f023 0203 	bic.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	493f      	ldr	r1, [pc, #252]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d028      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f8a4 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	491f      	ldr	r1, [pc, #124]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dcc:	60d3      	str	r3, [r2, #12]
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f875 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a02      	ldr	r2, [pc, #8]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2a:	60d3      	str	r3, [r2, #12]
 8002e2c:	e014      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f843 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01c      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f820 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ec0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ede:	4b73      	ldr	r3, [pc, #460]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d018      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0203 	and.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
       ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f02:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
       ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d044      	beq.n	8002fa0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e041      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d00c      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x6e>
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d013      	beq.n	8002f50 <RCCEx_PLLSAI1_Config+0x80>
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d120      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f2c:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e01a      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4e:	e013      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f6c:	e006      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      break;
 8002f72:	e004      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	4944      	ldr	r1, [pc, #272]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d17c      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a40      	ldr	r2, [pc, #256]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fbdb 	bl	800176c <HAL_GetTick>
 8002fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fb8:	e009      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fba:	f7fe fbd7 	bl	800176c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d902      	bls.n	8002fce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	73fb      	strb	r3, [r7, #15]
        break;
 8002fcc:	e005      	b.n	8002fda <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d15f      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d110      	bne.n	8003008 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6892      	ldr	r2, [r2, #8]
 8002ff6:	0211      	lsls	r1, r2, #8
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68d2      	ldr	r2, [r2, #12]
 8002ffc:	06d2      	lsls	r2, r2, #27
 8002ffe:	430a      	orrs	r2, r1
 8003000:	492a      	ldr	r1, [pc, #168]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]
 8003006:	e027      	b.n	8003058 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d112      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800300e:	4b27      	ldr	r3, [pc, #156]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003016:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6892      	ldr	r2, [r2, #8]
 800301e:	0211      	lsls	r1, r2, #8
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6912      	ldr	r2, [r2, #16]
 8003024:	0852      	lsrs	r2, r2, #1
 8003026:	3a01      	subs	r2, #1
 8003028:	0552      	lsls	r2, r2, #21
 800302a:	430a      	orrs	r2, r1
 800302c:	491f      	ldr	r1, [pc, #124]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	610b      	str	r3, [r1, #16]
 8003032:	e011      	b.n	8003058 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800303c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6892      	ldr	r2, [r2, #8]
 8003044:	0211      	lsls	r1, r2, #8
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6952      	ldr	r2, [r2, #20]
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	3a01      	subs	r2, #1
 800304e:	0652      	lsls	r2, r2, #25
 8003050:	430a      	orrs	r2, r1
 8003052:	4916      	ldr	r1, [pc, #88]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800305e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe fb82 	bl	800176c <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800306a:	e009      	b.n	8003080 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306c:	f7fe fb7e 	bl	800176c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d902      	bls.n	8003080 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	73fb      	strb	r3, [r7, #15]
          break;
 800307e:	e005      	b.n	800308c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ef      	beq.n	800306c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e095      	b.n	80031ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d2:	d009      	beq.n	80030e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
 80030da:	e005      	b.n	80030e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe f97e 	bl	8001404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003128:	d902      	bls.n	8003130 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e002      	b.n	8003136 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003134:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800313e:	d007      	beq.n	8003150 <HAL_SPI_Init+0xa0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003148:	d002      	beq.n	8003150 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	ea42 0103 	orr.w	r1, r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 0204 	and.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031cc:	ea42 0103 	orr.w	r1, r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_SPI_Transmit+0x22>
 8003214:	2302      	movs	r3, #2
 8003216:	e158      	b.n	80034ca <HAL_SPI_Transmit+0x2d4>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003220:	f7fe faa4 	bl	800176c <HAL_GetTick>
 8003224:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800323a:	e13d      	b.n	80034b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0x52>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800324c:	e134      	b.n	80034b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003298:	d10f      	bne.n	80032ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d007      	beq.n	80032d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032e0:	d94b      	bls.n	800337a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Transmit+0xfa>
 80032ea:	8afb      	ldrh	r3, [r7, #22]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d13e      	bne.n	800336e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003314:	e02b      	b.n	800336e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d112      	bne.n	800334a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003348:	e011      	b.n	800336e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334a:	f7fe fa0f 	bl	800176c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d803      	bhi.n	8003362 <HAL_SPI_Transmit+0x16c>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d102      	bne.n	8003368 <HAL_SPI_Transmit+0x172>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800336c:	e0a4      	b.n	80034b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ce      	bne.n	8003316 <HAL_SPI_Transmit+0x120>
 8003378:	e07c      	b.n	8003474 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Transmit+0x192>
 8003382:	8afb      	ldrh	r3, [r7, #22]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d170      	bne.n	800346a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d912      	bls.n	80033b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b02      	subs	r3, #2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b6:	e058      	b.n	800346a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033de:	e044      	b.n	800346a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d12b      	bne.n	8003446 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d912      	bls.n	800341e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b02      	subs	r3, #2
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800341c:	e025      	b.n	800346a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003444:	e011      	b.n	800346a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fe f991 	bl	800176c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x268>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x26e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003468:	e026      	b.n	80034b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1b5      	bne.n	80033e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fcdb 	bl	8003e34 <SPI_EndRxTxTransaction>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e000      	b.n	80034b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80034b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b088      	sub	sp, #32
 80034d6:	af02      	add	r7, sp, #8
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ee:	d112      	bne.n	8003516 <HAL_SPI_Receive+0x44>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10e      	bne.n	8003516 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2204      	movs	r2, #4
 80034fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f910 	bl	8003732 <HAL_SPI_TransmitReceive>
 8003512:	4603      	mov	r3, r0
 8003514:	e109      	b.n	800372a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_SPI_Receive+0x52>
 8003520:	2302      	movs	r3, #2
 8003522:	e102      	b.n	800372a <HAL_SPI_Receive+0x258>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352c:	f7fe f91e 	bl	800176c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d002      	beq.n	8003544 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003542:	e0e9      	b.n	8003718 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Receive+0x7e>
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003554:	e0e0      	b.n	8003718 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2204      	movs	r2, #4
 800355a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a0:	d908      	bls.n	80035b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	e007      	b.n	80035c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d10f      	bne.n	80035ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d007      	beq.n	800360c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003614:	d867      	bhi.n	80036e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003616:	e030      	b.n	800367a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d117      	bne.n	8003656 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f103 020c 	add.w	r2, r3, #12
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003654:	e011      	b.n	800367a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003656:	f7fe f889 	bl	800176c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d803      	bhi.n	800366e <HAL_SPI_Receive+0x19c>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d102      	bne.n	8003674 <HAL_SPI_Receive+0x1a2>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003678:	e04e      	b.n	8003718 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1c8      	bne.n	8003618 <HAL_SPI_Receive+0x146>
 8003686:	e034      	b.n	80036f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	b292      	uxth	r2, r2
 80036a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036c0:	e011      	b.n	80036e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c2:	f7fe f853 	bl	800176c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d803      	bhi.n	80036da <HAL_SPI_Receive+0x208>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_Receive+0x20e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036e4:	e018      	b.n	8003718 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ca      	bne.n	8003688 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb44 	bl	8003d84 <SPI_EndRxTransaction>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
 8003714:	e000      	b.n	8003718 <HAL_SPI_Receive+0x246>
  }

error :
 8003716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	; 0x28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x26>
 8003754:	2302      	movs	r3, #2
 8003756:	e1fb      	b.n	8003b50 <HAL_SPI_TransmitReceive+0x41e>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003760:	f7fe f804 	bl	800176c <HAL_GetTick>
 8003764:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800376c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800377c:	7efb      	ldrb	r3, [r7, #27]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00e      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x6e>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d106      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x66>
 8003792:	7efb      	ldrb	r3, [r7, #27]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d003      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003798:	2302      	movs	r3, #2
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800379e:	e1cd      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x80>
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037b8:	e1c0      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2205      	movs	r2, #5
 80037ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003810:	d802      	bhi.n	8003818 <HAL_SPI_TransmitReceive+0xe6>
 8003812:	8a3b      	ldrh	r3, [r7, #16]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d908      	bls.n	800382a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	e007      	b.n	800383a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d007      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003860:	d97c      	bls.n	800395c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_TransmitReceive+0x13e>
 800386a:	8a7b      	ldrh	r3, [r7, #18]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d169      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003894:	e056      	b.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11b      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x1aa>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x1aa>
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d113      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11c      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x1f2>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	b292      	uxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003924:	f7fd ff22 	bl	800176c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	429a      	cmp	r2, r3
 8003932:	d807      	bhi.n	8003944 <HAL_SPI_TransmitReceive+0x212>
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d003      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003942:	e0fb      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1a3      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x164>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d19d      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x164>
 800395a:	e0df      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_SPI_TransmitReceive+0x23a>
 8003964:	8a7b      	ldrh	r3, [r7, #18]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 80cb 	bne.w	8003b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d912      	bls.n	800399c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b02      	subs	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800399a:	e0b2      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c2:	e09e      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d134      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02f      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d12c      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d912      	bls.n	8003a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a10:	e012      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d148      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d042      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d923      	bls.n	8003aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b02      	subs	r3, #2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d81f      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e016      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f103 020c 	add.w	r2, r3, #12
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003adc:	f7fd fe46 	bl	800176c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d803      	bhi.n	8003af4 <HAL_SPI_TransmitReceive+0x3c2>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d102      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x3c8>
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b00:	e01c      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f af5b 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f af54 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f987 	bl	8003e34 <SPI_EndRxTxTransaction>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60
 8003b38:	e000      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b68:	f7fd fe00 	bl	800176c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b78:	f7fd fdf8 	bl	800176c <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	015b      	lsls	r3, r3, #5
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	e054      	b.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d050      	beq.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b98:	f7fd fde8 	bl	800176c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d902      	bls.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13d      	bne.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc6:	d111      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd0:	d004      	beq.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d107      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d10f      	bne.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e017      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d19b      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c76:	f7fd fd79 	bl	800176c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c86:	f7fd fd71 	bl	800176c <HAL_GetTick>
 8003c8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	0d1b      	lsrs	r3, r3, #20
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ca4:	e05f      	b.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cac:	d106      	bne.n	8003cbc <SPI_WaitFifoStateUntilTimeout+0x54>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d050      	beq.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cc4:	f7fd fd52 	bl	800176c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d902      	bls.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x72>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13d      	bne.n	8003d56 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf2:	d111      	bne.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	d004      	beq.n	8003d08 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d107      	bne.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d10f      	bne.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e010      	b.n	8003d78 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d197      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000000 	.word	0x20000000

08003d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d98:	d111      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d004      	beq.n	8003dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d107      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff fec5 	bl	8003b58 <SPI_WaitFlagStateUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e023      	b.n	8003e2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dec:	d11d      	bne.n	8003e2a <SPI_EndRxTransaction+0xa6>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df6:	d004      	beq.n	8003e02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d113      	bne.n	8003e2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff2a 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ff0b 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e027      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fe70 	bl	8003b58 <SPI_WaitFlagStateUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e014      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff fee4 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e000      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e040      	b.n	8003f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fad0 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8c0 	bl	8004084 <UART_SetConfig>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e022      	b.n	8003f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fb12 	bl	8004540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fb99 	bl	8004684 <UART_CheckIdleState>
 8003f52:	4603      	mov	r3, r0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	f040 8081 	bne.w	8004078 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_Transmit+0x26>
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e079      	b.n	800407a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Transmit+0x38>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e072      	b.n	800407a <HAL_UART_Transmit+0x11e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2221      	movs	r2, #33	; 0x21
 8003fa6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fd fbe0 	bl	800176c <HAL_GetTick>
 8003fac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	d108      	bne.n	8003fda <HAL_UART_Transmit+0x7e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e003      	b.n	8003fe2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003fea:	e02d      	b.n	8004048 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fb89 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e039      	b.n	800407a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004018:	b292      	uxth	r2, r2
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	3302      	adds	r3, #2
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e008      	b.n	8004036 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b292      	uxth	r2, r2
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1cb      	bne.n	8003fec <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb55 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e005      	b.n	800407a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4ba4      	ldr	r3, [pc, #656]	; (8004344 <UART_SetConfig+0x2c0>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	69f9      	ldr	r1, [r7, #28]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a9a      	ldr	r2, [pc, #616]	; (8004348 <UART_SetConfig+0x2c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a91      	ldr	r2, [pc, #580]	; (800434c <UART_SetConfig+0x2c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d121      	bne.n	8004150 <UART_SetConfig+0xcc>
 800410c:	4b90      	ldr	r3, [pc, #576]	; (8004350 <UART_SetConfig+0x2cc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d816      	bhi.n	8004148 <UART_SetConfig+0xc4>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x9c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	0800413d 	.word	0x0800413d
 8004128:	08004137 	.word	0x08004137
 800412c:	08004143 	.word	0x08004143
 8004130:	2301      	movs	r3, #1
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e0be      	b.n	80042b4 <UART_SetConfig+0x230>
 8004136:	2302      	movs	r3, #2
 8004138:	76fb      	strb	r3, [r7, #27]
 800413a:	e0bb      	b.n	80042b4 <UART_SetConfig+0x230>
 800413c:	2304      	movs	r3, #4
 800413e:	76fb      	strb	r3, [r7, #27]
 8004140:	e0b8      	b.n	80042b4 <UART_SetConfig+0x230>
 8004142:	2308      	movs	r3, #8
 8004144:	76fb      	strb	r3, [r7, #27]
 8004146:	e0b5      	b.n	80042b4 <UART_SetConfig+0x230>
 8004148:	2310      	movs	r3, #16
 800414a:	76fb      	strb	r3, [r7, #27]
 800414c:	bf00      	nop
 800414e:	e0b1      	b.n	80042b4 <UART_SetConfig+0x230>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a7f      	ldr	r2, [pc, #508]	; (8004354 <UART_SetConfig+0x2d0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d134      	bne.n	80041c4 <UART_SetConfig+0x140>
 800415a:	4b7d      	ldr	r3, [pc, #500]	; (8004350 <UART_SetConfig+0x2cc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d829      	bhi.n	80041bc <UART_SetConfig+0x138>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0xec>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041b1 	.word	0x080041b1
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041ab 	.word	0x080041ab
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041bd 	.word	0x080041bd
 80041a0:	080041b7 	.word	0x080041b7
 80041a4:	2300      	movs	r3, #0
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	e084      	b.n	80042b4 <UART_SetConfig+0x230>
 80041aa:	2302      	movs	r3, #2
 80041ac:	76fb      	strb	r3, [r7, #27]
 80041ae:	e081      	b.n	80042b4 <UART_SetConfig+0x230>
 80041b0:	2304      	movs	r3, #4
 80041b2:	76fb      	strb	r3, [r7, #27]
 80041b4:	e07e      	b.n	80042b4 <UART_SetConfig+0x230>
 80041b6:	2308      	movs	r3, #8
 80041b8:	76fb      	strb	r3, [r7, #27]
 80041ba:	e07b      	b.n	80042b4 <UART_SetConfig+0x230>
 80041bc:	2310      	movs	r3, #16
 80041be:	76fb      	strb	r3, [r7, #27]
 80041c0:	bf00      	nop
 80041c2:	e077      	b.n	80042b4 <UART_SetConfig+0x230>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a63      	ldr	r2, [pc, #396]	; (8004358 <UART_SetConfig+0x2d4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d120      	bne.n	8004210 <UART_SetConfig+0x18c>
 80041ce:	4b60      	ldr	r3, [pc, #384]	; (8004350 <UART_SetConfig+0x2cc>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d00f      	beq.n	80041fc <UART_SetConfig+0x178>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d802      	bhi.n	80041e6 <UART_SetConfig+0x162>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <UART_SetConfig+0x16c>
 80041e4:	e010      	b.n	8004208 <UART_SetConfig+0x184>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d005      	beq.n	80041f6 <UART_SetConfig+0x172>
 80041ea:	2b30      	cmp	r3, #48	; 0x30
 80041ec:	d009      	beq.n	8004202 <UART_SetConfig+0x17e>
 80041ee:	e00b      	b.n	8004208 <UART_SetConfig+0x184>
 80041f0:	2300      	movs	r3, #0
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e05e      	b.n	80042b4 <UART_SetConfig+0x230>
 80041f6:	2302      	movs	r3, #2
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e05b      	b.n	80042b4 <UART_SetConfig+0x230>
 80041fc:	2304      	movs	r3, #4
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e058      	b.n	80042b4 <UART_SetConfig+0x230>
 8004202:	2308      	movs	r3, #8
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e055      	b.n	80042b4 <UART_SetConfig+0x230>
 8004208:	2310      	movs	r3, #16
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	bf00      	nop
 800420e:	e051      	b.n	80042b4 <UART_SetConfig+0x230>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a51      	ldr	r2, [pc, #324]	; (800435c <UART_SetConfig+0x2d8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d120      	bne.n	800425c <UART_SetConfig+0x1d8>
 800421a:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <UART_SetConfig+0x2cc>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d00f      	beq.n	8004248 <UART_SetConfig+0x1c4>
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d802      	bhi.n	8004232 <UART_SetConfig+0x1ae>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <UART_SetConfig+0x1b8>
 8004230:	e010      	b.n	8004254 <UART_SetConfig+0x1d0>
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d005      	beq.n	8004242 <UART_SetConfig+0x1be>
 8004236:	2bc0      	cmp	r3, #192	; 0xc0
 8004238:	d009      	beq.n	800424e <UART_SetConfig+0x1ca>
 800423a:	e00b      	b.n	8004254 <UART_SetConfig+0x1d0>
 800423c:	2300      	movs	r3, #0
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e038      	b.n	80042b4 <UART_SetConfig+0x230>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e035      	b.n	80042b4 <UART_SetConfig+0x230>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e032      	b.n	80042b4 <UART_SetConfig+0x230>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e02f      	b.n	80042b4 <UART_SetConfig+0x230>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	bf00      	nop
 800425a:	e02b      	b.n	80042b4 <UART_SetConfig+0x230>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a39      	ldr	r2, [pc, #228]	; (8004348 <UART_SetConfig+0x2c4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d124      	bne.n	80042b0 <UART_SetConfig+0x22c>
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <UART_SetConfig+0x2cc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d012      	beq.n	800429c <UART_SetConfig+0x218>
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d802      	bhi.n	8004282 <UART_SetConfig+0x1fe>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <UART_SetConfig+0x20c>
 8004280:	e012      	b.n	80042a8 <UART_SetConfig+0x224>
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d006      	beq.n	8004296 <UART_SetConfig+0x212>
 8004288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428c:	d009      	beq.n	80042a2 <UART_SetConfig+0x21e>
 800428e:	e00b      	b.n	80042a8 <UART_SetConfig+0x224>
 8004290:	2300      	movs	r3, #0
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e00e      	b.n	80042b4 <UART_SetConfig+0x230>
 8004296:	2302      	movs	r3, #2
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e00b      	b.n	80042b4 <UART_SetConfig+0x230>
 800429c:	2304      	movs	r3, #4
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	e008      	b.n	80042b4 <UART_SetConfig+0x230>
 80042a2:	2308      	movs	r3, #8
 80042a4:	76fb      	strb	r3, [r7, #27]
 80042a6:	e005      	b.n	80042b4 <UART_SetConfig+0x230>
 80042a8:	2310      	movs	r3, #16
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	bf00      	nop
 80042ae:	e001      	b.n	80042b4 <UART_SetConfig+0x230>
 80042b0:	2310      	movs	r3, #16
 80042b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a23      	ldr	r2, [pc, #140]	; (8004348 <UART_SetConfig+0x2c4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f040 8085 	bne.w	80043ca <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c0:	7efb      	ldrb	r3, [r7, #27]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d823      	bhi.n	800430e <UART_SetConfig+0x28a>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x248>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	080042ff 	.word	0x080042ff
 80042e0:	0800430f 	.word	0x0800430f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800430f 	.word	0x0800430f
 80042ec:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe faf8 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 80042f4:	6178      	str	r0, [r7, #20]
        break;
 80042f6:	e00f      	b.n	8004318 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <UART_SetConfig+0x2dc>)
 80042fa:	617b      	str	r3, [r7, #20]
        break;
 80042fc:	e00c      	b.n	8004318 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fe:	f7fe fa5b 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8004302:	6178      	str	r0, [r7, #20]
        break;
 8004304:	e008      	b.n	8004318 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	617b      	str	r3, [r7, #20]
        break;
 800430c:	e004      	b.n	8004318 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	76bb      	strb	r3, [r7, #26]
        break;
 8004316:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8102 	beq.w	8004524 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d305      	bcc.n	800433c <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	429a      	cmp	r2, r3
 800433a:	d913      	bls.n	8004364 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	76bb      	strb	r3, [r7, #26]
 8004340:	e0f0      	b.n	8004524 <UART_SetConfig+0x4a0>
 8004342:	bf00      	nop
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40008000 	.word	0x40008000
 800434c:	40013800 	.word	0x40013800
 8004350:	40021000 	.word	0x40021000
 8004354:	40004400 	.word	0x40004400
 8004358:	40004800 	.word	0x40004800
 800435c:	40004c00 	.word	0x40004c00
 8004360:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	0214      	lsls	r4, r2, #8
 8004376:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800437a:	020b      	lsls	r3, r1, #8
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6852      	ldr	r2, [r2, #4]
 8004380:	0852      	lsrs	r2, r2, #1
 8004382:	4611      	mov	r1, r2
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	eb13 0b01 	adds.w	fp, r3, r1
 800438c:	eb44 0c02 	adc.w	ip, r4, r2
 8004390:	4658      	mov	r0, fp
 8004392:	4661      	mov	r1, ip
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	f7fc fc02 	bl	8000ba8 <__aeabi_uldivmod>
 80043a4:	4603      	mov	r3, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b0:	d308      	bcc.n	80043c4 <UART_SetConfig+0x340>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b8:	d204      	bcs.n	80043c4 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e0af      	b.n	8004524 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	76bb      	strb	r3, [r7, #26]
 80043c8:	e0ac      	b.n	8004524 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d2:	d15b      	bne.n	800448c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80043d4:	7efb      	ldrb	r3, [r7, #27]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d827      	bhi.n	800442a <UART_SetConfig+0x3a6>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x35c>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fa6e 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004408:	6178      	str	r0, [r7, #20]
        break;
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7fe fa80 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8004410:	6178      	str	r0, [r7, #20]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b49      	ldr	r3, [pc, #292]	; (800453c <UART_SetConfig+0x4b8>)
 8004416:	617b      	str	r3, [r7, #20]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe f9cd 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 800441e:	6178      	str	r0, [r7, #20]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	617b      	str	r3, [r7, #20]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	76bb      	strb	r3, [r7, #26]
        break;
 8004432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d074      	beq.n	8004524 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	005a      	lsls	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d916      	bls.n	8004486 <UART_SetConfig+0x402>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d212      	bcs.n	8004486 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f023 030f 	bic.w	r3, r3, #15
 8004468:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	b29a      	uxth	r2, r3
 8004476:	89fb      	ldrh	r3, [r7, #14]
 8004478:	4313      	orrs	r3, r2
 800447a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	89fa      	ldrh	r2, [r7, #14]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e04e      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	76bb      	strb	r3, [r7, #26]
 800448a:	e04b      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448c:	7efb      	ldrb	r3, [r7, #27]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d827      	bhi.n	80044e2 <UART_SetConfig+0x45e>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x414>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe fa12 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 80044c0:	6178      	str	r0, [r7, #20]
        break;
 80044c2:	e013      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe fa24 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80044c8:	6178      	str	r0, [r7, #20]
        break;
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <UART_SetConfig+0x4b8>)
 80044ce:	617b      	str	r3, [r7, #20]
        break;
 80044d0:	e00c      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe f971 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 80044d6:	6178      	str	r0, [r7, #20]
        break;
 80044d8:	e008      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	617b      	str	r3, [r7, #20]
        break;
 80044e0:	e004      	b.n	80044ec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	76bb      	strb	r3, [r7, #26]
        break;
 80044ea:	bf00      	nop
    }

    if (pclk != 0U)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085a      	lsrs	r2, r3, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d908      	bls.n	8004520 <UART_SetConfig+0x49c>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d204      	bcs.n	8004520 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e001      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004530:	7ebb      	ldrb	r3, [r7, #26]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800453c:	00f42400 	.word	0x00f42400

08004540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01a      	beq.n	8004656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d10a      	bne.n	8004656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004692:	f7fd f86b 	bl	800176c <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d10e      	bne.n	80046c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f82a 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e020      	b.n	8004706 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d10e      	bne.n	80046f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f814 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e00a      	b.n	8004706 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471e:	e05d      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d059      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004728:	f7fd f820 	bl	800176c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <UART_WaitOnFlagUntilTimeout+0x30>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11b      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800474c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e042      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02b      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004792:	d123      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d092      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <__errno>:
 8004804:	4b01      	ldr	r3, [pc, #4]	; (800480c <__errno+0x8>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000000c 	.word	0x2000000c

08004810 <__libc_init_array>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4e0d      	ldr	r6, [pc, #52]	; (8004848 <__libc_init_array+0x38>)
 8004814:	4c0d      	ldr	r4, [pc, #52]	; (800484c <__libc_init_array+0x3c>)
 8004816:	1ba4      	subs	r4, r4, r6
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	2500      	movs	r5, #0
 800481c:	42a5      	cmp	r5, r4
 800481e:	d109      	bne.n	8004834 <__libc_init_array+0x24>
 8004820:	4e0b      	ldr	r6, [pc, #44]	; (8004850 <__libc_init_array+0x40>)
 8004822:	4c0c      	ldr	r4, [pc, #48]	; (8004854 <__libc_init_array+0x44>)
 8004824:	f000 ff7e 	bl	8005724 <_init>
 8004828:	1ba4      	subs	r4, r4, r6
 800482a:	10a4      	asrs	r4, r4, #2
 800482c:	2500      	movs	r5, #0
 800482e:	42a5      	cmp	r5, r4
 8004830:	d105      	bne.n	800483e <__libc_init_array+0x2e>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004838:	4798      	blx	r3
 800483a:	3501      	adds	r5, #1
 800483c:	e7ee      	b.n	800481c <__libc_init_array+0xc>
 800483e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004842:	4798      	blx	r3
 8004844:	3501      	adds	r5, #1
 8004846:	e7f2      	b.n	800482e <__libc_init_array+0x1e>
 8004848:	080057d8 	.word	0x080057d8
 800484c:	080057d8 	.word	0x080057d8
 8004850:	080057d8 	.word	0x080057d8
 8004854:	080057dc 	.word	0x080057dc

08004858 <malloc>:
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <malloc+0xc>)
 800485a:	4601      	mov	r1, r0
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f000 b861 	b.w	8004924 <_malloc_r>
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c

08004868 <free>:
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <free+0xc>)
 800486a:	4601      	mov	r1, r0
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f000 b80b 	b.w	8004888 <_free_r>
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_free_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4605      	mov	r5, r0
 800488c:	2900      	cmp	r1, #0
 800488e:	d045      	beq.n	800491c <_free_r+0x94>
 8004890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004894:	1f0c      	subs	r4, r1, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfb8      	it	lt
 800489a:	18e4      	addlt	r4, r4, r3
 800489c:	f000 f8cc 	bl	8004a38 <__malloc_lock>
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <_free_r+0x98>)
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	4610      	mov	r0, r2
 80048a6:	b933      	cbnz	r3, 80048b6 <_free_r+0x2e>
 80048a8:	6063      	str	r3, [r4, #4]
 80048aa:	6014      	str	r4, [r2, #0]
 80048ac:	4628      	mov	r0, r5
 80048ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b2:	f000 b8c2 	b.w	8004a3a <__malloc_unlock>
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	d90c      	bls.n	80048d4 <_free_r+0x4c>
 80048ba:	6821      	ldr	r1, [r4, #0]
 80048bc:	1862      	adds	r2, r4, r1
 80048be:	4293      	cmp	r3, r2
 80048c0:	bf04      	itt	eq
 80048c2:	681a      	ldreq	r2, [r3, #0]
 80048c4:	685b      	ldreq	r3, [r3, #4]
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	bf04      	itt	eq
 80048ca:	1852      	addeq	r2, r2, r1
 80048cc:	6022      	streq	r2, [r4, #0]
 80048ce:	6004      	str	r4, [r0, #0]
 80048d0:	e7ec      	b.n	80048ac <_free_r+0x24>
 80048d2:	4613      	mov	r3, r2
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	b10a      	cbz	r2, 80048dc <_free_r+0x54>
 80048d8:	42a2      	cmp	r2, r4
 80048da:	d9fa      	bls.n	80048d2 <_free_r+0x4a>
 80048dc:	6819      	ldr	r1, [r3, #0]
 80048de:	1858      	adds	r0, r3, r1
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d10b      	bne.n	80048fc <_free_r+0x74>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	4401      	add	r1, r0
 80048e8:	1858      	adds	r0, r3, r1
 80048ea:	4282      	cmp	r2, r0
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	d1dd      	bne.n	80048ac <_free_r+0x24>
 80048f0:	6810      	ldr	r0, [r2, #0]
 80048f2:	6852      	ldr	r2, [r2, #4]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	4401      	add	r1, r0
 80048f8:	6019      	str	r1, [r3, #0]
 80048fa:	e7d7      	b.n	80048ac <_free_r+0x24>
 80048fc:	d902      	bls.n	8004904 <_free_r+0x7c>
 80048fe:	230c      	movs	r3, #12
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	e7d3      	b.n	80048ac <_free_r+0x24>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	1821      	adds	r1, r4, r0
 8004908:	428a      	cmp	r2, r1
 800490a:	bf04      	itt	eq
 800490c:	6811      	ldreq	r1, [r2, #0]
 800490e:	6852      	ldreq	r2, [r2, #4]
 8004910:	6062      	str	r2, [r4, #4]
 8004912:	bf04      	itt	eq
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	605c      	str	r4, [r3, #4]
 800491a:	e7c7      	b.n	80048ac <_free_r+0x24>
 800491c:	bd38      	pop	{r3, r4, r5, pc}
 800491e:	bf00      	nop
 8004920:	20000094 	.word	0x20000094

08004924 <_malloc_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	1ccd      	adds	r5, r1, #3
 8004928:	f025 0503 	bic.w	r5, r5, #3
 800492c:	3508      	adds	r5, #8
 800492e:	2d0c      	cmp	r5, #12
 8004930:	bf38      	it	cc
 8004932:	250c      	movcc	r5, #12
 8004934:	2d00      	cmp	r5, #0
 8004936:	4606      	mov	r6, r0
 8004938:	db01      	blt.n	800493e <_malloc_r+0x1a>
 800493a:	42a9      	cmp	r1, r5
 800493c:	d903      	bls.n	8004946 <_malloc_r+0x22>
 800493e:	230c      	movs	r3, #12
 8004940:	6033      	str	r3, [r6, #0]
 8004942:	2000      	movs	r0, #0
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	f000 f877 	bl	8004a38 <__malloc_lock>
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <_malloc_r+0xac>)
 800494c:	6814      	ldr	r4, [r2, #0]
 800494e:	4621      	mov	r1, r4
 8004950:	b991      	cbnz	r1, 8004978 <_malloc_r+0x54>
 8004952:	4c20      	ldr	r4, [pc, #128]	; (80049d4 <_malloc_r+0xb0>)
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	b91b      	cbnz	r3, 8004960 <_malloc_r+0x3c>
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f83d 	bl	80049d8 <_sbrk_r>
 800495e:	6020      	str	r0, [r4, #0]
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f000 f838 	bl	80049d8 <_sbrk_r>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d124      	bne.n	80049b6 <_malloc_r+0x92>
 800496c:	230c      	movs	r3, #12
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f862 	bl	8004a3a <__malloc_unlock>
 8004976:	e7e4      	b.n	8004942 <_malloc_r+0x1e>
 8004978:	680b      	ldr	r3, [r1, #0]
 800497a:	1b5b      	subs	r3, r3, r5
 800497c:	d418      	bmi.n	80049b0 <_malloc_r+0x8c>
 800497e:	2b0b      	cmp	r3, #11
 8004980:	d90f      	bls.n	80049a2 <_malloc_r+0x7e>
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	50cd      	str	r5, [r1, r3]
 8004986:	18cc      	adds	r4, r1, r3
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f856 	bl	8004a3a <__malloc_unlock>
 800498e:	f104 000b 	add.w	r0, r4, #11
 8004992:	1d23      	adds	r3, r4, #4
 8004994:	f020 0007 	bic.w	r0, r0, #7
 8004998:	1ac3      	subs	r3, r0, r3
 800499a:	d0d3      	beq.n	8004944 <_malloc_r+0x20>
 800499c:	425a      	negs	r2, r3
 800499e:	50e2      	str	r2, [r4, r3]
 80049a0:	e7d0      	b.n	8004944 <_malloc_r+0x20>
 80049a2:	428c      	cmp	r4, r1
 80049a4:	684b      	ldr	r3, [r1, #4]
 80049a6:	bf16      	itet	ne
 80049a8:	6063      	strne	r3, [r4, #4]
 80049aa:	6013      	streq	r3, [r2, #0]
 80049ac:	460c      	movne	r4, r1
 80049ae:	e7eb      	b.n	8004988 <_malloc_r+0x64>
 80049b0:	460c      	mov	r4, r1
 80049b2:	6849      	ldr	r1, [r1, #4]
 80049b4:	e7cc      	b.n	8004950 <_malloc_r+0x2c>
 80049b6:	1cc4      	adds	r4, r0, #3
 80049b8:	f024 0403 	bic.w	r4, r4, #3
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d005      	beq.n	80049cc <_malloc_r+0xa8>
 80049c0:	1a21      	subs	r1, r4, r0
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 f808 	bl	80049d8 <_sbrk_r>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d0cf      	beq.n	800496c <_malloc_r+0x48>
 80049cc:	6025      	str	r5, [r4, #0]
 80049ce:	e7db      	b.n	8004988 <_malloc_r+0x64>
 80049d0:	20000094 	.word	0x20000094
 80049d4:	20000098 	.word	0x20000098

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4c06      	ldr	r4, [pc, #24]	; (80049f4 <_sbrk_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4605      	mov	r5, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	f7fc fdbc 	bl	8001560 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000184 	.word	0x20000184

080049f8 <siprintf>:
 80049f8:	b40e      	push	{r1, r2, r3}
 80049fa:	b500      	push	{lr}
 80049fc:	b09c      	sub	sp, #112	; 0x70
 80049fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004a00:	9002      	str	r0, [sp, #8]
 8004a02:	9006      	str	r0, [sp, #24]
 8004a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a08:	4809      	ldr	r0, [pc, #36]	; (8004a30 <siprintf+0x38>)
 8004a0a:	9107      	str	r1, [sp, #28]
 8004a0c:	9104      	str	r1, [sp, #16]
 8004a0e:	4909      	ldr	r1, [pc, #36]	; (8004a34 <siprintf+0x3c>)
 8004a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	a902      	add	r1, sp, #8
 8004a1c:	f000 f868 	bl	8004af0 <_svfiprintf_r>
 8004a20:	9b02      	ldr	r3, [sp, #8]
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	b01c      	add	sp, #112	; 0x70
 8004a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a2c:	b003      	add	sp, #12
 8004a2e:	4770      	bx	lr
 8004a30:	2000000c 	.word	0x2000000c
 8004a34:	ffff0208 	.word	0xffff0208

08004a38 <__malloc_lock>:
 8004a38:	4770      	bx	lr

08004a3a <__malloc_unlock>:
 8004a3a:	4770      	bx	lr

08004a3c <__ssputs_r>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	688e      	ldr	r6, [r1, #8]
 8004a42:	429e      	cmp	r6, r3
 8004a44:	4682      	mov	sl, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4690      	mov	r8, r2
 8004a4a:	4699      	mov	r9, r3
 8004a4c:	d837      	bhi.n	8004abe <__ssputs_r+0x82>
 8004a4e:	898a      	ldrh	r2, [r1, #12]
 8004a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a54:	d031      	beq.n	8004aba <__ssputs_r+0x7e>
 8004a56:	6825      	ldr	r5, [r4, #0]
 8004a58:	6909      	ldr	r1, [r1, #16]
 8004a5a:	1a6f      	subs	r7, r5, r1
 8004a5c:	6965      	ldr	r5, [r4, #20]
 8004a5e:	2302      	movs	r3, #2
 8004a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a64:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a68:	f109 0301 	add.w	r3, r9, #1
 8004a6c:	443b      	add	r3, r7
 8004a6e:	429d      	cmp	r5, r3
 8004a70:	bf38      	it	cc
 8004a72:	461d      	movcc	r5, r3
 8004a74:	0553      	lsls	r3, r2, #21
 8004a76:	d530      	bpl.n	8004ada <__ssputs_r+0x9e>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7ff ff53 	bl	8004924 <_malloc_r>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	b950      	cbnz	r0, 8004a98 <__ssputs_r+0x5c>
 8004a82:	230c      	movs	r3, #12
 8004a84:	f8ca 3000 	str.w	r3, [sl]
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a98:	463a      	mov	r2, r7
 8004a9a:	6921      	ldr	r1, [r4, #16]
 8004a9c:	f000 faa8 	bl	8004ff0 <memcpy>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	6126      	str	r6, [r4, #16]
 8004aae:	6165      	str	r5, [r4, #20]
 8004ab0:	443e      	add	r6, r7
 8004ab2:	1bed      	subs	r5, r5, r7
 8004ab4:	6026      	str	r6, [r4, #0]
 8004ab6:	60a5      	str	r5, [r4, #8]
 8004ab8:	464e      	mov	r6, r9
 8004aba:	454e      	cmp	r6, r9
 8004abc:	d900      	bls.n	8004ac0 <__ssputs_r+0x84>
 8004abe:	464e      	mov	r6, r9
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	f000 fa9e 	bl	8005006 <memmove>
 8004aca:	68a3      	ldr	r3, [r4, #8]
 8004acc:	1b9b      	subs	r3, r3, r6
 8004ace:	60a3      	str	r3, [r4, #8]
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	441e      	add	r6, r3
 8004ad4:	6026      	str	r6, [r4, #0]
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e7dc      	b.n	8004a94 <__ssputs_r+0x58>
 8004ada:	462a      	mov	r2, r5
 8004adc:	f000 faac 	bl	8005038 <_realloc_r>
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d1e2      	bne.n	8004aac <__ssputs_r+0x70>
 8004ae6:	6921      	ldr	r1, [r4, #16]
 8004ae8:	4650      	mov	r0, sl
 8004aea:	f7ff fecd 	bl	8004888 <_free_r>
 8004aee:	e7c8      	b.n	8004a82 <__ssputs_r+0x46>

08004af0 <_svfiprintf_r>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	461d      	mov	r5, r3
 8004af6:	898b      	ldrh	r3, [r1, #12]
 8004af8:	061f      	lsls	r7, r3, #24
 8004afa:	b09d      	sub	sp, #116	; 0x74
 8004afc:	4680      	mov	r8, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	4616      	mov	r6, r2
 8004b02:	d50f      	bpl.n	8004b24 <_svfiprintf_r+0x34>
 8004b04:	690b      	ldr	r3, [r1, #16]
 8004b06:	b96b      	cbnz	r3, 8004b24 <_svfiprintf_r+0x34>
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	f7ff ff0b 	bl	8004924 <_malloc_r>
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	6120      	str	r0, [r4, #16]
 8004b12:	b928      	cbnz	r0, 8004b20 <_svfiprintf_r+0x30>
 8004b14:	230c      	movs	r3, #12
 8004b16:	f8c8 3000 	str.w	r3, [r8]
 8004b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1e:	e0c8      	b.n	8004cb2 <_svfiprintf_r+0x1c2>
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	6163      	str	r3, [r4, #20]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9309      	str	r3, [sp, #36]	; 0x24
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b2e:	2330      	movs	r3, #48	; 0x30
 8004b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b34:	9503      	str	r5, [sp, #12]
 8004b36:	f04f 0b01 	mov.w	fp, #1
 8004b3a:	4637      	mov	r7, r6
 8004b3c:	463d      	mov	r5, r7
 8004b3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b42:	b10b      	cbz	r3, 8004b48 <_svfiprintf_r+0x58>
 8004b44:	2b25      	cmp	r3, #37	; 0x25
 8004b46:	d13e      	bne.n	8004bc6 <_svfiprintf_r+0xd6>
 8004b48:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b4c:	d00b      	beq.n	8004b66 <_svfiprintf_r+0x76>
 8004b4e:	4653      	mov	r3, sl
 8004b50:	4632      	mov	r2, r6
 8004b52:	4621      	mov	r1, r4
 8004b54:	4640      	mov	r0, r8
 8004b56:	f7ff ff71 	bl	8004a3c <__ssputs_r>
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f000 80a4 	beq.w	8004ca8 <_svfiprintf_r+0x1b8>
 8004b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b62:	4453      	add	r3, sl
 8004b64:	9309      	str	r3, [sp, #36]	; 0x24
 8004b66:	783b      	ldrb	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 809d 	beq.w	8004ca8 <_svfiprintf_r+0x1b8>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295
 8004b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	9307      	str	r3, [sp, #28]
 8004b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b80:	931a      	str	r3, [sp, #104]	; 0x68
 8004b82:	462f      	mov	r7, r5
 8004b84:	2205      	movs	r2, #5
 8004b86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b8a:	4850      	ldr	r0, [pc, #320]	; (8004ccc <_svfiprintf_r+0x1dc>)
 8004b8c:	f7fb fb28 	bl	80001e0 <memchr>
 8004b90:	9b04      	ldr	r3, [sp, #16]
 8004b92:	b9d0      	cbnz	r0, 8004bca <_svfiprintf_r+0xda>
 8004b94:	06d9      	lsls	r1, r3, #27
 8004b96:	bf44      	itt	mi
 8004b98:	2220      	movmi	r2, #32
 8004b9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b9e:	071a      	lsls	r2, r3, #28
 8004ba0:	bf44      	itt	mi
 8004ba2:	222b      	movmi	r2, #43	; 0x2b
 8004ba4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ba8:	782a      	ldrb	r2, [r5, #0]
 8004baa:	2a2a      	cmp	r2, #42	; 0x2a
 8004bac:	d015      	beq.n	8004bda <_svfiprintf_r+0xea>
 8004bae:	9a07      	ldr	r2, [sp, #28]
 8004bb0:	462f      	mov	r7, r5
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	250a      	movs	r5, #10
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bbc:	3b30      	subs	r3, #48	; 0x30
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d94d      	bls.n	8004c5e <_svfiprintf_r+0x16e>
 8004bc2:	b1b8      	cbz	r0, 8004bf4 <_svfiprintf_r+0x104>
 8004bc4:	e00f      	b.n	8004be6 <_svfiprintf_r+0xf6>
 8004bc6:	462f      	mov	r7, r5
 8004bc8:	e7b8      	b.n	8004b3c <_svfiprintf_r+0x4c>
 8004bca:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <_svfiprintf_r+0x1dc>)
 8004bcc:	1a80      	subs	r0, r0, r2
 8004bce:	fa0b f000 	lsl.w	r0, fp, r0
 8004bd2:	4318      	orrs	r0, r3
 8004bd4:	9004      	str	r0, [sp, #16]
 8004bd6:	463d      	mov	r5, r7
 8004bd8:	e7d3      	b.n	8004b82 <_svfiprintf_r+0x92>
 8004bda:	9a03      	ldr	r2, [sp, #12]
 8004bdc:	1d11      	adds	r1, r2, #4
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	9103      	str	r1, [sp, #12]
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	db01      	blt.n	8004bea <_svfiprintf_r+0xfa>
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e004      	b.n	8004bf4 <_svfiprintf_r+0x104>
 8004bea:	4252      	negs	r2, r2
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	9207      	str	r2, [sp, #28]
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	783b      	ldrb	r3, [r7, #0]
 8004bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf8:	d10c      	bne.n	8004c14 <_svfiprintf_r+0x124>
 8004bfa:	787b      	ldrb	r3, [r7, #1]
 8004bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bfe:	d133      	bne.n	8004c68 <_svfiprintf_r+0x178>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	9203      	str	r2, [sp, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfb8      	it	lt
 8004c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c10:	3702      	adds	r7, #2
 8004c12:	9305      	str	r3, [sp, #20]
 8004c14:	4d2e      	ldr	r5, [pc, #184]	; (8004cd0 <_svfiprintf_r+0x1e0>)
 8004c16:	7839      	ldrb	r1, [r7, #0]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7fb fae0 	bl	80001e0 <memchr>
 8004c20:	b138      	cbz	r0, 8004c32 <_svfiprintf_r+0x142>
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	1b40      	subs	r0, r0, r5
 8004c26:	fa03 f000 	lsl.w	r0, r3, r0
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	4303      	orrs	r3, r0
 8004c2e:	3701      	adds	r7, #1
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	7839      	ldrb	r1, [r7, #0]
 8004c34:	4827      	ldr	r0, [pc, #156]	; (8004cd4 <_svfiprintf_r+0x1e4>)
 8004c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c3a:	2206      	movs	r2, #6
 8004c3c:	1c7e      	adds	r6, r7, #1
 8004c3e:	f7fb facf 	bl	80001e0 <memchr>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d038      	beq.n	8004cb8 <_svfiprintf_r+0x1c8>
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <_svfiprintf_r+0x1e8>)
 8004c48:	bb13      	cbnz	r3, 8004c90 <_svfiprintf_r+0x1a0>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	3308      	adds	r3, #8
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c58:	444b      	add	r3, r9
 8004c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5c:	e76d      	b.n	8004b3a <_svfiprintf_r+0x4a>
 8004c5e:	fb05 3202 	mla	r2, r5, r2, r3
 8004c62:	2001      	movs	r0, #1
 8004c64:	460f      	mov	r7, r1
 8004c66:	e7a6      	b.n	8004bb6 <_svfiprintf_r+0xc6>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	3701      	adds	r7, #1
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	250a      	movs	r5, #10
 8004c72:	4638      	mov	r0, r7
 8004c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c78:	3a30      	subs	r2, #48	; 0x30
 8004c7a:	2a09      	cmp	r2, #9
 8004c7c:	d903      	bls.n	8004c86 <_svfiprintf_r+0x196>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0c8      	beq.n	8004c14 <_svfiprintf_r+0x124>
 8004c82:	9105      	str	r1, [sp, #20]
 8004c84:	e7c6      	b.n	8004c14 <_svfiprintf_r+0x124>
 8004c86:	fb05 2101 	mla	r1, r5, r1, r2
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	e7f0      	b.n	8004c72 <_svfiprintf_r+0x182>
 8004c90:	ab03      	add	r3, sp, #12
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4622      	mov	r2, r4
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <_svfiprintf_r+0x1ec>)
 8004c98:	a904      	add	r1, sp, #16
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f3af 8000 	nop.w
 8004ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ca4:	4681      	mov	r9, r0
 8004ca6:	d1d6      	bne.n	8004c56 <_svfiprintf_r+0x166>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	065b      	lsls	r3, r3, #25
 8004cac:	f53f af35 	bmi.w	8004b1a <_svfiprintf_r+0x2a>
 8004cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb2:	b01d      	add	sp, #116	; 0x74
 8004cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb8:	ab03      	add	r3, sp, #12
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <_svfiprintf_r+0x1ec>)
 8004cc0:	a904      	add	r1, sp, #16
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f000 f882 	bl	8004dcc <_printf_i>
 8004cc8:	e7ea      	b.n	8004ca0 <_svfiprintf_r+0x1b0>
 8004cca:	bf00      	nop
 8004ccc:	08005794 	.word	0x08005794
 8004cd0:	0800579a 	.word	0x0800579a
 8004cd4:	0800579e 	.word	0x0800579e
 8004cd8:	00000000 	.word	0x00000000
 8004cdc:	08004a3d 	.word	0x08004a3d

08004ce0 <_printf_common>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	4691      	mov	r9, r2
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	688a      	ldr	r2, [r1, #8]
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfb8      	it	lt
 8004cf4:	4613      	movlt	r3, r2
 8004cf6:	f8c9 3000 	str.w	r3, [r9]
 8004cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cfe:	4606      	mov	r6, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	b112      	cbz	r2, 8004d0a <_printf_common+0x2a>
 8004d04:	3301      	adds	r3, #1
 8004d06:	f8c9 3000 	str.w	r3, [r9]
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	0699      	lsls	r1, r3, #26
 8004d0e:	bf42      	ittt	mi
 8004d10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d14:	3302      	addmi	r3, #2
 8004d16:	f8c9 3000 	strmi.w	r3, [r9]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	f015 0506 	ands.w	r5, r5, #6
 8004d20:	d107      	bne.n	8004d32 <_printf_common+0x52>
 8004d22:	f104 0a19 	add.w	sl, r4, #25
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	f8d9 2000 	ldr.w	r2, [r9]
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	42ab      	cmp	r3, r5
 8004d30:	dc28      	bgt.n	8004d84 <_printf_common+0xa4>
 8004d32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	3300      	adds	r3, #0
 8004d3a:	bf18      	it	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	0692      	lsls	r2, r2, #26
 8004d40:	d42d      	bmi.n	8004d9e <_printf_common+0xbe>
 8004d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d46:	4639      	mov	r1, r7
 8004d48:	4630      	mov	r0, r6
 8004d4a:	47c0      	blx	r8
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d020      	beq.n	8004d92 <_printf_common+0xb2>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	68e5      	ldr	r5, [r4, #12]
 8004d54:	f8d9 2000 	ldr.w	r2, [r9]
 8004d58:	f003 0306 	and.w	r3, r3, #6
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	bf08      	it	eq
 8004d60:	1aad      	subeq	r5, r5, r2
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	6922      	ldr	r2, [r4, #16]
 8004d66:	bf0c      	ite	eq
 8004d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d6c:	2500      	movne	r5, #0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	bfc4      	itt	gt
 8004d72:	1a9b      	subgt	r3, r3, r2
 8004d74:	18ed      	addgt	r5, r5, r3
 8004d76:	f04f 0900 	mov.w	r9, #0
 8004d7a:	341a      	adds	r4, #26
 8004d7c:	454d      	cmp	r5, r9
 8004d7e:	d11a      	bne.n	8004db6 <_printf_common+0xd6>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e008      	b.n	8004d96 <_printf_common+0xb6>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4652      	mov	r2, sl
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d103      	bne.n	8004d9a <_printf_common+0xba>
 8004d92:	f04f 30ff 	mov.w	r0, #4294967295
 8004d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	e7c3      	b.n	8004d26 <_printf_common+0x46>
 8004d9e:	18e1      	adds	r1, r4, r3
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	2030      	movs	r0, #48	; 0x30
 8004da4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004da8:	4422      	add	r2, r4
 8004daa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db2:	3302      	adds	r3, #2
 8004db4:	e7c5      	b.n	8004d42 <_printf_common+0x62>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4622      	mov	r2, r4
 8004dba:	4639      	mov	r1, r7
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	47c0      	blx	r8
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0e6      	beq.n	8004d92 <_printf_common+0xb2>
 8004dc4:	f109 0901 	add.w	r9, r9, #1
 8004dc8:	e7d8      	b.n	8004d7c <_printf_common+0x9c>
	...

08004dcc <_printf_i>:
 8004dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	7e09      	ldrb	r1, [r1, #24]
 8004dd8:	b085      	sub	sp, #20
 8004dda:	296e      	cmp	r1, #110	; 0x6e
 8004ddc:	4617      	mov	r7, r2
 8004dde:	4606      	mov	r6, r0
 8004de0:	4698      	mov	r8, r3
 8004de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004de4:	f000 80b3 	beq.w	8004f4e <_printf_i+0x182>
 8004de8:	d822      	bhi.n	8004e30 <_printf_i+0x64>
 8004dea:	2963      	cmp	r1, #99	; 0x63
 8004dec:	d036      	beq.n	8004e5c <_printf_i+0x90>
 8004dee:	d80a      	bhi.n	8004e06 <_printf_i+0x3a>
 8004df0:	2900      	cmp	r1, #0
 8004df2:	f000 80b9 	beq.w	8004f68 <_printf_i+0x19c>
 8004df6:	2958      	cmp	r1, #88	; 0x58
 8004df8:	f000 8083 	beq.w	8004f02 <_printf_i+0x136>
 8004dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e04:	e032      	b.n	8004e6c <_printf_i+0xa0>
 8004e06:	2964      	cmp	r1, #100	; 0x64
 8004e08:	d001      	beq.n	8004e0e <_printf_i+0x42>
 8004e0a:	2969      	cmp	r1, #105	; 0x69
 8004e0c:	d1f6      	bne.n	8004dfc <_printf_i+0x30>
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	0605      	lsls	r5, r0, #24
 8004e14:	f103 0104 	add.w	r1, r3, #4
 8004e18:	d52a      	bpl.n	8004e70 <_printf_i+0xa4>
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da03      	bge.n	8004e2a <_printf_i+0x5e>
 8004e22:	222d      	movs	r2, #45	; 0x2d
 8004e24:	425b      	negs	r3, r3
 8004e26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e2a:	486f      	ldr	r0, [pc, #444]	; (8004fe8 <_printf_i+0x21c>)
 8004e2c:	220a      	movs	r2, #10
 8004e2e:	e039      	b.n	8004ea4 <_printf_i+0xd8>
 8004e30:	2973      	cmp	r1, #115	; 0x73
 8004e32:	f000 809d 	beq.w	8004f70 <_printf_i+0x1a4>
 8004e36:	d808      	bhi.n	8004e4a <_printf_i+0x7e>
 8004e38:	296f      	cmp	r1, #111	; 0x6f
 8004e3a:	d020      	beq.n	8004e7e <_printf_i+0xb2>
 8004e3c:	2970      	cmp	r1, #112	; 0x70
 8004e3e:	d1dd      	bne.n	8004dfc <_printf_i+0x30>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	f043 0320 	orr.w	r3, r3, #32
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	e003      	b.n	8004e52 <_printf_i+0x86>
 8004e4a:	2975      	cmp	r1, #117	; 0x75
 8004e4c:	d017      	beq.n	8004e7e <_printf_i+0xb2>
 8004e4e:	2978      	cmp	r1, #120	; 0x78
 8004e50:	d1d4      	bne.n	8004dfc <_printf_i+0x30>
 8004e52:	2378      	movs	r3, #120	; 0x78
 8004e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e58:	4864      	ldr	r0, [pc, #400]	; (8004fec <_printf_i+0x220>)
 8004e5a:	e055      	b.n	8004f08 <_printf_i+0x13c>
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	1d19      	adds	r1, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6011      	str	r1, [r2, #0]
 8004e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e08c      	b.n	8004f8a <_printf_i+0x1be>
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6011      	str	r1, [r2, #0]
 8004e74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e78:	bf18      	it	ne
 8004e7a:	b21b      	sxthne	r3, r3
 8004e7c:	e7cf      	b.n	8004e1e <_printf_i+0x52>
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	1d18      	adds	r0, r3, #4
 8004e84:	6010      	str	r0, [r2, #0]
 8004e86:	0628      	lsls	r0, r5, #24
 8004e88:	d501      	bpl.n	8004e8e <_printf_i+0xc2>
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	e002      	b.n	8004e94 <_printf_i+0xc8>
 8004e8e:	0668      	lsls	r0, r5, #25
 8004e90:	d5fb      	bpl.n	8004e8a <_printf_i+0xbe>
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	4854      	ldr	r0, [pc, #336]	; (8004fe8 <_printf_i+0x21c>)
 8004e96:	296f      	cmp	r1, #111	; 0x6f
 8004e98:	bf14      	ite	ne
 8004e9a:	220a      	movne	r2, #10
 8004e9c:	2208      	moveq	r2, #8
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea4:	6865      	ldr	r5, [r4, #4]
 8004ea6:	60a5      	str	r5, [r4, #8]
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	f2c0 8095 	blt.w	8004fd8 <_printf_i+0x20c>
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	f021 0104 	bic.w	r1, r1, #4
 8004eb4:	6021      	str	r1, [r4, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d13d      	bne.n	8004f36 <_printf_i+0x16a>
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	f040 808e 	bne.w	8004fdc <_printf_i+0x210>
 8004ec0:	4665      	mov	r5, ip
 8004ec2:	2a08      	cmp	r2, #8
 8004ec4:	d10b      	bne.n	8004ede <_printf_i+0x112>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	07db      	lsls	r3, r3, #31
 8004eca:	d508      	bpl.n	8004ede <_printf_i+0x112>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	6862      	ldr	r2, [r4, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	bfde      	ittt	le
 8004ed4:	2330      	movle	r3, #48	; 0x30
 8004ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ede:	ebac 0305 	sub.w	r3, ip, r5
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f8cd 8000 	str.w	r8, [sp]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	aa03      	add	r2, sp, #12
 8004eec:	4621      	mov	r1, r4
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f7ff fef6 	bl	8004ce0 <_printf_common>
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d14d      	bne.n	8004f94 <_printf_i+0x1c8>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	b005      	add	sp, #20
 8004efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f02:	4839      	ldr	r0, [pc, #228]	; (8004fe8 <_printf_i+0x21c>)
 8004f04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	6821      	ldr	r1, [r4, #0]
 8004f0c:	1d1d      	adds	r5, r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6015      	str	r5, [r2, #0]
 8004f12:	060a      	lsls	r2, r1, #24
 8004f14:	d50b      	bpl.n	8004f2e <_printf_i+0x162>
 8004f16:	07ca      	lsls	r2, r1, #31
 8004f18:	bf44      	itt	mi
 8004f1a:	f041 0120 	orrmi.w	r1, r1, #32
 8004f1e:	6021      	strmi	r1, [r4, #0]
 8004f20:	b91b      	cbnz	r3, 8004f2a <_printf_i+0x15e>
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	f022 0220 	bic.w	r2, r2, #32
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	2210      	movs	r2, #16
 8004f2c:	e7b7      	b.n	8004e9e <_printf_i+0xd2>
 8004f2e:	064d      	lsls	r5, r1, #25
 8004f30:	bf48      	it	mi
 8004f32:	b29b      	uxthmi	r3, r3
 8004f34:	e7ef      	b.n	8004f16 <_printf_i+0x14a>
 8004f36:	4665      	mov	r5, ip
 8004f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f3c:	fb02 3311 	mls	r3, r2, r1, r3
 8004f40:	5cc3      	ldrb	r3, [r0, r3]
 8004f42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f46:	460b      	mov	r3, r1
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	d1f5      	bne.n	8004f38 <_printf_i+0x16c>
 8004f4c:	e7b9      	b.n	8004ec2 <_printf_i+0xf6>
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	6961      	ldr	r1, [r4, #20]
 8004f54:	1d18      	adds	r0, r3, #4
 8004f56:	6010      	str	r0, [r2, #0]
 8004f58:	0628      	lsls	r0, r5, #24
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	d501      	bpl.n	8004f62 <_printf_i+0x196>
 8004f5e:	6019      	str	r1, [r3, #0]
 8004f60:	e002      	b.n	8004f68 <_printf_i+0x19c>
 8004f62:	066a      	lsls	r2, r5, #25
 8004f64:	d5fb      	bpl.n	8004f5e <_printf_i+0x192>
 8004f66:	8019      	strh	r1, [r3, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6123      	str	r3, [r4, #16]
 8004f6c:	4665      	mov	r5, ip
 8004f6e:	e7b9      	b.n	8004ee4 <_printf_i+0x118>
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	1d19      	adds	r1, r3, #4
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	681d      	ldr	r5, [r3, #0]
 8004f78:	6862      	ldr	r2, [r4, #4]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7fb f92f 	bl	80001e0 <memchr>
 8004f82:	b108      	cbz	r0, 8004f88 <_printf_i+0x1bc>
 8004f84:	1b40      	subs	r0, r0, r5
 8004f86:	6060      	str	r0, [r4, #4]
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f92:	e7a7      	b.n	8004ee4 <_printf_i+0x118>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	462a      	mov	r2, r5
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d0aa      	beq.n	8004ef8 <_printf_i+0x12c>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	079b      	lsls	r3, r3, #30
 8004fa6:	d413      	bmi.n	8004fd0 <_printf_i+0x204>
 8004fa8:	68e0      	ldr	r0, [r4, #12]
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	4298      	cmp	r0, r3
 8004fae:	bfb8      	it	lt
 8004fb0:	4618      	movlt	r0, r3
 8004fb2:	e7a3      	b.n	8004efc <_printf_i+0x130>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	464a      	mov	r2, r9
 8004fb8:	4639      	mov	r1, r7
 8004fba:	4630      	mov	r0, r6
 8004fbc:	47c0      	blx	r8
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d09a      	beq.n	8004ef8 <_printf_i+0x12c>
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	68e3      	ldr	r3, [r4, #12]
 8004fc6:	9a03      	ldr	r2, [sp, #12]
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	42ab      	cmp	r3, r5
 8004fcc:	dcf2      	bgt.n	8004fb4 <_printf_i+0x1e8>
 8004fce:	e7eb      	b.n	8004fa8 <_printf_i+0x1dc>
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	f104 0919 	add.w	r9, r4, #25
 8004fd6:	e7f5      	b.n	8004fc4 <_printf_i+0x1f8>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ac      	bne.n	8004f36 <_printf_i+0x16a>
 8004fdc:	7803      	ldrb	r3, [r0, #0]
 8004fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe6:	e76c      	b.n	8004ec2 <_printf_i+0xf6>
 8004fe8:	080057a5 	.word	0x080057a5
 8004fec:	080057b6 	.word	0x080057b6

08004ff0 <memcpy>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	1e43      	subs	r3, r0, #1
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d100      	bne.n	8004ffc <memcpy+0xc>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005004:	e7f7      	b.n	8004ff6 <memcpy+0x6>

08005006 <memmove>:
 8005006:	4288      	cmp	r0, r1
 8005008:	b510      	push	{r4, lr}
 800500a:	eb01 0302 	add.w	r3, r1, r2
 800500e:	d807      	bhi.n	8005020 <memmove+0x1a>
 8005010:	1e42      	subs	r2, r0, #1
 8005012:	4299      	cmp	r1, r3
 8005014:	d00a      	beq.n	800502c <memmove+0x26>
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800501e:	e7f8      	b.n	8005012 <memmove+0xc>
 8005020:	4283      	cmp	r3, r0
 8005022:	d9f5      	bls.n	8005010 <memmove+0xa>
 8005024:	1881      	adds	r1, r0, r2
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	42d3      	cmn	r3, r2
 800502a:	d100      	bne.n	800502e <memmove+0x28>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005032:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005036:	e7f7      	b.n	8005028 <memmove+0x22>

08005038 <_realloc_r>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	4607      	mov	r7, r0
 800503c:	4614      	mov	r4, r2
 800503e:	460e      	mov	r6, r1
 8005040:	b921      	cbnz	r1, 800504c <_realloc_r+0x14>
 8005042:	4611      	mov	r1, r2
 8005044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005048:	f7ff bc6c 	b.w	8004924 <_malloc_r>
 800504c:	b922      	cbnz	r2, 8005058 <_realloc_r+0x20>
 800504e:	f7ff fc1b 	bl	8004888 <_free_r>
 8005052:	4625      	mov	r5, r4
 8005054:	4628      	mov	r0, r5
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005058:	f000 f814 	bl	8005084 <_malloc_usable_size_r>
 800505c:	42a0      	cmp	r0, r4
 800505e:	d20f      	bcs.n	8005080 <_realloc_r+0x48>
 8005060:	4621      	mov	r1, r4
 8005062:	4638      	mov	r0, r7
 8005064:	f7ff fc5e 	bl	8004924 <_malloc_r>
 8005068:	4605      	mov	r5, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d0f2      	beq.n	8005054 <_realloc_r+0x1c>
 800506e:	4631      	mov	r1, r6
 8005070:	4622      	mov	r2, r4
 8005072:	f7ff ffbd 	bl	8004ff0 <memcpy>
 8005076:	4631      	mov	r1, r6
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff fc05 	bl	8004888 <_free_r>
 800507e:	e7e9      	b.n	8005054 <_realloc_r+0x1c>
 8005080:	4635      	mov	r5, r6
 8005082:	e7e7      	b.n	8005054 <_realloc_r+0x1c>

08005084 <_malloc_usable_size_r>:
 8005084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005088:	1f18      	subs	r0, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbc      	itt	lt
 800508e:	580b      	ldrlt	r3, [r1, r0]
 8005090:	18c0      	addlt	r0, r0, r3
 8005092:	4770      	bx	lr
 8005094:	0000      	movs	r0, r0
	...

08005098 <ceil>:
 8005098:	ec51 0b10 	vmov	r0, r1, d0
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80050a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80050a8:	2e13      	cmp	r6, #19
 80050aa:	460c      	mov	r4, r1
 80050ac:	ee10 5a10 	vmov	r5, s0
 80050b0:	4680      	mov	r8, r0
 80050b2:	dc30      	bgt.n	8005116 <ceil+0x7e>
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	da12      	bge.n	80050de <ceil+0x46>
 80050b8:	a333      	add	r3, pc, #204	; (adr r3, 8005188 <ceil+0xf0>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb f8e5 	bl	800028c <__adddf3>
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f7fb fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80050ca:	b128      	cbz	r0, 80050d8 <ceil+0x40>
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	db55      	blt.n	800517c <ceil+0xe4>
 80050d0:	432c      	orrs	r4, r5
 80050d2:	d057      	beq.n	8005184 <ceil+0xec>
 80050d4:	4c2e      	ldr	r4, [pc, #184]	; (8005190 <ceil+0xf8>)
 80050d6:	2500      	movs	r5, #0
 80050d8:	4621      	mov	r1, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	e025      	b.n	800512a <ceil+0x92>
 80050de:	4f2d      	ldr	r7, [pc, #180]	; (8005194 <ceil+0xfc>)
 80050e0:	4137      	asrs	r7, r6
 80050e2:	ea01 0307 	and.w	r3, r1, r7
 80050e6:	4303      	orrs	r3, r0
 80050e8:	d01f      	beq.n	800512a <ceil+0x92>
 80050ea:	a327      	add	r3, pc, #156	; (adr r3, 8005188 <ceil+0xf0>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb f8cc 	bl	800028c <__adddf3>
 80050f4:	2200      	movs	r2, #0
 80050f6:	2300      	movs	r3, #0
 80050f8:	f7fb fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d0eb      	beq.n	80050d8 <ceil+0x40>
 8005100:	2c00      	cmp	r4, #0
 8005102:	bfc2      	ittt	gt
 8005104:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005108:	fa43 f606 	asrgt.w	r6, r3, r6
 800510c:	19a4      	addgt	r4, r4, r6
 800510e:	ea24 0407 	bic.w	r4, r4, r7
 8005112:	2500      	movs	r5, #0
 8005114:	e7e0      	b.n	80050d8 <ceil+0x40>
 8005116:	2e33      	cmp	r6, #51	; 0x33
 8005118:	dd0b      	ble.n	8005132 <ceil+0x9a>
 800511a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800511e:	d104      	bne.n	800512a <ceil+0x92>
 8005120:	ee10 2a10 	vmov	r2, s0
 8005124:	460b      	mov	r3, r1
 8005126:	f7fb f8b1 	bl	800028c <__adddf3>
 800512a:	ec41 0b10 	vmov	d0, r0, r1
 800512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005132:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	fa23 f707 	lsr.w	r7, r3, r7
 800513e:	4207      	tst	r7, r0
 8005140:	d0f3      	beq.n	800512a <ceil+0x92>
 8005142:	a311      	add	r3, pc, #68	; (adr r3, 8005188 <ceil+0xf0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f8a0 	bl	800028c <__adddf3>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8005154:	2800      	cmp	r0, #0
 8005156:	d0bf      	beq.n	80050d8 <ceil+0x40>
 8005158:	2c00      	cmp	r4, #0
 800515a:	dd02      	ble.n	8005162 <ceil+0xca>
 800515c:	2e14      	cmp	r6, #20
 800515e:	d103      	bne.n	8005168 <ceil+0xd0>
 8005160:	3401      	adds	r4, #1
 8005162:	ea25 0507 	bic.w	r5, r5, r7
 8005166:	e7b7      	b.n	80050d8 <ceil+0x40>
 8005168:	2301      	movs	r3, #1
 800516a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800516e:	fa03 f606 	lsl.w	r6, r3, r6
 8005172:	4435      	add	r5, r6
 8005174:	4545      	cmp	r5, r8
 8005176:	bf38      	it	cc
 8005178:	18e4      	addcc	r4, r4, r3
 800517a:	e7f2      	b.n	8005162 <ceil+0xca>
 800517c:	2500      	movs	r5, #0
 800517e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005182:	e7a9      	b.n	80050d8 <ceil+0x40>
 8005184:	4625      	mov	r5, r4
 8005186:	e7a7      	b.n	80050d8 <ceil+0x40>
 8005188:	8800759c 	.word	0x8800759c
 800518c:	7e37e43c 	.word	0x7e37e43c
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	000fffff 	.word	0x000fffff

08005198 <log10>:
 8005198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519a:	ed2d 8b02 	vpush	{d8}
 800519e:	b08b      	sub	sp, #44	; 0x2c
 80051a0:	ec55 4b10 	vmov	r4, r5, d0
 80051a4:	f000 f878 	bl	8005298 <__ieee754_log10>
 80051a8:	4b36      	ldr	r3, [pc, #216]	; (8005284 <log10+0xec>)
 80051aa:	eeb0 8a40 	vmov.f32	s16, s0
 80051ae:	eef0 8a60 	vmov.f32	s17, s1
 80051b2:	f993 6000 	ldrsb.w	r6, [r3]
 80051b6:	1c73      	adds	r3, r6, #1
 80051b8:	d05c      	beq.n	8005274 <log10+0xdc>
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb fcb3 	bl	8000b2c <__aeabi_dcmpun>
 80051c6:	4607      	mov	r7, r0
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d153      	bne.n	8005274 <log10+0xdc>
 80051cc:	2200      	movs	r2, #0
 80051ce:	2300      	movs	r3, #0
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb fc8c 	bl	8000af0 <__aeabi_dcmple>
 80051d8:	2800      	cmp	r0, #0
 80051da:	d04b      	beq.n	8005274 <log10+0xdc>
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <log10+0xf0>)
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	9708      	str	r7, [sp, #32]
 80051e2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80051e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80051ea:	b9a6      	cbnz	r6, 8005216 <log10+0x7e>
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <log10+0xf4>)
 80051ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80051f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051f6:	4620      	mov	r0, r4
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8005202:	bb40      	cbnz	r0, 8005256 <log10+0xbe>
 8005204:	2301      	movs	r3, #1
 8005206:	2e02      	cmp	r6, #2
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	d119      	bne.n	8005240 <log10+0xa8>
 800520c:	f7ff fafa 	bl	8004804 <__errno>
 8005210:	2321      	movs	r3, #33	; 0x21
 8005212:	6003      	str	r3, [r0, #0]
 8005214:	e019      	b.n	800524a <log10+0xb2>
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <log10+0xf8>)
 8005218:	2200      	movs	r2, #0
 800521a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800521e:	4620      	mov	r0, r4
 8005220:	2200      	movs	r2, #0
 8005222:	2300      	movs	r3, #0
 8005224:	4629      	mov	r1, r5
 8005226:	f7fb fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800522a:	2800      	cmp	r0, #0
 800522c:	d0ea      	beq.n	8005204 <log10+0x6c>
 800522e:	2302      	movs	r3, #2
 8005230:	429e      	cmp	r6, r3
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	d111      	bne.n	800525a <log10+0xc2>
 8005236:	f7ff fae5 	bl	8004804 <__errno>
 800523a:	2322      	movs	r3, #34	; 0x22
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	e011      	b.n	8005264 <log10+0xcc>
 8005240:	4668      	mov	r0, sp
 8005242:	f000 f8b3 	bl	80053ac <matherr>
 8005246:	2800      	cmp	r0, #0
 8005248:	d0e0      	beq.n	800520c <log10+0x74>
 800524a:	4812      	ldr	r0, [pc, #72]	; (8005294 <log10+0xfc>)
 800524c:	f000 f8b0 	bl	80053b0 <nan>
 8005250:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005254:	e006      	b.n	8005264 <log10+0xcc>
 8005256:	2302      	movs	r3, #2
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4668      	mov	r0, sp
 800525c:	f000 f8a6 	bl	80053ac <matherr>
 8005260:	2800      	cmp	r0, #0
 8005262:	d0e8      	beq.n	8005236 <log10+0x9e>
 8005264:	9b08      	ldr	r3, [sp, #32]
 8005266:	b11b      	cbz	r3, 8005270 <log10+0xd8>
 8005268:	f7ff facc 	bl	8004804 <__errno>
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	6003      	str	r3, [r0, #0]
 8005270:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005274:	eeb0 0a48 	vmov.f32	s0, s16
 8005278:	eef0 0a68 	vmov.f32	s1, s17
 800527c:	b00b      	add	sp, #44	; 0x2c
 800527e:	ecbd 8b02 	vpop	{d8}
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	20000070 	.word	0x20000070
 8005288:	080057c7 	.word	0x080057c7
 800528c:	c7efffff 	.word	0xc7efffff
 8005290:	fff00000 	.word	0xfff00000
 8005294:	08005799 	.word	0x08005799

08005298 <__ieee754_log10>:
 8005298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800529c:	ec55 4b10 	vmov	r4, r5, d0
 80052a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80052a4:	462b      	mov	r3, r5
 80052a6:	da2f      	bge.n	8005308 <__ieee754_log10+0x70>
 80052a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80052ac:	4322      	orrs	r2, r4
 80052ae:	d10a      	bne.n	80052c6 <__ieee754_log10+0x2e>
 80052b0:	493b      	ldr	r1, [pc, #236]	; (80053a0 <__ieee754_log10+0x108>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	2300      	movs	r3, #0
 80052b6:	2000      	movs	r0, #0
 80052b8:	f7fb fac8 	bl	800084c <__aeabi_ddiv>
 80052bc:	ec41 0b10 	vmov	d0, r0, r1
 80052c0:	b003      	add	sp, #12
 80052c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	da08      	bge.n	80052dc <__ieee754_log10+0x44>
 80052ca:	ee10 2a10 	vmov	r2, s0
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fa ffd9 	bl	8000288 <__aeabi_dsub>
 80052d6:	2200      	movs	r2, #0
 80052d8:	2300      	movs	r3, #0
 80052da:	e7ed      	b.n	80052b8 <__ieee754_log10+0x20>
 80052dc:	2200      	movs	r2, #0
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <__ieee754_log10+0x10c>)
 80052e0:	4629      	mov	r1, r5
 80052e2:	ee10 0a10 	vmov	r0, s0
 80052e6:	f7fb f987 	bl	80005f8 <__aeabi_dmul>
 80052ea:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80052ee:	4604      	mov	r4, r0
 80052f0:	460d      	mov	r5, r1
 80052f2:	460b      	mov	r3, r1
 80052f4:	492c      	ldr	r1, [pc, #176]	; (80053a8 <__ieee754_log10+0x110>)
 80052f6:	428b      	cmp	r3, r1
 80052f8:	dd08      	ble.n	800530c <__ieee754_log10+0x74>
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	f7fa ffc3 	bl	800028c <__adddf3>
 8005306:	e7d9      	b.n	80052bc <__ieee754_log10+0x24>
 8005308:	2200      	movs	r2, #0
 800530a:	e7f3      	b.n	80052f4 <__ieee754_log10+0x5c>
 800530c:	1518      	asrs	r0, r3, #20
 800530e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005312:	4410      	add	r0, r2
 8005314:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005318:	4448      	add	r0, r9
 800531a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800531e:	f7fb f901 	bl	8000524 <__aeabi_i2d>
 8005322:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005326:	3303      	adds	r3, #3
 8005328:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800532c:	ec45 4b10 	vmov	d0, r4, r5
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	f000 f844 	bl	80053c0 <__ieee754_log>
 8005338:	a313      	add	r3, pc, #76	; (adr r3, 8005388 <__ieee754_log10+0xf0>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	ed8d 0b00 	vstr	d0, [sp]
 8005346:	f7fb f957 	bl	80005f8 <__aeabi_dmul>
 800534a:	ed9d 0b00 	vldr	d0, [sp]
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	a30f      	add	r3, pc, #60	; (adr r3, 8005390 <__ieee754_log10+0xf8>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	ec51 0b10 	vmov	r0, r1, d0
 800535c:	f7fb f94c 	bl	80005f8 <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4620      	mov	r0, r4
 8005366:	4629      	mov	r1, r5
 8005368:	f7fa ff90 	bl	800028c <__adddf3>
 800536c:	a30a      	add	r3, pc, #40	; (adr r3, 8005398 <__ieee754_log10+0x100>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
 8005376:	4630      	mov	r0, r6
 8005378:	4639      	mov	r1, r7
 800537a:	f7fb f93d 	bl	80005f8 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	e7bc      	b.n	8005302 <__ieee754_log10+0x6a>
 8005388:	11f12b36 	.word	0x11f12b36
 800538c:	3d59fef3 	.word	0x3d59fef3
 8005390:	1526e50e 	.word	0x1526e50e
 8005394:	3fdbcb7b 	.word	0x3fdbcb7b
 8005398:	509f6000 	.word	0x509f6000
 800539c:	3fd34413 	.word	0x3fd34413
 80053a0:	c3500000 	.word	0xc3500000
 80053a4:	43500000 	.word	0x43500000
 80053a8:	7fefffff 	.word	0x7fefffff

080053ac <matherr>:
 80053ac:	2000      	movs	r0, #0
 80053ae:	4770      	bx	lr

080053b0 <nan>:
 80053b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80053b8 <nan+0x8>
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	00000000 	.word	0x00000000
 80053bc:	7ff80000 	.word	0x7ff80000

080053c0 <__ieee754_log>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	ec51 0b10 	vmov	r0, r1, d0
 80053c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80053cc:	b087      	sub	sp, #28
 80053ce:	460d      	mov	r5, r1
 80053d0:	da27      	bge.n	8005422 <__ieee754_log+0x62>
 80053d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053d6:	4303      	orrs	r3, r0
 80053d8:	ee10 2a10 	vmov	r2, s0
 80053dc:	d10a      	bne.n	80053f4 <__ieee754_log+0x34>
 80053de:	49cc      	ldr	r1, [pc, #816]	; (8005710 <__ieee754_log+0x350>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	2300      	movs	r3, #0
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fb fa31 	bl	800084c <__aeabi_ddiv>
 80053ea:	ec41 0b10 	vmov	d0, r0, r1
 80053ee:	b007      	add	sp, #28
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	2900      	cmp	r1, #0
 80053f6:	da05      	bge.n	8005404 <__ieee754_log+0x44>
 80053f8:	460b      	mov	r3, r1
 80053fa:	f7fa ff45 	bl	8000288 <__aeabi_dsub>
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	e7f0      	b.n	80053e6 <__ieee754_log+0x26>
 8005404:	4bc3      	ldr	r3, [pc, #780]	; (8005714 <__ieee754_log+0x354>)
 8005406:	2200      	movs	r2, #0
 8005408:	f7fb f8f6 	bl	80005f8 <__aeabi_dmul>
 800540c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005410:	460d      	mov	r5, r1
 8005412:	4ac1      	ldr	r2, [pc, #772]	; (8005718 <__ieee754_log+0x358>)
 8005414:	4295      	cmp	r5, r2
 8005416:	dd06      	ble.n	8005426 <__ieee754_log+0x66>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	f7fa ff36 	bl	800028c <__adddf3>
 8005420:	e7e3      	b.n	80053ea <__ieee754_log+0x2a>
 8005422:	2300      	movs	r3, #0
 8005424:	e7f5      	b.n	8005412 <__ieee754_log+0x52>
 8005426:	152c      	asrs	r4, r5, #20
 8005428:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800542c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005430:	441c      	add	r4, r3
 8005432:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005436:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800543a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005442:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005446:	ea42 0105 	orr.w	r1, r2, r5
 800544a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800544e:	2200      	movs	r2, #0
 8005450:	4bb2      	ldr	r3, [pc, #712]	; (800571c <__ieee754_log+0x35c>)
 8005452:	f7fa ff19 	bl	8000288 <__aeabi_dsub>
 8005456:	1cab      	adds	r3, r5, #2
 8005458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800545c:	2b02      	cmp	r3, #2
 800545e:	4682      	mov	sl, r0
 8005460:	468b      	mov	fp, r1
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	dc53      	bgt.n	8005510 <__ieee754_log+0x150>
 8005468:	2300      	movs	r3, #0
 800546a:	f7fb fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800546e:	b1d0      	cbz	r0, 80054a6 <__ieee754_log+0xe6>
 8005470:	2c00      	cmp	r4, #0
 8005472:	f000 8120 	beq.w	80056b6 <__ieee754_log+0x2f6>
 8005476:	4620      	mov	r0, r4
 8005478:	f7fb f854 	bl	8000524 <__aeabi_i2d>
 800547c:	a390      	add	r3, pc, #576	; (adr r3, 80056c0 <__ieee754_log+0x300>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	f7fb f8b7 	bl	80005f8 <__aeabi_dmul>
 800548a:	a38f      	add	r3, pc, #572	; (adr r3, 80056c8 <__ieee754_log+0x308>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	4604      	mov	r4, r0
 8005492:	460d      	mov	r5, r1
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f7fb f8ae 	bl	80005f8 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4620      	mov	r0, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	e7ba      	b.n	800541c <__ieee754_log+0x5c>
 80054a6:	a38a      	add	r3, pc, #552	; (adr r3, 80056d0 <__ieee754_log+0x310>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	4650      	mov	r0, sl
 80054ae:	4659      	mov	r1, fp
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	2000      	movs	r0, #0
 80054ba:	4999      	ldr	r1, [pc, #612]	; (8005720 <__ieee754_log+0x360>)
 80054bc:	f7fa fee4 	bl	8000288 <__aeabi_dsub>
 80054c0:	4652      	mov	r2, sl
 80054c2:	4606      	mov	r6, r0
 80054c4:	460f      	mov	r7, r1
 80054c6:	465b      	mov	r3, fp
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fb f894 	bl	80005f8 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4630      	mov	r0, r6
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	b914      	cbnz	r4, 80054e8 <__ieee754_log+0x128>
 80054e2:	4632      	mov	r2, r6
 80054e4:	463b      	mov	r3, r7
 80054e6:	e0a0      	b.n	800562a <__ieee754_log+0x26a>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7fb f81b 	bl	8000524 <__aeabi_i2d>
 80054ee:	a374      	add	r3, pc, #464	; (adr r3, 80056c0 <__ieee754_log+0x300>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4680      	mov	r8, r0
 80054f6:	4689      	mov	r9, r1
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	a372      	add	r3, pc, #456	; (adr r3, 80056c8 <__ieee754_log+0x308>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	4604      	mov	r4, r0
 8005504:	460d      	mov	r5, r1
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	f7fb f875 	bl	80005f8 <__aeabi_dmul>
 800550e:	e0a5      	b.n	800565c <__ieee754_log+0x29c>
 8005510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005514:	f7fa feba 	bl	800028c <__adddf3>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4650      	mov	r0, sl
 800551e:	4659      	mov	r1, fp
 8005520:	f7fb f994 	bl	800084c <__aeabi_ddiv>
 8005524:	e9cd 0100 	strd	r0, r1, [sp]
 8005528:	4620      	mov	r0, r4
 800552a:	f7fa fffb 	bl	8000524 <__aeabi_i2d>
 800552e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	f7fb f85d 	bl	80005f8 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005546:	f7fb f857 	bl	80005f8 <__aeabi_dmul>
 800554a:	a363      	add	r3, pc, #396	; (adr r3, 80056d8 <__ieee754_log+0x318>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	f7fb f850 	bl	80005f8 <__aeabi_dmul>
 8005558:	a361      	add	r3, pc, #388	; (adr r3, 80056e0 <__ieee754_log+0x320>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fa fe95 	bl	800028c <__adddf3>
 8005562:	4642      	mov	r2, r8
 8005564:	464b      	mov	r3, r9
 8005566:	f7fb f847 	bl	80005f8 <__aeabi_dmul>
 800556a:	a35f      	add	r3, pc, #380	; (adr r3, 80056e8 <__ieee754_log+0x328>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fa fe8c 	bl	800028c <__adddf3>
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	f7fb f83e 	bl	80005f8 <__aeabi_dmul>
 800557c:	a35c      	add	r3, pc, #368	; (adr r3, 80056f0 <__ieee754_log+0x330>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe83 	bl	800028c <__adddf3>
 8005586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800558a:	f7fb f835 	bl	80005f8 <__aeabi_dmul>
 800558e:	a35a      	add	r3, pc, #360	; (adr r3, 80056f8 <__ieee754_log+0x338>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005598:	4640      	mov	r0, r8
 800559a:	4649      	mov	r1, r9
 800559c:	f7fb f82c 	bl	80005f8 <__aeabi_dmul>
 80055a0:	a357      	add	r3, pc, #348	; (adr r3, 8005700 <__ieee754_log+0x340>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa fe71 	bl	800028c <__adddf3>
 80055aa:	4642      	mov	r2, r8
 80055ac:	464b      	mov	r3, r9
 80055ae:	f7fb f823 	bl	80005f8 <__aeabi_dmul>
 80055b2:	a355      	add	r3, pc, #340	; (adr r3, 8005708 <__ieee754_log+0x348>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa fe68 	bl	800028c <__adddf3>
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	f7fb f81a 	bl	80005f8 <__aeabi_dmul>
 80055c4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80055d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d4:	f7fa fe5a 	bl	800028c <__adddf3>
 80055d8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80055dc:	3551      	adds	r5, #81	; 0x51
 80055de:	4335      	orrs	r5, r6
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	4680      	mov	r8, r0
 80055e4:	4689      	mov	r9, r1
 80055e6:	dd48      	ble.n	800567a <__ieee754_log+0x2ba>
 80055e8:	2200      	movs	r2, #0
 80055ea:	4b4d      	ldr	r3, [pc, #308]	; (8005720 <__ieee754_log+0x360>)
 80055ec:	4650      	mov	r0, sl
 80055ee:	4659      	mov	r1, fp
 80055f0:	f7fb f802 	bl	80005f8 <__aeabi_dmul>
 80055f4:	4652      	mov	r2, sl
 80055f6:	465b      	mov	r3, fp
 80055f8:	f7fa fffe 	bl	80005f8 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4606      	mov	r6, r0
 8005602:	460f      	mov	r7, r1
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fa fe40 	bl	800028c <__adddf3>
 800560c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005610:	f7fa fff2 	bl	80005f8 <__aeabi_dmul>
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	b964      	cbnz	r4, 8005634 <__ieee754_log+0x274>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fa fe31 	bl	8000288 <__aeabi_dsub>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4650      	mov	r0, sl
 800562c:	4659      	mov	r1, fp
 800562e:	f7fa fe2b 	bl	8000288 <__aeabi_dsub>
 8005632:	e6da      	b.n	80053ea <__ieee754_log+0x2a>
 8005634:	a322      	add	r3, pc, #136	; (adr r3, 80056c0 <__ieee754_log+0x300>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800563e:	f7fa ffdb 	bl	80005f8 <__aeabi_dmul>
 8005642:	a321      	add	r3, pc, #132	; (adr r3, 80056c8 <__ieee754_log+0x308>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005650:	f7fa ffd2 	bl	80005f8 <__aeabi_dmul>
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	f7fa fe18 	bl	800028c <__adddf3>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fa fe10 	bl	8000288 <__aeabi_dsub>
 8005668:	4652      	mov	r2, sl
 800566a:	465b      	mov	r3, fp
 800566c:	f7fa fe0c 	bl	8000288 <__aeabi_dsub>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4620      	mov	r0, r4
 8005676:	4629      	mov	r1, r5
 8005678:	e7d9      	b.n	800562e <__ieee754_log+0x26e>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4650      	mov	r0, sl
 8005680:	4659      	mov	r1, fp
 8005682:	f7fa fe01 	bl	8000288 <__aeabi_dsub>
 8005686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800568a:	f7fa ffb5 	bl	80005f8 <__aeabi_dmul>
 800568e:	4606      	mov	r6, r0
 8005690:	460f      	mov	r7, r1
 8005692:	2c00      	cmp	r4, #0
 8005694:	f43f af25 	beq.w	80054e2 <__ieee754_log+0x122>
 8005698:	a309      	add	r3, pc, #36	; (adr r3, 80056c0 <__ieee754_log+0x300>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a2:	f7fa ffa9 	bl	80005f8 <__aeabi_dmul>
 80056a6:	a308      	add	r3, pc, #32	; (adr r3, 80056c8 <__ieee754_log+0x308>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
 80056b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b4:	e729      	b.n	800550a <__ieee754_log+0x14a>
 80056b6:	2000      	movs	r0, #0
 80056b8:	2100      	movs	r1, #0
 80056ba:	e696      	b.n	80053ea <__ieee754_log+0x2a>
 80056bc:	f3af 8000 	nop.w
 80056c0:	fee00000 	.word	0xfee00000
 80056c4:	3fe62e42 	.word	0x3fe62e42
 80056c8:	35793c76 	.word	0x35793c76
 80056cc:	3dea39ef 	.word	0x3dea39ef
 80056d0:	55555555 	.word	0x55555555
 80056d4:	3fd55555 	.word	0x3fd55555
 80056d8:	df3e5244 	.word	0xdf3e5244
 80056dc:	3fc2f112 	.word	0x3fc2f112
 80056e0:	96cb03de 	.word	0x96cb03de
 80056e4:	3fc74664 	.word	0x3fc74664
 80056e8:	94229359 	.word	0x94229359
 80056ec:	3fd24924 	.word	0x3fd24924
 80056f0:	55555593 	.word	0x55555593
 80056f4:	3fe55555 	.word	0x3fe55555
 80056f8:	d078c69f 	.word	0xd078c69f
 80056fc:	3fc39a09 	.word	0x3fc39a09
 8005700:	1d8e78af 	.word	0x1d8e78af
 8005704:	3fcc71c5 	.word	0x3fcc71c5
 8005708:	9997fa04 	.word	0x9997fa04
 800570c:	3fd99999 	.word	0x3fd99999
 8005710:	c3500000 	.word	0xc3500000
 8005714:	43500000 	.word	0x43500000
 8005718:	7fefffff 	.word	0x7fefffff
 800571c:	3ff00000 	.word	0x3ff00000
 8005720:	3fe00000 	.word	0x3fe00000

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
