
self_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009398  08009398  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080093a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001f4  08009594  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  08009594  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bff2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037a7  00000000  00000000  0003c216  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00040d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002604e  00000000  00000000  00041ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123be  00000000  00000000  00067f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8baf  00000000  00000000  0007a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152e83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ac  00000000  00000000  00152f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080092e4 	.word	0x080092e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	080092e4 	.word	0x080092e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fcf2 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f87b 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9e7 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004e6:	f000 f977 	bl	80007d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f9b3 	bl	8000854 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 f87f 	bl	80085f0 <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 80004f2:	f000 f907 	bl	8000704 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80004f6:	f000 f931 	bl	800075c <MX_SPI2_Init>


  /* USER CODE BEGIN 2 */
  //start up LED sequence
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 80004fa:	4b34      	ldr	r3, [pc, #208]	; (80005cc <main+0xf8>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a33      	ldr	r2, [pc, #204]	; (80005cc <main+0xf8>)
 8000500:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000504:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000506:	20fa      	movs	r0, #250	; 0xfa
 8000508:	f000 fd50 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0xf8>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <main+0xf8>)
 8000512:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000516:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f000 fd47 	bl	8000fac <HAL_Delay>
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <main+0xf8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <main+0xf8>)
 8000524:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000528:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800052a:	20fa      	movs	r0, #250	; 0xfa
 800052c:	f000 fd3e 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0xf8>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <main+0xf8>)
 8000536:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 800053a:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800053c:	20fa      	movs	r0, #250	; 0xfa
 800053e:	f000 fd35 	bl	8000fac <HAL_Delay>


  char test_phrase[] = "Testing...";
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <main+0xfc>)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	c303      	stmia	r3!, {r0, r1}
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	3302      	adds	r3, #2
 800054e:	0c12      	lsrs	r2, r2, #16
 8000550:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *) &test_phrase, sizeof test_phrase, HAL_MAX_DELAY);
 8000552:	1d39      	adds	r1, r7, #4
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	220b      	movs	r2, #11
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <main+0x100>)
 800055c:	f003 ff47 	bl	80043ee <HAL_UART_Transmit>

  uint8_t test = query();
 8000560:	f000 fa52 	bl	8000a08 <query>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]


  GPIOB->ODR |= (LED1_Pin); //mask LED1
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <main+0xf8>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a17      	ldr	r2, [pc, #92]	; (80005cc <main+0xf8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000574:	20fa      	movs	r0, #250	; 0xfa
 8000576:	f000 fd19 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //swap to LED2
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0xf8>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a13      	ldr	r2, [pc, #76]	; (80005cc <main+0xf8>)
 8000580:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000584:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000586:	20fa      	movs	r0, #250	; 0xfa
 8000588:	f000 fd10 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED1
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xf8>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <main+0xf8>)
 8000592:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000596:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f000 fd07 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED2
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0xf8>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0xf8>)
 80005a4:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 80005a8:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 80005aa:	20fa      	movs	r0, #250	; 0xfa
 80005ac:	f000 fcfe 	bl	8000fac <HAL_Delay>
  GPIOB->ODR ^= (LED2_Pin); //end sequence
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <main+0xf8>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <main+0xf8>)
 80005b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005ba:	6153      	str	r3, [r2, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  report(test);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fa2e 	bl	8000a20 <report>
	  HAL_Delay(250);
 80005c4:	20fa      	movs	r0, #250	; 0xfa
 80005c6:	f000 fcf1 	bl	8000fac <HAL_Delay>
	  report(test);
 80005ca:	e7f7      	b.n	80005bc <main+0xe8>
 80005cc:	48000400 	.word	0x48000400
 80005d0:	080092fc 	.word	0x080092fc
 80005d4:	200002e8 	.word	0x200002e8

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b0      	sub	sp, #192	; 0xc0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fdba 	bl	8009160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2268      	movs	r2, #104	; 0x68
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fdac 	bl	8009160 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000608:	f002 fb2c 	bl	8002c64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <SystemClock_Config+0x128>)
 800060e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000612:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <SystemClock_Config+0x128>)
 8000614:	f023 0318 	bic.w	r3, r3, #24
 8000618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800061c:	2314      	movs	r3, #20
 800061e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fc42 	bl	8002ef0 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 f9e0 	bl	8000a36 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f003 f84d 	bl	8003730 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800069c:	f000 f9cb 	bl	8000a36 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80006a0:	f242 0301 	movw	r3, #8193	; 0x2001
 80006a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006b8:	2318      	movs	r3, #24
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006cc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fa31 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80006dc:	f000 f9ab 	bl	8000a36 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f002 fadc 	bl	8002ca0 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80006ee:	f000 f9a2 	bl	8000a36 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f2:	f003 fc8b 	bl	800400c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f6:	bf00      	nop
 80006f8:	37c0      	adds	r7, #192	; 0xc0
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_QUADSPI_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000716:	2201      	movs	r2, #1
 8000718:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000722:	2201      	movs	r2, #1
 8000724:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000740:	f002 fb14 	bl	8002d6c <HAL_QSPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f974 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000368 	.word	0x20000368
 8000758:	a0001000 	.word	0xa0001000

0800075c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_SPI2_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000776:	f44f 7240 	mov.w	r2, #768	; 0x300
 800077a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI2_Init+0x74>)
 800078a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007bc:	f003 fd26 	bl	800420c <HAL_SPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f936 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000220 	.word	0x20000220
 80007d4:	40003800 	.word	0x40003800

080007d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x74>)
 80007f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x74>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x74>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x74>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0x74>)
 8000838:	f003 fce8 	bl	800420c <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f8f8 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000284 	.word	0x20000284
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f003 fd5b 	bl	8004352 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f8c8 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002e8 	.word	0x200002e8
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a43      	ldr	r2, [pc, #268]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <MX_GPIO_Init+0x140>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a37      	ldr	r2, [pc, #220]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x140>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_GPIO_Init+0x140>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADXL_CS_Pin|ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f241 0110 	movw	r1, #4112	; 0x1010
 8000948:	482b      	ldr	r0, [pc, #172]	; (80009f8 <MX_GPIO_Init+0x144>)
 800094a:	f000 fddd 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f246 3140 	movw	r1, #25408	; 0x6340
 8000954:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x148>)
 8000956:	f000 fdd7 	bl	8001508 <HAL_GPIO_WritePin>
                          |ADS_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APWR_EN_GPIO_Port, APWR_EN_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	4828      	ldr	r0, [pc, #160]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000960:	f000 fdd2 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADXL_CS_Pin ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin|ADS_PWDN_Pin;
 8000964:	f241 0310 	movw	r3, #4112	; 0x1010
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	481e      	ldr	r0, [pc, #120]	; (80009f8 <MX_GPIO_Init+0x144>)
 800097e:	f000 fc49 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin SPI3_CS_Pin ADS_START_Pin
                           ADS_RST_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 8000982:	f246 3340 	movw	r3, #25408	; 0x6340
 8000986:	617b      	str	r3, [r7, #20]
                          |ADS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x148>)
 800099c:	f000 fc3a 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : APWR_EN_Pin */
  GPIO_InitStruct.Pin = APWR_EN_Pin;
 80009a0:	2304      	movs	r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80009b8:	f000 fc2c 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x148>)
 80009d0:	f000 fc20 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80009d4:	2308      	movs	r3, #8
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_GPIO_Init+0x150>)
 80009e8:	f000 fc14 	bl	8001214 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000c00 	.word	0x48000c00
 8000a04:	48001c00 	.word	0x48001c00

08000a08 <query>:

/* USER CODE BEGIN 4 */
static uint8_t query(void) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
			uint8_t mem_pass : 1;
			uint8_t apwr_pass : 1;
		} bits;
	} report_bit_field;

	report_bit_field.report = 0x00;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	713b      	strb	r3, [r7, #4]

	//query MX25R64



	return report_bit_field.report;
 8000a12:	793b      	ldrb	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <report>:

static void report(uint8_t test_reg) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x6>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6613      	str	r3, [r2, #96]	; 0x60
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <HAL_QSPI_MspInit+0xb4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d144      	bne.n	8000b34 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aae:	4a24      	ldr	r2, [pc, #144]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_QSPI_MspInit+0xb8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	23cc      	movs	r3, #204	; 0xcc
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b02:	230a      	movs	r3, #10
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fb80 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b14:	2303      	movs	r3, #3
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b24:	230a      	movs	r3, #10
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_QSPI_MspInit+0xbc>)
 8000b30:	f000 fb70 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	a0001000 	.word	0xa0001000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a4b      	ldr	r2, [pc, #300]	; (8000c94 <HAL_SPI_MspInit+0x14c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d145      	bne.n	8000bf6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b6a:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a4a      	ldr	r2, [pc, #296]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	623b      	str	r3, [r7, #32]
 8000b80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4833      	ldr	r0, [pc, #204]	; (8000c9c <HAL_SPI_MspInit+0x154>)
 8000bce:	f000 fb21 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <HAL_SPI_MspInit+0x158>)
 8000bf0:	f000 fb10 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf4:	e049      	b.n	8000c8a <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <HAL_SPI_MspInit+0x15c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d144      	bne.n	8000c8a <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_SPI_MspInit+0x150>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_SPI_MspInit+0x154>)
 8000c66:	f000 fad5 	bl	8001214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c6a:	2330      	movs	r3, #48	; 0x30
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_SPI_MspInit+0x158>)
 8000c86:	f000 fac5 	bl	8001214 <HAL_GPIO_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	; 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40003800 	.word	0x40003800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	40003c00 	.word	0x40003c00

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d129      	bne.n	8000d1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f000 fa7b 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40021000 	.word	0x40021000

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8f6 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USB_IRQHandler+0x10>)
 8000d8a:	f000 fd09 	bl	80017a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20001888 	.word	0x20001888

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f008 f990 	bl	80090ec <__errno>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	230c      	movs	r3, #12
 8000dd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20028000 	.word	0x20028000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000210 	.word	0x20000210
 8000e00:	20001b80 	.word	0x20001b80

08000e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <SystemInit+0x64>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <SystemInit+0x64>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <SystemInit+0x68>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <SystemInit+0x68>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <SystemInit+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <SystemInit+0x68>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <SystemInit+0x68>)
 8000e30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <SystemInit+0x68>)
 8000e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <SystemInit+0x68>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <SystemInit+0x68>)
 8000e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <SystemInit+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SystemInit+0x64>)
 8000e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	40021000 	.word	0x40021000

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffc6 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
	ldr	r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LoopForever+0x16>)
	cmp	r2, r3
 8000e9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f008 f92b 	bl	80090f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb17 	bl	80004d4 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000eac:	080093a0 	.word	0x080093a0
	ldr	r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000eb8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000ebc:	20001b80 	.word	0x20001b80

08000ec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_IRQHandler>

08000ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f95f 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f80e 	bl	8000ef4 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff fdac 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_InitTick+0x70>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f96b 	bl	80011fa <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10f      	bne.n	8000f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d809      	bhi.n	8000f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f935 	bl	80011a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_InitTick+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e004      	b.n	8000f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e001      	b.n	8000f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200003b4 	.word	0x200003b4

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200003b4 	.word	0x200003b4

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_Delay+0x40>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e154      	b.n	80014ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8146 	beq.w	80014c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00b      	beq.n	800125c <HAL_GPIO_Init+0x48>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	2b11      	cmp	r3, #17
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 0201 	and.w	r2, r3, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0xea>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d123      	bne.n	8001346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0203 	and.w	r2, r3, #3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80a0 	beq.w	80014c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6613      	str	r3, [r2, #96]	; 0x60
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 8001396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ca:	d019      	beq.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_GPIO_Init+0x2e0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_GPIO_Init+0x1e8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1e0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2ec>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1dc>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e008      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f0:	2307      	movs	r3, #7
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 8001400:	2300      	movs	r3, #0
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146e:	4a25      	ldr	r2, [pc, #148]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f aea3 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af06      	add	r7, sp, #24
 800153e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e104      	b.n	8001754 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f007 fa36 	bl	80089d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fbb7 	bl	8004ce4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	687e      	ldr	r6, [r7, #4]
 800157e:	466d      	mov	r5, sp
 8001580:	f106 0410 	add.w	r4, r6, #16
 8001584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	602b      	str	r3, [r5, #0]
 800158c:	1d33      	adds	r3, r6, #4
 800158e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f003 fb7f 	bl	8004c94 <USB_CoreInit>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0d5      	b.n	8001754 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fbb3 	bl	8004d1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e04c      	b.n	8001654 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	3301      	adds	r3, #1
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b298      	uxth	r0, r3
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3336      	adds	r3, #54	; 0x36
 80015f8:	4602      	mov	r2, r0
 80015fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3303      	adds	r3, #3
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	333c      	adds	r3, #60	; 0x3c
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3340      	adds	r3, #64	; 0x40
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	d3ad      	bcc.n	80015ba <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e044      	b.n	80016ee <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3b5      	bcc.n	8001664 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	687e      	ldr	r6, [r7, #4]
 8001700:	466d      	mov	r5, sp
 8001702:	f106 0410 	add.w	r4, r6, #16
 8001706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	1d33      	adds	r3, r6, #4
 8001710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001712:	6838      	ldr	r0, [r7, #0]
 8001714:	f003 fb0e 	bl	8004d34 <USB_DevInit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e014      	b.n	8001754 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f001 fa63 	bl	8002c0e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fac7 	bl	8006ce0 <USB_DevDisconnect>

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800175c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_PCD_Start+0x16>
 800176e:	2302      	movs	r3, #2
 8001770:	e012      	b.n	8001798 <HAL_PCD_Start+0x3c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fa99 	bl	8004cb6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f005 fa92 	bl	8006cb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 faac 	bl	8006d0a <USB_ReadInterrupts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017bc:	d102      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fb5b 	bl	8001e7a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fa9e 	bl	8006d0a <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d8:	d112      	bne.n	8001800 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ec:	b292      	uxth	r2, r2
 80017ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f007 f98d 	bl	8008b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017f8:	2100      	movs	r1, #0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f91e 	bl	8001a3c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f005 fa80 	bl	8006d0a <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001814:	d10b      	bne.n	800182e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001828:	b292      	uxth	r2, r2
 800182a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f005 fa69 	bl	8006d0a <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001842:	d10b      	bne.n	800185c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f005 fa52 	bl	8006d0a <USB_ReadInterrupts>
 8001866:	4603      	mov	r3, r0
 8001868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001870:	d133      	bne.n	80018da <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0204 	bic.w	r2, r2, #4
 8001884:	b292      	uxth	r2, r2
 8001886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0208 	bic.w	r2, r2, #8
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f007 fbdc 	bl	8009074 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f007 f961 	bl	8008b84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fa13 	bl	8006d0a <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ee:	d126      	bne.n	800193e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0208 	orr.w	r2, r2, #8
 8001902:	b292      	uxth	r2, r2
 8001904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191a:	b292      	uxth	r2, r2
 800191c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0204 	orr.w	r2, r2, #4
 8001932:	b292      	uxth	r2, r2
 8001934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f007 f909 	bl	8008b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f005 f9e1 	bl	8006d0a <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b80      	cmp	r3, #128	; 0x80
 8001950:	d13f      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	b292      	uxth	r2, r2
 8001966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d12b      	bne.n	80019cc <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0204 	orr.w	r2, r2, #4
 8001986:	b292      	uxth	r2, r2
 8001988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	b292      	uxth	r2, r2
 80019a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019c2:	2101      	movs	r1, #1
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f007 fb55 	bl	8009074 <HAL_PCDEx_LPM_Callback>
 80019ca:	e002      	b.n	80019d2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f007 f8bf 	bl	8008b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f005 f997 	bl	8006d0a <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e6:	d10e      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019fa:	b292      	uxth	r2, r2
 80019fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f007 f878 	bl	8008af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 f97d 	bl	8006d0a <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1a:	d10b      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_PCD_SetAddress+0x1a>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e013      	b.n	8001a7e <HAL_PCD_SetAddress+0x42>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 f90b 	bl	8006c8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	803b      	strh	r3, [r7, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da0e      	bge.n	8001aca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	705a      	strb	r2, [r3, #1]
 8001ac8:	e00e      	b.n	8001ae8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 0207 	and.w	r2, r3, #7
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001af4:	883a      	ldrh	r2, [r7, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d102      	bne.n	8001b1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_PCD_EP_Open+0xa6>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e00e      	b.n	8001b4a <HAL_PCD_EP_Open+0xc4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f91c 	bl	8004d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da0e      	bge.n	8001b84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	705a      	strb	r2, [r3, #1]
 8001b82:	e00e      	b.n	8001ba2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_EP_Close+0x6a>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00e      	b.n	8001bda <HAL_PCD_EP_Close+0x88>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fc42 	bl	8005454 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	f003 0207 	and.w	r2, r3, #7
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6979      	ldr	r1, [r7, #20]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fdf5 	bl	800582e <USB_EPStartXfer>
 8001c44:	e005      	b.n	8001c52 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6979      	ldr	r1, [r7, #20]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fdee 	bl	800582e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 0207 	and.w	r2, r3, #7
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6979      	ldr	r1, [r7, #20]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fd9a 	bl	800582e <USB_EPStartXfer>
 8001cfa:	e005      	b.n	8001d08 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fd93 	bl	800582e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 0207 	and.w	r2, r3, #7
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d901      	bls.n	8001d30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04c      	b.n	8001dca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da0e      	bge.n	8001d56 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
 8001d54:	e00c      	b.n	8001d70 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_EP_SetStall+0x7e>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e01c      	b.n	8001dca <HAL_PCD_EP_SetStall+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fe74 	bl	8006a8c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f004 ffb5 	bl	8006d2a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d901      	bls.n	8001df0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e040      	b.n	8001e72 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0e      	bge.n	8001e16 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
 8001e14:	e00e      	b.n	8001e34 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 0207 	and.w	r2, r3, #7
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_PCD_EP_ClrStall+0x82>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e00e      	b.n	8001e72 <HAL_PCD_EP_ClrStall+0xa0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fe63 	bl	8006b2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08e      	sub	sp, #56	; 0x38
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e82:	e2d1      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8152 	bne.w	8002148 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d150      	bne.n	8001f50 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3328      	adds	r3, #40	; 0x28
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	441a      	add	r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f006 fdd6 	bl	8008ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8282 	beq.w	8002428 <PCD_EP_ISR_Handler+0x5ae>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 827d 	bne.w	8002428 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b292      	uxth	r2, r2
 8001f42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f4e:	e26b      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d032      	beq.n	8001fd0 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f004 ff0d 	bl	8006dc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	823b      	strh	r3, [r7, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	8a3a      	ldrh	r2, [r7, #16]
 8001fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f006 fd4d 	bl	8008a68 <HAL_PCD_SetupStageCallback>
 8001fce:	e22b      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f280 8227 	bge.w	8002428 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	83bb      	strh	r3, [r7, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	8bba      	ldrh	r2, [r7, #28]
 8001ff0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	4413      	add	r3, r2
 8002012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d019      	beq.n	800205c <PCD_EP_ISR_Handler+0x1e2>
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002040:	b29b      	uxth	r3, r3
 8002042:	f004 febf 	bl	8006dc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	441a      	add	r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 fd18 	bl	8008a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4413      	add	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d112      	bne.n	80020aa <PCD_EP_ISR_Handler+0x230>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800208e:	b29a      	uxth	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800209e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	801a      	strh	r2, [r3, #0]
 80020a8:	e02f      	b.n	800210a <PCD_EP_ISR_Handler+0x290>
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b3e      	cmp	r3, #62	; 0x3e
 80020b0:	d813      	bhi.n	80020da <PCD_EP_ISR_Handler+0x260>
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <PCD_EP_ISR_Handler+0x252>
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	3301      	adds	r3, #1
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	029b      	lsls	r3, r3, #10
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	e017      	b.n	800210a <PCD_EP_ISR_Handler+0x290>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <PCD_EP_ISR_Handler+0x27a>
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	3b01      	subs	r3, #1
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002104:	b29a      	uxth	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	827b      	strh	r3, [r7, #18]
 800211c:	8a7b      	ldrh	r3, [r7, #18]
 800211e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002122:	827b      	strh	r3, [r7, #18]
 8002124:	8a7b      	ldrh	r3, [r7, #18]
 8002126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800212a:	827b      	strh	r3, [r7, #18]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	8a7b      	ldrh	r3, [r7, #18]
 8002132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002142:	b29b      	uxth	r3, r3
 8002144:	8013      	strh	r3, [r2, #0]
 8002146:	e16f      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800215a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800215e:	2b00      	cmp	r3, #0
 8002160:	f280 80e4 	bge.w	800232c <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	f640 738f 	movw	r3, #3983	; 0xf8f
 800217a:	4013      	ands	r3, r2
 800217c:	853b      	strh	r3, [r7, #40]	; 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	b292      	uxth	r2, r2
 8002194:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002196:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	7b1b      	ldrb	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d120      	bne.n	80021f6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8083 	beq.w	80022e8 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	6959      	ldr	r1, [r3, #20]
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	88da      	ldrh	r2, [r3, #6]
 80021ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f0:	f004 fde8 	bl	8006dc4 <USB_ReadPMA>
 80021f4:	e078      	b.n	80022e8 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d108      	bne.n	8002210 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002200:	461a      	mov	r2, r3
 8002202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f91d 	bl	8002444 <HAL_PCD_EP_DB_Receive>
 800220a:	4603      	mov	r3, r0
 800220c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800220e:	e06b      	b.n	80022e8 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	847b      	strh	r3, [r7, #34]	; 0x22
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800223c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01f      	beq.n	80022aa <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002292:	2b00      	cmp	r3, #0
 8002294:	d028      	beq.n	80022e8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	6959      	ldr	r1, [r3, #20]
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	891a      	ldrh	r2, [r3, #8]
 80022a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022a4:	f004 fd8e 	bl	8006dc4 <USB_ReadPMA>
 80022a8:	e01e      	b.n	80022e8 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6959      	ldr	r1, [r3, #20]
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	895a      	ldrh	r2, [r3, #10]
 80022e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e4:	f004 fd6e 	bl	8006dc4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ee:	441a      	add	r2, r3
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022fa:	441a      	add	r2, r3
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <PCD_EP_ISR_Handler+0x498>
 8002308:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d206      	bcs.n	8002320 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f006 fbb7 	bl	8008a8c <HAL_PCD_DataOutStageCallback>
 800231e:	e005      	b.n	800232c <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fa81 	bl	800582e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800232c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d078      	beq.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002336:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	843b      	strh	r3, [r7, #32]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	8c3b      	ldrh	r3, [r7, #32]
 8002376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237e:	b29b      	uxth	r3, r3
 8002380:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	78db      	ldrb	r3, [r3, #3]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d108      	bne.n	800239c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800238e:	2b02      	cmp	r3, #2
 8002390:	d144      	bne.n	800241c <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d13f      	bne.n	800241c <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	8bfb      	ldrh	r3, [r7, #30]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d906      	bls.n	80023da <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e002      	b.n	80023e0 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f006 fb67 	bl	8008ac2 <HAL_PCD_DataInStageCallback>
 80023f4:	e018      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	8bfb      	ldrh	r3, [r7, #30]
 80023fc:	441a      	add	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	8bfb      	ldrh	r3, [r7, #30]
 8002408:	441a      	add	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fa0a 	bl	800582e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800241a:	e005      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800241c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800241e:	461a      	mov	r2, r3
 8002420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f917 	bl	8002656 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002430:	b29b      	uxth	r3, r3
 8002432:	b21b      	sxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	f6ff ad25 	blt.w	8001e84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d07c      	beq.n	8002556 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4413      	add	r3, r2
 8002476:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002480:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	8b7b      	ldrh	r3, [r7, #26]
 8002488:	429a      	cmp	r2, r3
 800248a:	d306      	bcc.n	800249a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	8b7b      	ldrh	r3, [r7, #26]
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	e002      	b.n	80024a0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d123      	bne.n	80024f0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	833b      	strh	r3, [r7, #24]
 80024c4:	8b3b      	ldrh	r3, [r7, #24]
 80024c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024ca:	833b      	strh	r3, [r7, #24]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	8b3b      	ldrh	r3, [r7, #24]
 80024dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01f      	beq.n	800253a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002514:	82fb      	strh	r3, [r7, #22]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	441a      	add	r2, r3
 8002524:	8afb      	ldrh	r3, [r7, #22]
 8002526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002536:	b29b      	uxth	r3, r3
 8002538:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800253a:	8b7b      	ldrh	r3, [r7, #26]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8085 	beq.w	800264c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6959      	ldr	r1, [r3, #20]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	891a      	ldrh	r2, [r3, #8]
 800254e:	8b7b      	ldrh	r3, [r7, #26]
 8002550:	f004 fc38 	bl	8006dc4 <USB_ReadPMA>
 8002554:	e07a      	b.n	800264c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	8b7b      	ldrh	r3, [r7, #26]
 8002582:	429a      	cmp	r2, r3
 8002584:	d306      	bcc.n	8002594 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	e002      	b.n	800259a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d123      	bne.n	80025ea <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	83fb      	strh	r3, [r7, #30]
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025c4:	83fb      	strh	r3, [r7, #30]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8bfb      	ldrh	r3, [r7, #30]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11f      	bne.n	8002634 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	83bb      	strh	r3, [r7, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	8bbb      	ldrh	r3, [r7, #28]
 8002620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002630:	b29b      	uxth	r3, r3
 8002632:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002634:	8b7b      	ldrh	r3, [r7, #26]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	895a      	ldrh	r2, [r3, #10]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	f004 fbbc 	bl	8006dc4 <USB_ReadPMA>
    }
  }

  return count;
 800264c:	8b7b      	ldrh	r3, [r7, #26]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b092      	sub	sp, #72	; 0x48
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8130 	beq.w	80028d0 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	4413      	add	r3, r2
 800268a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002694:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800269c:	429a      	cmp	r2, r3
 800269e:	d906      	bls.n	80026ae <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	619a      	str	r2, [r3, #24]
 80026ac:	e002      	b.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12c      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f006 f9fd 	bl	8008ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 822d 	beq.w	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	827b      	strh	r3, [r7, #18]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	8a7b      	ldrh	r3, [r7, #18]
 8002700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	b29b      	uxth	r3, r3
 8002712:	8013      	strh	r3, [r2, #0]
 8002714:	e20b      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01f      	beq.n	8002760 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800274c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275c:	b29b      	uxth	r3, r3
 800275e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 81e1 	bne.w	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002772:	441a      	add	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800277e:	441a      	add	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d309      	bcc.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	1ad2      	subs	r2, r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	621a      	str	r2, [r3, #32]
 80027a2:	e014      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80027ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027b8:	e009      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d155      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x22c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	2b00      	cmp	r3, #0
 8002802:	d112      	bne.n	800282a <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800280e:	b29a      	uxth	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002822:	b29a      	uxth	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	e047      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x264>
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	2b3e      	cmp	r3, #62	; 0x3e
 800282e:	d811      	bhi.n	8002854 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	3301      	adds	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	b29b      	uxth	r3, r3
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e032      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x264>
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0x214>
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	b29b      	uxth	r3, r3
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287a:	b29a      	uxth	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e01b      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x264>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d117      	bne.n	80028ba <HAL_PCD_EP_DB_Transmit+0x264>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	4413      	add	r3, r2
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00da      	lsls	r2, r3, #3
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6959      	ldr	r1, [r3, #20]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	891a      	ldrh	r2, [r3, #8]
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f004 fa3a 	bl	8006d42 <USB_WritePMA>
 80028ce:	e12e      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d306      	bcc.n	800290e <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	619a      	str	r2, [r3, #24]
 800290c:	e002      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d12c      	bne.n	8002976 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f006 f8cd 	bl	8008ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 80fd 	bne.w	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]
 8002974:	e0db      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11f      	bne.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80029ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029bc:	b29b      	uxth	r3, r3
 80029be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80b1 	bne.w	8002b2e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029d2:	441a      	add	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029de:	441a      	add	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d309      	bcc.n	8002a04 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6a1a      	ldr	r2, [r3, #32]
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	1ad2      	subs	r2, r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	621a      	str	r2, [r3, #32]
 8002a02:	e014      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a18:	e009      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d155      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x492>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a50:	4413      	add	r3, r2
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	00da      	lsls	r2, r3, #3
 8002a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d112      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	e044      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	2b3e      	cmp	r3, #62	; 0x3e
 8002a94:	d811      	bhi.n	8002aba <HAL_PCD_EP_DB_Transmit+0x464>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_PCD_EP_DB_Transmit+0x456>
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	029b      	lsls	r3, r3, #10
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	e02f      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002acc:	3b01      	subs	r3, #1
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	e018      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d114      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	4413      	add	r3, r2
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6959      	ldr	r1, [r3, #20]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	895a      	ldrh	r2, [r3, #10]
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f004 f90a 	bl	8006d42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b48:	823b      	strh	r3, [r7, #16]
 8002b4a:	8a3b      	ldrh	r3, [r7, #16]
 8002b4c:	f083 0310 	eor.w	r3, r3, #16
 8002b50:	823b      	strh	r3, [r7, #16]
 8002b52:	8a3b      	ldrh	r3, [r7, #16]
 8002b54:	f083 0320 	eor.w	r3, r3, #32
 8002b58:	823b      	strh	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	8a3b      	ldrh	r3, [r7, #16]
 8002b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3748      	adds	r7, #72	; 0x48
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	4613      	mov	r3, r2
 8002b98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e009      	b.n	8002bd2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bbe:	897a      	ldrh	r2, [r7, #10]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	80da      	strh	r2, [r3, #6]
 8002be6:	e00b      	b.n	8002c00 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2201      	movs	r2, #1
 8002bec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40007000 	.word	0x40007000

08002c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d130      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d038      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2232      	movs	r2, #50	; 0x32
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce4:	e002      	b.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d102      	bne.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f2      	bne.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d110      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d007      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d28:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000
 8002d44:	20000000 	.word	0x20000000
 8002d48:	431bde83 	.word	0x431bde83

08002d4c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5a:	6053      	str	r3, [r2, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7fe f90e 	bl	8000f94 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e069      	b.n	8002e58 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fd fe75 	bl	8000a88 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f85e 	bl	8002e64 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	021a      	lsls	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2120      	movs	r1, #32
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f856 	bl	8002e80 <QSPI_WaitFlagStateUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d137      	bne.n	8002e4e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002de8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6852      	ldr	r2, [r2, #4]
 8002df0:	0611      	lsls	r1, r2, #24
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	4311      	orrs	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69d2      	ldr	r2, [r2, #28]
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a12      	ldr	r2, [r2, #32]
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_QSPI_Init+0xf4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6912      	ldr	r2, [r2, #16]
 8002e1a:	0411      	lsls	r1, r2, #16
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6952      	ldr	r2, [r2, #20]
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6992      	ldr	r2, [r2, #24]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002e56:	7afb      	ldrb	r3, [r7, #11]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	ffe0f8fe 	.word	0xffe0f8fe

08002e64 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e90:	e01a      	b.n	8002ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d016      	beq.n	8002ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7fe f87b 	bl	8000f94 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00e      	b.n	8002ee6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1d6      	bne.n	8002e92 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f000 bc11 	b.w	8003726 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f04:	4ba0      	ldr	r3, [pc, #640]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0e:	4b9e      	ldr	r3, [pc, #632]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80e4 	beq.w	80030ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4c>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	f040 808b 	bne.w	800304a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	f040 8087 	bne.w	800304a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3c:	4b92      	ldr	r3, [pc, #584]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x64>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e3e8      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_RCC_OscConfig+0x7e>
 8002f64:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_OscConfig+0x8a>
 8002f6e:	4b86      	ldr	r3, [pc, #536]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d223      	bcs.n	8002fc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fd78 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e3c9      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f92:	4b7d      	ldr	r3, [pc, #500]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7c      	ldr	r2, [pc, #496]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b7a      	ldr	r3, [pc, #488]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4977      	ldr	r1, [pc, #476]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb0:	4b75      	ldr	r3, [pc, #468]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	4972      	ldr	r1, [pc, #456]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	e025      	b.n	8003012 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6f      	ldr	r2, [pc, #444]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	496a      	ldr	r1, [pc, #424]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4965      	ldr	r1, [pc, #404]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd38 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e389      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003012:	f000 fc6f 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003016:	4601      	mov	r1, r0
 8003018:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x29c>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	fa21 f303 	lsr.w	r3, r1, r3
 800302e:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x2a0>)
 8003030:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003032:	4b58      	ldr	r3, [pc, #352]	; (8003194 <HAL_RCC_OscConfig+0x2a4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd ff5c 	bl	8000ef4 <HAL_InitTick>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d052      	beq.n	80030ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	e36d      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d032      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003052:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a4c      	ldr	r2, [pc, #304]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305e:	f7fd ff99 	bl	8000f94 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003066:	f7fd ff95 	bl	8000f94 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e356      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003078:	4b43      	ldr	r3, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	493a      	ldr	r1, [pc, #232]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	4935      	ldr	r1, [pc, #212]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
 80030b6:	e01a      	b.n	80030ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030b8:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a32      	ldr	r2, [pc, #200]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c4:	f7fd ff66 	bl	8000f94 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030cc:	f7fd ff62 	bl	8000f94 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e323      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1dc>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d073      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x21c>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d10e      	bne.n	8003124 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d063      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d15f      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e300      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x24c>
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0x288>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x270>
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0x288>
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_RCC_OscConfig+0x298>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd ff08 	bl	8000f94 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003186:	e010      	b.n	80031aa <HAL_RCC_OscConfig+0x2ba>
 8003188:	40021000 	.word	0x40021000
 800318c:	08009348 	.word	0x08009348
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd fefc 	bl	8000f94 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e2bd      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4baf      	ldr	r3, [pc, #700]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x2a8>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd feec 	bl	8000f94 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fd fee8 	bl	8000f94 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e2a9      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d2:	4ba5      	ldr	r3, [pc, #660]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2d0>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d060      	beq.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x310>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d119      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d116      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	4b99      	ldr	r3, [pc, #612]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x328>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e286      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b93      	ldr	r3, [pc, #588]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	4990      	ldr	r1, [pc, #576]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800322c:	e040      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d023      	beq.n	800327e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003236:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a8b      	ldr	r2, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fd fea7 	bl	8000f94 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fd fea3 	bl	8000f94 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e264      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325c:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b7f      	ldr	r3, [pc, #508]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	497c      	ldr	r1, [pc, #496]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e018      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b7a      	ldr	r3, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a79      	ldr	r2, [pc, #484]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fd fe83 	bl	8000f94 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7fd fe7f 	bl	8000f94 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e240      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a4:	4b70      	ldr	r3, [pc, #448]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03c      	beq.n	8003336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c4:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	4a67      	ldr	r2, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fe5e 	bl	8000f94 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fd fe5a 	bl	8000f94 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e21b      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ee:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCC_OscConfig+0x3ec>
 80032fc:	e01b      	b.n	8003336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fd fe41 	bl	8000f94 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fd fe3d 	bl	8000f94 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1fe      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80a6 	beq.w	8003490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003348:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a43      	ldr	r2, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCC_OscConfig+0x57c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d118      	bne.n	80033ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_OscConfig+0x57c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3a      	ldr	r2, [pc, #232]	; (800346c <HAL_RCC_OscConfig+0x57c>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003388:	f7fd fe04 	bl	8000f94 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fd fe00 	bl	8000f94 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1c1      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a2:	4b32      	ldr	r3, [pc, #200]	; (800346c <HAL_RCC_OscConfig+0x57c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4d8>
 80033b6:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c6:	e024      	b.n	8003412 <HAL_RCC_OscConfig+0x522>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d110      	bne.n	80033f2 <HAL_RCC_OscConfig+0x502>
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a20      	ldr	r2, [pc, #128]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f0:	e00f      	b.n	8003412 <HAL_RCC_OscConfig+0x522>
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fd fdbb 	bl	8000f94 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7fd fdb7 	bl	8000f94 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e176      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_OscConfig+0x578>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ed      	beq.n	8003422 <HAL_RCC_OscConfig+0x532>
 8003446:	e01a      	b.n	800347e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fda4 	bl	8000f94 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fd fda0 	bl	8000f94 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d906      	bls.n	8003470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e15f      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	4baa      	ldr	r3, [pc, #680]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e8      	bne.n	8003450 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4ba5      	ldr	r3, [pc, #660]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4aa4      	ldr	r2, [pc, #656]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03c      	beq.n	8003516 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01c      	beq.n	80034de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a4:	4b9d      	ldr	r3, [pc, #628]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80034a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034aa:	4a9c      	ldr	r2, [pc, #624]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fd fd6e 	bl	8000f94 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034bc:	f7fd fd6a 	bl	8000f94 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e12b      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ce:	4b93      	ldr	r3, [pc, #588]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80034d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCC_OscConfig+0x5cc>
 80034dc:	e01b      	b.n	8003516 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034de:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80034e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e4:	4a8d      	ldr	r2, [pc, #564]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fd fd51 	bl	8000f94 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f6:	f7fd fd4d 	bl	8000f94 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e10e      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003508:	4b84      	ldr	r3, [pc, #528]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800350a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8102 	beq.w	8003724 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	2b02      	cmp	r3, #2
 8003526:	f040 80c5 	bne.w	80036b4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800352a:	4b7c      	ldr	r3, [pc, #496]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0203 	and.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	429a      	cmp	r2, r3
 800353c:	d12c      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	3b01      	subs	r3, #1
 800354a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d123      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d11b      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d113      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d109      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d067      	beq.n	8003668 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d062      	beq.n	8003664 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0bb      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80035b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ba:	f7fd fceb 	bl	8000f94 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fce7 	bl	8000f94 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0a8      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <HAL_RCC_OscConfig+0x830>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035fa:	0212      	lsls	r2, r2, #8
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0552      	lsls	r2, r2, #21
 8003608:	4311      	orrs	r1, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	3a01      	subs	r2, #1
 8003612:	0652      	lsls	r2, r2, #25
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800361a:	06d2      	lsls	r2, r2, #27
 800361c:	430a      	orrs	r2, r1
 800361e:	493f      	ldr	r1, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3c      	ldr	r2, [pc, #240]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a39      	ldr	r2, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800363c:	f7fd fcaa 	bl	8000f94 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fca6 	bl	8000f94 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e067      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003662:	e05f      	b.n	8003724 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e05e      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800368c:	f7fd fc82 	bl	8000f94 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fd fc7e 	bl	8000f94 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e03f      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x7a4>
 80036b2:	e037      	b.n	8003724 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d02d      	beq.n	8003716 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 80036e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd fc51 	bl	8000f94 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fd fc4d 	bl	8000f94 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00e      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCC_OscConfig+0x82c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x806>
 8003714:	e006      	b.n	8003724 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e005      	b.n	8003726 <HAL_RCC_OscConfig+0x836>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0c8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4961      	ldr	r1, [pc, #388]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d04c      	beq.n	800381a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d121      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e09e      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d115      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e092      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e086      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e07e      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037d8:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 0203 	bic.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	493f      	ldr	r1, [pc, #252]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fd fbd3 	bl	8000f94 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fd fbcf 	bl	8000f94 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e066      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 020c 	and.w	r2, r3, #12
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	429a      	cmp	r2, r3
 8003818:	d1eb      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	492c      	ldr	r1, [pc, #176]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4924      	ldr	r1, [pc, #144]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e036      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4918      	ldr	r1, [pc, #96]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4910      	ldr	r1, [pc, #64]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a6:	f000 f825 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038aa:	4601      	mov	r1, r0
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	fa21 f303 	lsr.w	r3, r1, r3
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fb12 	bl	8000ef4 <HAL_InitTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d4:	7afb      	ldrb	r3, [r7, #11]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08009348 	.word	0x08009348
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x34>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d121      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d11e      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	e00a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e004      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800397a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d133      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xa4>
 8003992:	2b03      	cmp	r3, #3
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xaa>
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	fb02 f203 	mul.w	r2, r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ea:	69bb      	ldr	r3, [r7, #24]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3724      	adds	r7, #36	; 0x24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009360 	.word	0x08009360
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08009358 	.word	0x08009358

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a50:	f7ff ffda 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08009358 	.word	0x08009358

08003a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a90:	f7ff f8f8 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 8003a94:	6178      	str	r0, [r7, #20]
 8003a96:	e014      	b.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab0:	f7ff f8e8 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 8003ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d10b      	bne.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d919      	bls.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ad4:	d902      	bls.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e013      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003adc:	2301      	movs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e010      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d902      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae8:	2303      	movs	r3, #3
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e00a      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d102      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af4:	2302      	movs	r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e004      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d101      	bne.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b00:	2301      	movs	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 0207 	bic.w	r2, r3, #7
 8003b0c:	4909      	ldr	r1, [pc, #36]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40022000 	.word	0x40022000

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b68:	e00f      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa54 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b98:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	494e      	ldr	r1, [pc, #312]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bae:	e001      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 809e 	beq.w	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c04:	f7fd f9c6 	bl	8000f94 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fd f9c2 	bl	8000f94 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d15a      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01e      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d019      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd f982 	bl	8000f94 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c92:	e00b      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd f97e 	bl	8000f94 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d902      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	74fb      	strb	r3, [r7, #19]
            break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ec      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cce:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cec:	7c7b      	ldrb	r3, [r7, #17]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	4b9e      	ldr	r3, [pc, #632]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	4a9d      	ldr	r2, [pc, #628]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0a:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 0203 	bic.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4994      	ldr	r1, [pc, #592]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d2c:	4b8f      	ldr	r3, [pc, #572]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 020c 	bic.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	498c      	ldr	r1, [pc, #560]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4e:	4b87      	ldr	r3, [pc, #540]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	4983      	ldr	r1, [pc, #524]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	497b      	ldr	r1, [pc, #492]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4972      	ldr	r1, [pc, #456]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db4:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	496a      	ldr	r1, [pc, #424]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	4961      	ldr	r1, [pc, #388]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df8:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	4959      	ldr	r1, [pc, #356]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	4950      	ldr	r1, [pc, #320]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	4948      	ldr	r1, [pc, #288]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e64:	f023 0203 	bic.w	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	493f      	ldr	r1, [pc, #252]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e80:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8e:	4937      	ldr	r1, [pc, #220]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9e:	d106      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eaa:	60d3      	str	r3, [r2, #12]
 8003eac:	e011      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f8b4 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d028      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ede:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f08:	60d3      	str	r3, [r2, #12]
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f885 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02b      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a02      	ldr	r2, [pc, #8]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	e014      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f853 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01c      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f830 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	4904      	ldr	r1, [pc, #16]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000

0800402c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d10d      	bne.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
       ||
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
       ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d044      	beq.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e041      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d00c      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x6e>
 8004080:	2b03      	cmp	r3, #3
 8004082:	d013      	beq.n	80040ac <RCCEx_PLLSAI1_Config+0x80>
 8004084:	2b01      	cmp	r3, #1
 8004086:	d120      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004088:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11d      	bne.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e01a      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800409a:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040aa:	e013      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c8:	e006      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      break;
 80040ce:	e004      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	430b      	orrs	r3, r1
 80040f6:	4944      	ldr	r1, [pc, #272]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d17c      	bne.n	80041fc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a40      	ldr	r2, [pc, #256]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fc ff41 	bl	8000f94 <HAL_GetTick>
 8004112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004114:	e009      	b.n	800412a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004116:	f7fc ff3d 	bl	8000f94 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d902      	bls.n	800412a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	73fb      	strb	r3, [r7, #15]
        break;
 8004128:	e005      	b.n	8004136 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ef      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d15f      	bne.n	80041fc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800414a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	0211      	lsls	r1, r2, #8
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68d2      	ldr	r2, [r2, #12]
 8004158:	06d2      	lsls	r2, r2, #27
 800415a:	430a      	orrs	r2, r1
 800415c:	492a      	ldr	r1, [pc, #168]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]
 8004162:	e027      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d112      	bne.n	8004190 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416a:	4b27      	ldr	r3, [pc, #156]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004172:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6892      	ldr	r2, [r2, #8]
 800417a:	0211      	lsls	r1, r2, #8
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6912      	ldr	r2, [r2, #16]
 8004180:	0852      	lsrs	r2, r2, #1
 8004182:	3a01      	subs	r2, #1
 8004184:	0552      	lsls	r2, r2, #21
 8004186:	430a      	orrs	r2, r1
 8004188:	491f      	ldr	r1, [pc, #124]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]
 800418e:	e011      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6892      	ldr	r2, [r2, #8]
 80041a0:	0211      	lsls	r1, r2, #8
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6952      	ldr	r2, [r2, #20]
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	430a      	orrs	r2, r1
 80041ae:	4916      	ldr	r1, [pc, #88]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fc fee8 	bl	8000f94 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c6:	e009      	b.n	80041dc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c8:	f7fc fee4 	bl	8000f94 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	73fb      	strb	r3, [r7, #15]
          break;
 80041da:	e005      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4904      	ldr	r1, [pc, #16]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e095      	b.n	800434a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d009      	beq.n	8004244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
 8004236:	e005      	b.n	8004244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fc72 	bl	8000b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004284:	d902      	bls.n	800428c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e002      	b.n	8004292 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800429a:	d007      	beq.n	80042ac <HAL_SPI_Init+0xa0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	ea42 0103 	orr.w	r1, r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0204 	and.w	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004328:	ea42 0103 	orr.w	r1, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e040      	b.n	80043e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fc97 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2224      	movs	r2, #36	; 0x24
 800437e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8bf 	bl	8004514 <UART_SetConfig>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e022      	b.n	80043e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb11 	bl	80049d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fb98 	bl	8004b14 <UART_CheckIdleState>
 80043e4:	4603      	mov	r3, r0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b08a      	sub	sp, #40	; 0x28
 80043f2:	af02      	add	r7, sp, #8
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	2b20      	cmp	r3, #32
 8004404:	f040 8081 	bne.w	800450a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Transmit+0x26>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e079      	b.n	800450c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_UART_Transmit+0x38>
 8004422:	2302      	movs	r3, #2
 8004424:	e072      	b.n	800450c <HAL_UART_Transmit+0x11e>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2221      	movs	r2, #33	; 0x21
 8004438:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800443a:	f7fc fdab 	bl	8000f94 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d108      	bne.n	800446c <HAL_UART_Transmit+0x7e>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e003      	b.n	8004474 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800447c:	e02d      	b.n	80044da <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fb88 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e039      	b.n	800450c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044aa:	b292      	uxth	r2, r2
 80044ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	3302      	adds	r3, #2
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e008      	b.n	80044c8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	b292      	uxth	r2, r2
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1cb      	bne.n	800447e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb54 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e005      	b.n	800450c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	4313      	orrs	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4ba4      	ldr	r3, [pc, #656]	; (80047d4 <UART_SetConfig+0x2c0>)
 8004542:	4013      	ands	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	430b      	orrs	r3, r1
 800454c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a9a      	ldr	r2, [pc, #616]	; (80047d8 <UART_SetConfig+0x2c4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	4313      	orrs	r3, r2
 800457c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a91      	ldr	r2, [pc, #580]	; (80047dc <UART_SetConfig+0x2c8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d121      	bne.n	80045e0 <UART_SetConfig+0xcc>
 800459c:	4b90      	ldr	r3, [pc, #576]	; (80047e0 <UART_SetConfig+0x2cc>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d816      	bhi.n	80045d8 <UART_SetConfig+0xc4>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x9c>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045c7 	.word	0x080045c7
 80045bc:	080045d3 	.word	0x080045d3
 80045c0:	2301      	movs	r3, #1
 80045c2:	76fb      	strb	r3, [r7, #27]
 80045c4:	e0be      	b.n	8004744 <UART_SetConfig+0x230>
 80045c6:	2302      	movs	r3, #2
 80045c8:	76fb      	strb	r3, [r7, #27]
 80045ca:	e0bb      	b.n	8004744 <UART_SetConfig+0x230>
 80045cc:	2304      	movs	r3, #4
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	e0b8      	b.n	8004744 <UART_SetConfig+0x230>
 80045d2:	2308      	movs	r3, #8
 80045d4:	76fb      	strb	r3, [r7, #27]
 80045d6:	e0b5      	b.n	8004744 <UART_SetConfig+0x230>
 80045d8:	2310      	movs	r3, #16
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	bf00      	nop
 80045de:	e0b1      	b.n	8004744 <UART_SetConfig+0x230>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a7f      	ldr	r2, [pc, #508]	; (80047e4 <UART_SetConfig+0x2d0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d134      	bne.n	8004654 <UART_SetConfig+0x140>
 80045ea:	4b7d      	ldr	r3, [pc, #500]	; (80047e0 <UART_SetConfig+0x2cc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d829      	bhi.n	800464c <UART_SetConfig+0x138>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0xec>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	0800464d 	.word	0x0800464d
 8004608:	0800464d 	.word	0x0800464d
 800460c:	0800464d 	.word	0x0800464d
 8004610:	08004641 	.word	0x08004641
 8004614:	0800464d 	.word	0x0800464d
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800464d 	.word	0x0800464d
 8004620:	0800463b 	.word	0x0800463b
 8004624:	0800464d 	.word	0x0800464d
 8004628:	0800464d 	.word	0x0800464d
 800462c:	0800464d 	.word	0x0800464d
 8004630:	08004647 	.word	0x08004647
 8004634:	2300      	movs	r3, #0
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e084      	b.n	8004744 <UART_SetConfig+0x230>
 800463a:	2302      	movs	r3, #2
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e081      	b.n	8004744 <UART_SetConfig+0x230>
 8004640:	2304      	movs	r3, #4
 8004642:	76fb      	strb	r3, [r7, #27]
 8004644:	e07e      	b.n	8004744 <UART_SetConfig+0x230>
 8004646:	2308      	movs	r3, #8
 8004648:	76fb      	strb	r3, [r7, #27]
 800464a:	e07b      	b.n	8004744 <UART_SetConfig+0x230>
 800464c:	2310      	movs	r3, #16
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	bf00      	nop
 8004652:	e077      	b.n	8004744 <UART_SetConfig+0x230>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <UART_SetConfig+0x2d4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d120      	bne.n	80046a0 <UART_SetConfig+0x18c>
 800465e:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <UART_SetConfig+0x2cc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004668:	2b10      	cmp	r3, #16
 800466a:	d00f      	beq.n	800468c <UART_SetConfig+0x178>
 800466c:	2b10      	cmp	r3, #16
 800466e:	d802      	bhi.n	8004676 <UART_SetConfig+0x162>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <UART_SetConfig+0x16c>
 8004674:	e010      	b.n	8004698 <UART_SetConfig+0x184>
 8004676:	2b20      	cmp	r3, #32
 8004678:	d005      	beq.n	8004686 <UART_SetConfig+0x172>
 800467a:	2b30      	cmp	r3, #48	; 0x30
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x17e>
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x184>
 8004680:	2300      	movs	r3, #0
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e05e      	b.n	8004744 <UART_SetConfig+0x230>
 8004686:	2302      	movs	r3, #2
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e05b      	b.n	8004744 <UART_SetConfig+0x230>
 800468c:	2304      	movs	r3, #4
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e058      	b.n	8004744 <UART_SetConfig+0x230>
 8004692:	2308      	movs	r3, #8
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e055      	b.n	8004744 <UART_SetConfig+0x230>
 8004698:	2310      	movs	r3, #16
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	bf00      	nop
 800469e:	e051      	b.n	8004744 <UART_SetConfig+0x230>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a51      	ldr	r2, [pc, #324]	; (80047ec <UART_SetConfig+0x2d8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d120      	bne.n	80046ec <UART_SetConfig+0x1d8>
 80046aa:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <UART_SetConfig+0x2cc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d00f      	beq.n	80046d8 <UART_SetConfig+0x1c4>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d802      	bhi.n	80046c2 <UART_SetConfig+0x1ae>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <UART_SetConfig+0x1b8>
 80046c0:	e010      	b.n	80046e4 <UART_SetConfig+0x1d0>
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d005      	beq.n	80046d2 <UART_SetConfig+0x1be>
 80046c6:	2bc0      	cmp	r3, #192	; 0xc0
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x1ca>
 80046ca:	e00b      	b.n	80046e4 <UART_SetConfig+0x1d0>
 80046cc:	2300      	movs	r3, #0
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e038      	b.n	8004744 <UART_SetConfig+0x230>
 80046d2:	2302      	movs	r3, #2
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e035      	b.n	8004744 <UART_SetConfig+0x230>
 80046d8:	2304      	movs	r3, #4
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e032      	b.n	8004744 <UART_SetConfig+0x230>
 80046de:	2308      	movs	r3, #8
 80046e0:	76fb      	strb	r3, [r7, #27]
 80046e2:	e02f      	b.n	8004744 <UART_SetConfig+0x230>
 80046e4:	2310      	movs	r3, #16
 80046e6:	76fb      	strb	r3, [r7, #27]
 80046e8:	bf00      	nop
 80046ea:	e02b      	b.n	8004744 <UART_SetConfig+0x230>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a39      	ldr	r2, [pc, #228]	; (80047d8 <UART_SetConfig+0x2c4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d124      	bne.n	8004740 <UART_SetConfig+0x22c>
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <UART_SetConfig+0x2cc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004704:	d012      	beq.n	800472c <UART_SetConfig+0x218>
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d802      	bhi.n	8004712 <UART_SetConfig+0x1fe>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <UART_SetConfig+0x20c>
 8004710:	e012      	b.n	8004738 <UART_SetConfig+0x224>
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004716:	d006      	beq.n	8004726 <UART_SetConfig+0x212>
 8004718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800471c:	d009      	beq.n	8004732 <UART_SetConfig+0x21e>
 800471e:	e00b      	b.n	8004738 <UART_SetConfig+0x224>
 8004720:	2300      	movs	r3, #0
 8004722:	76fb      	strb	r3, [r7, #27]
 8004724:	e00e      	b.n	8004744 <UART_SetConfig+0x230>
 8004726:	2302      	movs	r3, #2
 8004728:	76fb      	strb	r3, [r7, #27]
 800472a:	e00b      	b.n	8004744 <UART_SetConfig+0x230>
 800472c:	2304      	movs	r3, #4
 800472e:	76fb      	strb	r3, [r7, #27]
 8004730:	e008      	b.n	8004744 <UART_SetConfig+0x230>
 8004732:	2308      	movs	r3, #8
 8004734:	76fb      	strb	r3, [r7, #27]
 8004736:	e005      	b.n	8004744 <UART_SetConfig+0x230>
 8004738:	2310      	movs	r3, #16
 800473a:	76fb      	strb	r3, [r7, #27]
 800473c:	bf00      	nop
 800473e:	e001      	b.n	8004744 <UART_SetConfig+0x230>
 8004740:	2310      	movs	r3, #16
 8004742:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <UART_SetConfig+0x2c4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f040 8085 	bne.w	800485a <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004750:	7efb      	ldrb	r3, [r7, #27]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d823      	bhi.n	800479e <UART_SetConfig+0x28a>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x248>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004781 	.word	0x08004781
 8004760:	0800479f 	.word	0x0800479f
 8004764:	08004789 	.word	0x08004789
 8004768:	0800479f 	.word	0x0800479f
 800476c:	0800478f 	.word	0x0800478f
 8004770:	0800479f 	.word	0x0800479f
 8004774:	0800479f 	.word	0x0800479f
 8004778:	0800479f 	.word	0x0800479f
 800477c:	08004797 	.word	0x08004797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff f94e 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004784:	6178      	str	r0, [r7, #20]
        break;
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <UART_SetConfig+0x2dc>)
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	e00c      	b.n	80047a8 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478e:	f7ff f8b1 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004792:	6178      	str	r0, [r7, #20]
        break;
 8004794:	e008      	b.n	80047a8 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	617b      	str	r3, [r7, #20]
        break;
 800479c:	e004      	b.n	80047a8 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	76bb      	strb	r3, [r7, #26]
        break;
 80047a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8102 	beq.w	80049b4 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d305      	bcc.n	80047cc <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d913      	bls.n	80047f4 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	76bb      	strb	r3, [r7, #26]
 80047d0:	e0f0      	b.n	80049b4 <UART_SetConfig+0x4a0>
 80047d2:	bf00      	nop
 80047d4:	efff69f3 	.word	0xefff69f3
 80047d8:	40008000 	.word	0x40008000
 80047dc:	40013800 	.word	0x40013800
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40004800 	.word	0x40004800
 80047ec:	40004c00 	.word	0x40004c00
 80047f0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4619      	mov	r1, r3
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	0214      	lsls	r4, r2, #8
 8004806:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800480a:	020b      	lsls	r3, r1, #8
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6852      	ldr	r2, [r2, #4]
 8004810:	0852      	lsrs	r2, r2, #1
 8004812:	4611      	mov	r1, r2
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	eb13 0b01 	adds.w	fp, r3, r1
 800481c:	eb44 0c02 	adc.w	ip, r4, r2
 8004820:	4658      	mov	r0, fp
 8004822:	4661      	mov	r1, ip
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	f7fb fcd0 	bl	80001d4 <__aeabi_uldivmod>
 8004834:	4603      	mov	r3, r0
 8004836:	460c      	mov	r4, r1
 8004838:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d308      	bcc.n	8004854 <UART_SetConfig+0x340>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d204      	bcs.n	8004854 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e0af      	b.n	80049b4 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	76bb      	strb	r3, [r7, #26]
 8004858:	e0ac      	b.n	80049b4 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004862:	d15b      	bne.n	800491c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004864:	7efb      	ldrb	r3, [r7, #27]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d827      	bhi.n	80048ba <UART_SetConfig+0x3a6>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x35c>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7ff f8c4 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004898:	6178      	str	r0, [r7, #20]
        break;
 800489a:	e013      	b.n	80048c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7ff f8d6 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80048a0:	6178      	str	r0, [r7, #20]
        break;
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <UART_SetConfig+0x4b8>)
 80048a6:	617b      	str	r3, [r7, #20]
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7ff f823 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80048ae:	6178      	str	r0, [r7, #20]
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	617b      	str	r3, [r7, #20]
        break;
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	76bb      	strb	r3, [r7, #26]
        break;
 80048c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d074      	beq.n	80049b4 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d916      	bls.n	8004916 <UART_SetConfig+0x402>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d212      	bcs.n	8004916 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f023 030f 	bic.w	r3, r3, #15
 80048f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	b29a      	uxth	r2, r3
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	4313      	orrs	r3, r2
 800490a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	89fa      	ldrh	r2, [r7, #14]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e04e      	b.n	80049b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
 800491a:	e04b      	b.n	80049b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d827      	bhi.n	8004972 <UART_SetConfig+0x45e>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x414>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495d 	.word	0x0800495d
 8004934:	08004973 	.word	0x08004973
 8004938:	08004963 	.word	0x08004963
 800493c:	08004973 	.word	0x08004973
 8004940:	08004973 	.word	0x08004973
 8004944:	08004973 	.word	0x08004973
 8004948:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7ff f868 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004950:	6178      	str	r0, [r7, #20]
        break;
 8004952:	e013      	b.n	800497c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7ff f87a 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e00f      	b.n	800497c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <UART_SetConfig+0x4b8>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e00c      	b.n	800497c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fe ffc7 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e008      	b.n	800497c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e004      	b.n	800497c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	76bb      	strb	r3, [r7, #26]
        break;
 800497a:	bf00      	nop
    }

    if (pclk != 0U)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	085a      	lsrs	r2, r3, #1
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	441a      	add	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d908      	bls.n	80049b0 <UART_SetConfig+0x49c>
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d204      	bcs.n	80049b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e001      	b.n	80049b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80049c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d10a      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b22:	f7fc fa37 	bl	8000f94 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d10e      	bne.n	8004b54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f82a 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e020      	b.n	8004b96 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d10e      	bne.n	8004b80 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f814 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e00a      	b.n	8004b96 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	e05d      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d059      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb8:	f7fc f9ec 	bl	8000f94 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11b      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bdc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e042      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02b      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d123      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c3c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00f      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d092      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c94:	b084      	sub	sp, #16
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	f107 0014 	add.w	r0, r7, #20
 8004ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	b004      	add	sp, #16
 8004cb4:	4770      	bx	lr

08004cb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cc6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004cca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004cf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4013      	ands	r3, r2
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d34:	b084      	sub	sp, #16
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	f107 0014 	add.w	r0, r7, #20
 8004d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	b004      	add	sp, #16
 8004d74:	4770      	bx	lr
	...

08004d78 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b09b      	sub	sp, #108	; 0x6c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d81f      	bhi.n	8004dea <USB_ActivateEndpoint+0x72>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <USB_ActivateEndpoint+0x38>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004df3 	.word	0x08004df3
 8004dbc:	08004dcf 	.word	0x08004dcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dcc:	e012      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004dd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dda:	e00b      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ddc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004de8:	e004      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004df0:	e000      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>
      break;
 8004df2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	b21b      	sxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b21b      	sxth	r3, r3
 8004e3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	7b1b      	ldrb	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 8149 	bne.w	80050fc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8084 	beq.w	8004f7c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	00da      	lsls	r2, r3, #3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	88db      	ldrh	r3, [r3, #6]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	81fb      	strh	r3, [r7, #14]
 8004eb6:	89fb      	ldrh	r3, [r7, #14]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <USB_ActivateEndpoint+0x180>
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	81bb      	strh	r3, [r7, #12]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	89bb      	ldrh	r3, [r7, #12]
 8004ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d020      	beq.n	8004f42 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f16:	813b      	strh	r3, [r7, #8]
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	f083 0320 	eor.w	r3, r3, #32
 8004f1e:	813b      	strh	r3, [r7, #8]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	8013      	strh	r3, [r2, #0]
 8004f40:	e27f      	b.n	8005442 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	897b      	ldrh	r3, [r7, #10]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e262      	b.n	8005442 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00da      	lsls	r2, r3, #3
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	88db      	ldrh	r3, [r3, #6]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	4413      	add	r3, r2
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	00da      	lsls	r2, r3, #3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d112      	bne.n	8005002 <USB_ActivateEndpoint+0x28a>
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e02f      	b.n	8005062 <USB_ActivateEndpoint+0x2ea>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b3e      	cmp	r3, #62	; 0x3e
 8005008:	d813      	bhi.n	8005032 <USB_ActivateEndpoint+0x2ba>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	663b      	str	r3, [r7, #96]	; 0x60
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <USB_ActivateEndpoint+0x2ac>
 800501e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005020:	3301      	adds	r3, #1
 8005022:	663b      	str	r3, [r7, #96]	; 0x60
 8005024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005026:	b29b      	uxth	r3, r3
 8005028:	029b      	lsls	r3, r3, #10
 800502a:	b29a      	uxth	r2, r3
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e017      	b.n	8005062 <USB_ActivateEndpoint+0x2ea>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	663b      	str	r3, [r7, #96]	; 0x60
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <USB_ActivateEndpoint+0x2d4>
 8005046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005048:	3b01      	subs	r3, #1
 800504a:	663b      	str	r3, [r7, #96]	; 0x60
 800504c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800504e:	b29b      	uxth	r3, r3
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	b29b      	uxth	r3, r3
 8005054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505c:	b29a      	uxth	r2, r3
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	83fb      	strh	r3, [r7, #30]
 8005070:	8bfb      	ldrh	r3, [r7, #30]
 8005072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01b      	beq.n	80050b2 <USB_ActivateEndpoint+0x33a>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	83bb      	strh	r3, [r7, #28]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	8bbb      	ldrh	r3, [r7, #28]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	837b      	strh	r3, [r7, #26]
 80050ca:	8b7b      	ldrh	r3, [r7, #26]
 80050cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050d0:	837b      	strh	r3, [r7, #26]
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
 80050d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050d8:	837b      	strh	r3, [r7, #26]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]
 80050fa:	e1a2      	b.n	8005442 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	65bb      	str	r3, [r7, #88]	; 0x58
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005142:	b29b      	uxth	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005148:	4413      	add	r3, r2
 800514a:	65bb      	str	r3, [r7, #88]	; 0x58
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	00da      	lsls	r2, r3, #3
 8005152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005154:	4413      	add	r3, r2
 8005156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515a:	657b      	str	r3, [r7, #84]	; 0x54
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	891b      	ldrh	r3, [r3, #8]
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005176:	b29b      	uxth	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517c:	4413      	add	r3, r2
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00da      	lsls	r2, r3, #3
 8005186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005188:	4413      	add	r3, r2
 800518a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	895b      	ldrh	r3, [r3, #10]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f040 8091 	bne.w	80052cc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01b      	beq.n	80051fa <USB_ActivateEndpoint+0x482>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	873b      	strh	r3, [r7, #56]	; 0x38
 8005208:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01b      	beq.n	800524a <USB_ActivateEndpoint+0x4d2>
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	86fb      	strh	r3, [r7, #54]	; 0x36
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005246:	b29b      	uxth	r3, r3
 8005248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005262:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005268:	86bb      	strh	r3, [r7, #52]	; 0x34
 800526a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800526c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005270:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	441a      	add	r2, r3
 800527c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800527e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528e:	b29b      	uxth	r3, r3
 8005290:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]
 80052ca:	e0ba      	b.n	8005442 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01d      	beq.n	8005324 <USB_ActivateEndpoint+0x5ac>
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005334:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01d      	beq.n	800537c <USB_ActivateEndpoint+0x604>
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	78db      	ldrb	r3, [r3, #3]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d024      	beq.n	80053ce <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800539e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053a2:	f083 0320 	eor.w	r3, r3, #32
 80053a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
 80053cc:	e01d      	b.n	800540a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005442:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005446:	4618      	mov	r0, r3
 8005448:	376c      	adds	r7, #108	; 0x6c
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop

08005454 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005454:	b480      	push	{r7}
 8005456:	b08d      	sub	sp, #52	; 0x34
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	7b1b      	ldrb	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 808e 	bne.w	8005584 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d044      	beq.n	80054fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	81bb      	strh	r3, [r7, #12]
 800547e:	89bb      	ldrh	r3, [r7, #12]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <USB_DeactivateEndpoint+0x6c>
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	817b      	strh	r3, [r7, #10]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d6:	813b      	strh	r3, [r7, #8]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8013      	strh	r3, [r2, #0]
 80054f8:	e192      	b.n	8005820 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	827b      	strh	r3, [r7, #18]
 8005508:	8a7b      	ldrh	r3, [r7, #18]
 800550a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01b      	beq.n	800554a <USB_DeactivateEndpoint+0xf6>
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	823b      	strh	r3, [r7, #16]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	8a3b      	ldrh	r3, [r7, #16]
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	81fb      	strh	r3, [r7, #14]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557e:	b29b      	uxth	r3, r3
 8005580:	8013      	strh	r3, [r2, #0]
 8005582:	e14d      	b.n	8005820 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f040 80a5 	bne.w	80056d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	843b      	strh	r3, [r7, #32]
 800559c:	8c3b      	ldrh	r3, [r7, #32]
 800559e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01b      	beq.n	80055de <USB_DeactivateEndpoint+0x18a>
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	83fb      	strh	r3, [r7, #30]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	8bfb      	ldrh	r3, [r7, #30]
 80055ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	83bb      	strh	r3, [r7, #28]
 80055ec:	8bbb      	ldrh	r3, [r7, #28]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01b      	beq.n	800562e <USB_DeactivateEndpoint+0x1da>
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560c:	837b      	strh	r3, [r7, #26]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	8b7b      	ldrh	r3, [r7, #26]
 800561a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	833b      	strh	r3, [r7, #24]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	8b3b      	ldrh	r3, [r7, #24]
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	82fb      	strh	r3, [r7, #22]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b4:	82bb      	strh	r3, [r7, #20]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	441a      	add	r2, r3
 80056c0:	8abb      	ldrh	r3, [r7, #20]
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]
 80056d6:	e0a3      	b.n	8005820 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <USB_DeactivateEndpoint+0x2d4>
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	b29b      	uxth	r3, r3
 8005726:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <USB_DeactivateEndpoint+0x324>
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	853b      	strh	r3, [r7, #40]	; 0x28
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3734      	adds	r7, #52	; 0x34
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b0c4      	sub	sp, #272	; 0x110
 8005832:	af00      	add	r7, sp, #0
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	6018      	str	r0, [r3, #0]
 8005838:	463b      	mov	r3, r7
 800583a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b01      	cmp	r3, #1
 8005844:	f040 8566 	bne.w	8006314 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d905      	bls.n	8005864 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005862:	e004      	b.n	800586e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d12c      	bne.n	80058d2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6959      	ldr	r1, [r3, #20]
 800587e:	463b      	mov	r3, r7
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	88da      	ldrh	r2, [r3, #6]
 8005884:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005888:	b29b      	uxth	r3, r3
 800588a:	1d38      	adds	r0, r7, #4
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f001 fa58 	bl	8006d42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80058ba:	f107 0310 	add.w	r3, r7, #16
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f107 0310 	add.w	r3, r7, #16
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	f000 bcec 	b.w	80062aa <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	78db      	ldrb	r3, [r3, #3]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f040 8356 	bne.w	8005f8a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1a      	ldr	r2, [r3, #32]
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	f240 82fa 	bls.w	8005ee4 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005928:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005930:	b29b      	uxth	r3, r3
 8005932:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005948:	1ad2      	subs	r2, r2, r3
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 815e 	beq.w	8005c28 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d164      	bne.n	8005a46 <USB_EPStartXfer+0x218>
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	4413      	add	r3, r2
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00da      	lsls	r2, r3, #3
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	4413      	add	r3, r2
 80059a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d112      	bne.n	80059d4 <USB_EPStartXfer+0x1a6>
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e054      	b.n	8005a7e <USB_EPStartXfer+0x250>
 80059d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d8:	2b3e      	cmp	r3, #62	; 0x3e
 80059da:	d817      	bhi.n	8005a0c <USB_EPStartXfer+0x1de>
 80059dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <USB_EPStartXfer+0x1ce>
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f6:	3301      	adds	r3, #1
 80059f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	e038      	b.n	8005a7e <USB_EPStartXfer+0x250>
 8005a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <USB_EPStartXfer+0x1fe>
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a26:	3b01      	subs	r3, #1
 8005a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e01b      	b.n	8005a7e <USB_EPStartXfer+0x250>
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d116      	bne.n	8005a7e <USB_EPStartXfer+0x250>
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	4413      	add	r3, r2
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	00da      	lsls	r2, r3, #3
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
 8005a74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a7e:	463b      	mov	r3, r7
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	895b      	ldrh	r3, [r3, #10]
 8005a84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6959      	ldr	r1, [r3, #20]
 8005a8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a98:	1d38      	adds	r0, r7, #4
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	f001 f951 	bl	8006d42 <USB_WritePMA>
            ep->xfer_buff += len;
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aaa:	441a      	add	r2, r3
 8005aac:	463b      	mov	r3, r7
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a1a      	ldr	r2, [r3, #32]
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d90e      	bls.n	8005ae0 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	e008      	b.n	8005af2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d164      	bne.n	8005bc6 <USB_EPStartXfer+0x398>
 8005afc:	1d3b      	adds	r3, r7, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	00da      	lsls	r2, r3, #3
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d112      	bne.n	8005b54 <USB_EPStartXfer+0x326>
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	801a      	strh	r2, [r3, #0]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e057      	b.n	8005c04 <USB_EPStartXfer+0x3d6>
 8005b54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b58:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5a:	d817      	bhi.n	8005b8c <USB_EPStartXfer+0x35e>
 8005b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <USB_EPStartXfer+0x34e>
 8005b72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b76:	3301      	adds	r3, #1
 8005b78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e03b      	b.n	8005c04 <USB_EPStartXfer+0x3d6>
 8005b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <USB_EPStartXfer+0x37e>
 8005ba2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e01e      	b.n	8005c04 <USB_EPStartXfer+0x3d6>
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d119      	bne.n	8005c04 <USB_EPStartXfer+0x3d6>
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	4413      	add	r3, r2
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	891b      	ldrh	r3, [r3, #8]
 8005c0a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6959      	ldr	r1, [r3, #20]
 8005c14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c1e:	1d38      	adds	r0, r7, #4
 8005c20:	6800      	ldr	r0, [r0, #0]
 8005c22:	f001 f88e 	bl	8006d42 <USB_WritePMA>
 8005c26:	e340      	b.n	80062aa <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d164      	bne.n	8005cfc <USB_EPStartXfer+0x4ce>
 8005c32:	1d3b      	adds	r3, r7, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c38:	1d3b      	adds	r3, r7, #4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	4413      	add	r3, r2
 8005c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d112      	bne.n	8005c8a <USB_EPStartXfer+0x45c>
 8005c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	e057      	b.n	8005d3a <USB_EPStartXfer+0x50c>
 8005c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c90:	d817      	bhi.n	8005cc2 <USB_EPStartXfer+0x494>
 8005c92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <USB_EPStartXfer+0x484>
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	029b      	lsls	r3, r3, #10
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e03b      	b.n	8005d3a <USB_EPStartXfer+0x50c>
 8005cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ccc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <USB_EPStartXfer+0x4b4>
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e01e      	b.n	8005d3a <USB_EPStartXfer+0x50c>
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d119      	bne.n	8005d3a <USB_EPStartXfer+0x50c>
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1a:	4413      	add	r3, r2
 8005d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	00da      	lsls	r2, r3, #3
 8005d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	891b      	ldrh	r3, [r3, #8]
 8005d40:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d54:	1d38      	adds	r0, r7, #4
 8005d56:	6800      	ldr	r0, [r0, #0]
 8005d58:	f000 fff3 	bl	8006d42 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d66:	441a      	add	r2, r3
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d90e      	bls.n	8005d9c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	621a      	str	r2, [r3, #32]
 8005d9a:	e008      	b.n	8005dae <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d164      	bne.n	8005e88 <USB_EPStartXfer+0x65a>
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	4413      	add	r3, r2
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	00da      	lsls	r2, r3, #3
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d112      	bne.n	8005e16 <USB_EPStartXfer+0x5e8>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e054      	b.n	8005ec0 <USB_EPStartXfer+0x692>
 8005e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1c:	d817      	bhi.n	8005e4e <USB_EPStartXfer+0x620>
 8005e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <USB_EPStartXfer+0x610>
 8005e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e38:	3301      	adds	r3, #1
 8005e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	029b      	lsls	r3, r3, #10
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e038      	b.n	8005ec0 <USB_EPStartXfer+0x692>
 8005e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <USB_EPStartXfer+0x640>
 8005e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e01b      	b.n	8005ec0 <USB_EPStartXfer+0x692>
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d116      	bne.n	8005ec0 <USB_EPStartXfer+0x692>
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	4413      	add	r3, r2
 8005ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	00da      	lsls	r2, r3, #3
 8005eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	895b      	ldrh	r3, [r3, #10]
 8005ec6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6959      	ldr	r1, [r3, #20]
 8005ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005eda:	1d38      	adds	r0, r7, #4
 8005edc:	6800      	ldr	r0, [r0, #0]
 8005ede:	f000 ff30 	bl	8006d42 <USB_WritePMA>
 8005ee2:	e1e2      	b.n	80062aa <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	663b      	str	r3, [r7, #96]	; 0x60
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	4413      	add	r3, r2
 8005f48:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00da      	lsls	r2, r3, #3
 8005f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f66:	463b      	mov	r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	891b      	ldrh	r3, [r3, #8]
 8005f6c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f70:	463b      	mov	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6959      	ldr	r1, [r3, #20]
 8005f76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f80:	1d38      	adds	r0, r7, #4
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	f000 fedd 	bl	8006d42 <USB_WritePMA>
 8005f88:	e18f      	b.n	80062aa <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 808f 	beq.w	80060c4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d164      	bne.n	8006080 <USB_EPStartXfer+0x852>
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	673b      	str	r3, [r7, #112]	; 0x70
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fca:	4413      	add	r3, r2
 8005fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	00da      	lsls	r2, r3, #3
 8005fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d112      	bne.n	800600e <USB_EPStartXfer+0x7e0>
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006006:	b29a      	uxth	r2, r3
 8006008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e054      	b.n	80060b8 <USB_EPStartXfer+0x88a>
 800600e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006012:	2b3e      	cmp	r3, #62	; 0x3e
 8006014:	d817      	bhi.n	8006046 <USB_EPStartXfer+0x818>
 8006016:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006020:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <USB_EPStartXfer+0x808>
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	3301      	adds	r3, #1
 8006032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29a      	uxth	r2, r3
 8006040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e038      	b.n	80060b8 <USB_EPStartXfer+0x88a>
 8006046:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <USB_EPStartXfer+0x838>
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	3b01      	subs	r3, #1
 8006062:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	b29b      	uxth	r3, r3
 800606c:	029b      	lsls	r3, r3, #10
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29a      	uxth	r2, r3
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e01b      	b.n	80060b8 <USB_EPStartXfer+0x88a>
 8006080:	463b      	mov	r3, r7
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d116      	bne.n	80060b8 <USB_EPStartXfer+0x88a>
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006098:	4413      	add	r3, r2
 800609a:	67bb      	str	r3, [r7, #120]	; 0x78
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	00da      	lsls	r2, r3, #3
 80060a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a6:	4413      	add	r3, r2
 80060a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060ac:	677b      	str	r3, [r7, #116]	; 0x74
 80060ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	895b      	ldrh	r3, [r3, #10]
 80060be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80060c2:	e097      	b.n	80061f4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d168      	bne.n	80061a0 <USB_EPStartXfer+0x972>
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e6:	4413      	add	r3, r2
 80060e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00da      	lsls	r2, r3, #3
 80060f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006104:	2b00      	cmp	r3, #0
 8006106:	d112      	bne.n	800612e <USB_EPStartXfer+0x900>
 8006108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006112:	b29a      	uxth	r2, r3
 8006114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e05d      	b.n	80061ea <USB_EPStartXfer+0x9bc>
 800612e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006132:	2b3e      	cmp	r3, #62	; 0x3e
 8006134:	d817      	bhi.n	8006166 <USB_EPStartXfer+0x938>
 8006136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <USB_EPStartXfer+0x928>
 800614c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006156:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800615a:	b29b      	uxth	r3, r3
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	b29a      	uxth	r2, r3
 8006160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	e041      	b.n	80061ea <USB_EPStartXfer+0x9bc>
 8006166:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <USB_EPStartXfer+0x958>
 800617c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006180:	3b01      	subs	r3, #1
 8006182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800618a:	b29b      	uxth	r3, r3
 800618c:	029b      	lsls	r3, r3, #10
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e024      	b.n	80061ea <USB_EPStartXfer+0x9bc>
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d11f      	bne.n	80061ea <USB_EPStartXfer+0x9bc>
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c2:	4413      	add	r3, r2
 80061c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	00da      	lsls	r2, r3, #3
 80061d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061ea:	463b      	mov	r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	891b      	ldrh	r3, [r3, #8]
 80061f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f4:	463b      	mov	r3, r7
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6959      	ldr	r1, [r3, #20]
 80061fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006204:	1d38      	adds	r0, r7, #4
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	f000 fd9b 	bl	8006d42 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d122      	bne.n	800625c <USB_EPStartXfer+0xa2e>
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006256:	b29b      	uxth	r3, r3
 8006258:	8013      	strh	r3, [r2, #0]
 800625a:	e026      	b.n	80062aa <USB_EPStartXfer+0xa7c>
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d121      	bne.n	80062aa <USB_EPStartXfer+0xa7c>
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f107 020e 	add.w	r2, r7, #14
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c8:	8013      	strh	r3, [r2, #0]
 80062ca:	f107 030e 	add.w	r3, r7, #14
 80062ce:	f107 020e 	add.w	r2, r7, #14
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	f082 0210 	eor.w	r2, r2, #16
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	f107 030e 	add.w	r3, r7, #14
 80062de:	f107 020e 	add.w	r2, r7, #14
 80062e2:	8812      	ldrh	r2, [r2, #0]
 80062e4:	f082 0220 	eor.w	r2, r2, #32
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	f107 030e 	add.w	r3, r7, #14
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
 8006312:	e3b5      	b.n	8006a80 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	7b1b      	ldrb	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8090 	bne.w	8006440 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d90e      	bls.n	800634e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699a      	ldr	r2, [r3, #24]
 8006340:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	619a      	str	r2, [r3, #24]
 800634c:	e008      	b.n	8006360 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006378:	4413      	add	r3, r2
 800637a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	00da      	lsls	r2, r3, #3
 8006386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800638a:	4413      	add	r3, r2
 800638c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006394:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006398:	2b00      	cmp	r3, #0
 800639a:	d116      	bne.n	80063ca <USB_EPStartXfer+0xb9c>
 800639c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e32c      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
 80063ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063ce:	2b3e      	cmp	r3, #62	; 0x3e
 80063d0:	d818      	bhi.n	8006404 <USB_EPStartXfer+0xbd6>
 80063d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <USB_EPStartXfer+0xbc4>
 80063e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e30f      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
 8006404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800640e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <USB_EPStartXfer+0xbf6>
 800641a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800641e:	3b01      	subs	r3, #1
 8006420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006428:	b29b      	uxth	r3, r3
 800642a:	029b      	lsls	r3, r3, #10
 800642c:	b29b      	uxth	r3, r3
 800642e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006436:	b29a      	uxth	r2, r3
 8006438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e2f1      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b02      	cmp	r3, #2
 8006448:	f040 818f 	bne.w	800676a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d175      	bne.n	8006542 <USB_EPStartXfer+0xd14>
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	00da      	lsls	r2, r3, #3
 800647c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006480:	4413      	add	r3, r2
 8006482:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <USB_EPStartXfer+0xc94>
 8006494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e065      	b.n	800658e <USB_EPStartXfer+0xd60>
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ca:	d81a      	bhi.n	8006502 <USB_EPStartXfer+0xcd4>
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0xcc2>
 80064e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e045      	b.n	800658e <USB_EPStartXfer+0xd60>
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <USB_EPStartXfer+0xcf8>
 800651c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006520:	3b01      	subs	r3, #1
 8006522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006526:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e025      	b.n	800658e <USB_EPStartXfer+0xd60>
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d120      	bne.n	800658e <USB_EPStartXfer+0xd60>
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	00da      	lsls	r2, r3, #3
 8006572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006576:	4413      	add	r3, r2
 8006578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800657c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006580:	463b      	mov	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d175      	bne.n	800668c <USB_EPStartXfer+0xe5e>
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d116      	bne.n	800660c <USB_EPStartXfer+0xdde>
 80065de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e061      	b.n	80066d0 <USB_EPStartXfer+0xea2>
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b3e      	cmp	r3, #62	; 0x3e
 8006614:	d81a      	bhi.n	800664c <USB_EPStartXfer+0xe1e>
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USB_EPStartXfer+0xe0c>
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	b29b      	uxth	r3, r3
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e041      	b.n	80066d0 <USB_EPStartXfer+0xea2>
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USB_EPStartXfer+0xe42>
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	3b01      	subs	r3, #1
 800666c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e021      	b.n	80066d0 <USB_EPStartXfer+0xea2>
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11c      	bne.n	80066d0 <USB_EPStartXfer+0xea2>
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a6:	4413      	add	r3, r2
 80066a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066ce:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 81a4 	beq.w	8006a24 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066dc:	1d3b      	adds	r3, r7, #4
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <USB_EPStartXfer+0xeda>
 80066fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006708:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8187 	bne.w	8006a24 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006716:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 8180 	bne.w	8006a24 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	463b      	mov	r3, r7
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	463b      	mov	r3, r7
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	441a      	add	r2, r3
 8006750:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]
 8006768:	e15c      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	78db      	ldrb	r3, [r3, #3]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 8155 	bne.w	8006a20 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006776:	463b      	mov	r3, r7
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	d90e      	bls.n	80067a4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	e008      	b.n	80067b6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d16f      	bne.n	80068a0 <USB_EPStartXfer+0x1072>
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00da      	lsls	r2, r3, #3
 80067e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d116      	bne.n	800682a <USB_EPStartXfer+0xffc>
 80067fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e05f      	b.n	80068ea <USB_EPStartXfer+0x10bc>
 800682a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682e:	2b3e      	cmp	r3, #62	; 0x3e
 8006830:	d818      	bhi.n	8006864 <USB_EPStartXfer+0x1036>
 8006832:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800683c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <USB_EPStartXfer+0x1024>
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	3301      	adds	r3, #1
 800684e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006856:	b29b      	uxth	r3, r3
 8006858:	029b      	lsls	r3, r3, #10
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e042      	b.n	80068ea <USB_EPStartXfer+0x10bc>
 8006864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800686e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <USB_EPStartXfer+0x1056>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	3b01      	subs	r3, #1
 8006880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	b29b      	uxth	r3, r3
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e024      	b.n	80068ea <USB_EPStartXfer+0x10bc>
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d11f      	bne.n	80068ea <USB_EPStartXfer+0x10bc>
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c2:	4413      	add	r3, r2
 80068c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00da      	lsls	r2, r3, #3
 80068d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d16f      	bne.n	80069dc <USB_EPStartXfer+0x11ae>
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006914:	4413      	add	r3, r2
 8006916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	00da      	lsls	r2, r3, #3
 8006922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006926:	4413      	add	r3, r2
 8006928:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800692c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006930:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006934:	2b00      	cmp	r3, #0
 8006936:	d116      	bne.n	8006966 <USB_EPStartXfer+0x1138>
 8006938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e05e      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
 8006966:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800696a:	2b3e      	cmp	r3, #62	; 0x3e
 800696c:	d818      	bhi.n	80069a0 <USB_EPStartXfer+0x1172>
 800696e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <USB_EPStartXfer+0x1160>
 8006984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006988:	3301      	adds	r3, #1
 800698a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29a      	uxth	r2, r3
 8006998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	e041      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
 80069a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USB_EPStartXfer+0x1192>
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	3b01      	subs	r3, #1
 80069bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e023      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d11e      	bne.n	8006a24 <USB_EPStartXfer+0x11f6>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f6:	4413      	add	r3, r2
 80069f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	00da      	lsls	r2, r3, #3
 8006a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e001      	b.n	8006a24 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e02e      	b.n	8006a82 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a56:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	463b      	mov	r3, r7
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d020      	beq.n	8006ae0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	81bb      	strh	r3, [r7, #12]
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	f083 0310 	eor.w	r3, r3, #16
 8006abc:	81bb      	strh	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	89bb      	ldrh	r3, [r7, #12]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
 8006ade:	e01f      	b.n	8006b20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	81fb      	strh	r3, [r7, #14]
 8006af8:	89fb      	ldrh	r3, [r7, #14]
 8006afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006afe:	81fb      	strh	r3, [r7, #14]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	7b1b      	ldrb	r3, [r3, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 809d 	bne.w	8006c7c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04c      	beq.n	8006be4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	823b      	strh	r3, [r7, #16]
 8006b58:	8a3b      	ldrh	r3, [r7, #16]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01b      	beq.n	8006b9a <USB_EPClearStall+0x6c>
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b78:	81fb      	strh	r3, [r7, #14]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	89fb      	ldrh	r3, [r7, #14]
 8006b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d06c      	beq.n	8006c7c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	81bb      	strh	r3, [r7, #12]
 8006bba:	89bb      	ldrh	r3, [r7, #12]
 8006bbc:	f083 0320 	eor.w	r3, r3, #32
 8006bc0:	81bb      	strh	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	89bb      	ldrh	r3, [r7, #12]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e04b      	b.n	8006c7c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	82fb      	strh	r3, [r7, #22]
 8006bf2:	8afb      	ldrh	r3, [r7, #22]
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_EPClearStall+0x106>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	82bb      	strh	r3, [r7, #20]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8abb      	ldrh	r3, [r7, #20]
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	827b      	strh	r3, [r7, #18]
 8006c4c:	8a7b      	ldrh	r3, [r7, #18]
 8006c4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c52:	827b      	strh	r3, [r7, #18]
 8006c54:	8a7b      	ldrh	r3, [r7, #18]
 8006c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c5a:	827b      	strh	r3, [r7, #18]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	441a      	add	r2, r3
 8006c66:	8a7b      	ldrh	r3, [r7, #18]
 8006c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d103      	bne.n	8006ca4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b08d      	sub	sp, #52	; 0x34
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	460b      	mov	r3, r1
 8006d52:	80fb      	strh	r3, [r7, #6]
 8006d54:	4613      	mov	r3, r2
 8006d56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d58:	88bb      	ldrh	r3, [r7, #4]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d68:	88fa      	ldrh	r2, [r7, #6]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d78:	e01b      	b.n	8006db2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	3301      	adds	r3, #1
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	3302      	adds	r3, #2
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	3301      	adds	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	3b01      	subs	r3, #1
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e0      	bne.n	8006d7a <USB_WritePMA+0x38>
  }
}
 8006db8:	bf00      	nop
 8006dba:	3734      	adds	r7, #52	; 0x34
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b08b      	sub	sp, #44	; 0x2c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	80fb      	strh	r3, [r7, #6]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dda:	88bb      	ldrh	r3, [r7, #4]
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e018      	b.n	8006e2e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	3302      	adds	r3, #2
 8006e08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e3      	bne.n	8006dfc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e34:	88bb      	ldrh	r3, [r7, #4]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	701a      	strb	r2, [r3, #0]
  }
}
 8006e50:	bf00      	nop
 8006e52:	372c      	adds	r7, #44	; 0x2c
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e6c:	f002 f968 	bl	8009140 <malloc>
 8006e70:	4603      	mov	r3, r0
 8006e72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d105      	bne.n	8006e86 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e82:	2302      	movs	r3, #2
 8006e84:	e066      	b.n	8006f54 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7c1b      	ldrb	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d119      	bne.n	8006eca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	2181      	movs	r1, #129	; 0x81
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 ff20 	bl	8008ce4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eae:	2202      	movs	r2, #2
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 ff16 	bl	8008ce4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006ec8:	e016      	b.n	8006ef8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	2202      	movs	r2, #2
 8006ece:	2181      	movs	r1, #129	; 0x81
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 ff07 	bl	8008ce4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	2202      	movs	r2, #2
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fefe 	bl	8008ce4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2210      	movs	r2, #16
 8006ef4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ef8:	2308      	movs	r3, #8
 8006efa:	2203      	movs	r2, #3
 8006efc:	2182      	movs	r1, #130	; 0x82
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fef0 	bl	8008ce4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7c1b      	ldrb	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f38:	2101      	movs	r1, #1
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f002 f84e 	bl	8008fdc <USBD_LL_PrepareReceive>
 8006f40:	e007      	b.n	8006f52 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f48:	2340      	movs	r3, #64	; 0x40
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 f845 	bl	8008fdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f68:	2181      	movs	r1, #129	; 0x81
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fef8 	bl	8008d60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f76:	2101      	movs	r1, #1
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fef1 	bl	8008d60 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f86:	2182      	movs	r1, #130	; 0x82
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fee9 	bl	8008d60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f002 f8c9 	bl	8009150 <free>
    pdev->pClassData = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d03a      	beq.n	8007070 <USBD_CDC_Setup+0xa0>
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	f040 8097 	bne.w	800712e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	88db      	ldrh	r3, [r3, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d029      	beq.n	800705c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	da11      	bge.n	8007036 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800701e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	88d2      	ldrh	r2, [r2, #6]
 8007024:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007026:	6939      	ldr	r1, [r7, #16]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	461a      	mov	r2, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fa5d 	bl	80084ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007034:	e082      	b.n	800713c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	785a      	ldrb	r2, [r3, #1]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	88db      	ldrh	r3, [r3, #6]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800704c:	6939      	ldr	r1, [r7, #16]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	461a      	mov	r2, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fa76 	bl	8008546 <USBD_CtlPrepareRx>
      break;
 800705a:	e06f      	b.n	800713c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	7850      	ldrb	r0, [r2, #1]
 8007068:	2200      	movs	r2, #0
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	4798      	blx	r3
      break;
 800706e:	e065      	b.n	800713c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b0b      	cmp	r3, #11
 8007076:	d84f      	bhi.n	8007118 <USBD_CDC_Setup+0x148>
 8007078:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <USBD_CDC_Setup+0xb0>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070b1 	.word	0x080070b1
 8007084:	08007127 	.word	0x08007127
 8007088:	08007119 	.word	0x08007119
 800708c:	08007119 	.word	0x08007119
 8007090:	08007119 	.word	0x08007119
 8007094:	08007119 	.word	0x08007119
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	08007101 	.word	0x08007101
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d107      	bne.n	80070ca <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070ba:	f107 030c 	add.w	r3, r7, #12
 80070be:	2202      	movs	r2, #2
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fa13 	bl	80084ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070c8:	e030      	b.n	800712c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f99d 	bl	800840c <USBD_CtlError>
            ret = USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	75fb      	strb	r3, [r7, #23]
          break;
 80070d6:	e029      	b.n	800712c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d107      	bne.n	80070f2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070e2:	f107 030f 	add.w	r3, r7, #15
 80070e6:	2201      	movs	r2, #1
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f9ff 	bl	80084ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070f0:	e01c      	b.n	800712c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f989 	bl	800840c <USBD_CtlError>
            ret = USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	75fb      	strb	r3, [r7, #23]
          break;
 80070fe:	e015      	b.n	800712c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007106:	2b03      	cmp	r3, #3
 8007108:	d00f      	beq.n	800712a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 f97d 	bl	800840c <USBD_CtlError>
            ret = USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007116:	e008      	b.n	800712a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 f976 	bl	800840c <USBD_CtlError>
          ret = USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	75fb      	strb	r3, [r7, #23]
          break;
 8007124:	e002      	b.n	800712c <USBD_CDC_Setup+0x15c>
          break;
 8007126:	bf00      	nop
 8007128:	e008      	b.n	800713c <USBD_CDC_Setup+0x16c>
          break;
 800712a:	bf00      	nop
      }
      break;
 800712c:	e006      	b.n	800713c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f96b 	bl	800840c <USBD_CtlError>
      ret = USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	75fb      	strb	r3, [r7, #23]
      break;
 800713a:	bf00      	nop
  }

  return (uint8_t)ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop

08007148 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800715a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	e04f      	b.n	800720a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007170:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	3318      	adds	r3, #24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d029      	beq.n	80071dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	3318      	adds	r3, #24
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	78f9      	ldrb	r1, [r7, #3]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	460b      	mov	r3, r1
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	4403      	add	r3, r0
 80071a8:	3338      	adds	r3, #56	; 0x38
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80071b0:	fb03 f301 	mul.w	r3, r3, r1
 80071b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d110      	bne.n	80071dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3318      	adds	r3, #24
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071ce:	78f9      	ldrb	r1, [r7, #3]
 80071d0:	2300      	movs	r3, #0
 80071d2:	2200      	movs	r2, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fec9 	bl	8008f6c <USBD_LL_Transmit>
 80071da:	e015      	b.n	8007208 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007224:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	e015      	b.n	8007260 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 ff07 	bl	800904c <USBD_LL_GetRxDataSize>
 800723e:	4602      	mov	r2, r0
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800725a:	4611      	mov	r1, r2
 800725c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007276:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d015      	beq.n	80072ae <USBD_CDC_EP0_RxReady+0x46>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007288:	2bff      	cmp	r3, #255	; 0xff
 800728a:	d010      	beq.n	80072ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800729a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072a2:	b292      	uxth	r2, r2
 80072a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	22ff      	movs	r2, #255	; 0xff
 80072aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2243      	movs	r2, #67	; 0x43
 80072c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80072c6:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	20000094 	.word	0x20000094

080072d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2243      	movs	r2, #67	; 0x43
 80072e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80072e6:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20000050 	.word	0x20000050

080072f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2243      	movs	r2, #67	; 0x43
 8007304:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007306:	4b03      	ldr	r3, [pc, #12]	; (8007314 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	200000d8 	.word	0x200000d8

08007318 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	220a      	movs	r2, #10
 8007324:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007326:	4b03      	ldr	r3, [pc, #12]	; (8007334 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	2000000c 	.word	0x2000000c

08007338 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007348:	2303      	movs	r3, #3
 800734a:	e004      	b.n	8007356 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007374:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e016      	b.n	8007408 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ec:	2101      	movs	r1, #1
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fdf4 	bl	8008fdc <USBD_LL_PrepareReceive>
 80073f4:	e007      	b.n	8007406 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	2101      	movs	r1, #1
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fdeb 	bl	8008fdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	e01f      	b.n	8007468 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	79fa      	ldrb	r2, [r7, #7]
 800745a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f001 fbad 	bl	8008bbc <USBD_LL_Init>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007484:	2303      	movs	r3, #3
 8007486:	e016      	b.n	80074b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f107 020e 	add.w	r2, r7, #14
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	4602      	mov	r2, r0
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fbda 	bl	8008c80 <USBD_LL_Start>
 80074cc:	4603      	mov	r3, r0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	4611      	mov	r1, r2
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	4611      	mov	r1, r2
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
  }

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 ff16 	bl	8008398 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2b01      	cmp	r3, #1
 800758e:	d00e      	beq.n	80075ae <USBD_LL_SetupStage+0x5a>
 8007590:	2b01      	cmp	r3, #1
 8007592:	d302      	bcc.n	800759a <USBD_LL_SetupStage+0x46>
 8007594:	2b02      	cmp	r3, #2
 8007596:	d014      	beq.n	80075c2 <USBD_LL_SetupStage+0x6e>
 8007598:	e01d      	b.n	80075d6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9d6 	bl	8007954 <USBD_StdDevReq>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
      break;
 80075ac:	e020      	b.n	80075f0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa3a 	bl	8007a30 <USBD_StdItfReq>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
      break;
 80075c0:	e016      	b.n	80075f0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa76 	bl	8007abc <USBD_StdEPReq>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	e00c      	b.n	80075f0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fbf1 	bl	8008dcc <USBD_LL_StallEP>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	bf00      	nop
  }

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	460b      	mov	r3, r1
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d137      	bne.n	800767e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007614:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800761c:	2b03      	cmp	r3, #3
 800761e:	d14a      	bne.n	80076b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	429a      	cmp	r2, r3
 800762a:	d913      	bls.n	8007654 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	1ad2      	subs	r2, r2, r3
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	4293      	cmp	r3, r2
 8007644:	bf28      	it	cs
 8007646:	4613      	movcs	r3, r2
 8007648:	461a      	mov	r2, r3
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 ff97 	bl	8008580 <USBD_CtlContinueRx>
 8007652:	e030      	b.n	80076b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007666:	2b03      	cmp	r3, #3
 8007668:	d105      	bne.n	8007676 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 ff93 	bl	80085a2 <USBD_CtlSendStatus>
 800767c:	e01b      	b.n	80076b6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d013      	beq.n	80076b2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007690:	2b03      	cmp	r3, #3
 8007692:	d10e      	bne.n	80076b2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	7afa      	ldrb	r2, [r7, #11]
 800769e:	4611      	mov	r1, r2
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	4798      	blx	r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	e002      	b.n	80076b8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e000      	b.n	80076b8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	460b      	mov	r3, r1
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d16a      	bne.n	80077aa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3314      	adds	r3, #20
 80076d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d155      	bne.n	8007790 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d914      	bls.n	800771a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	461a      	mov	r2, r3
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 ff0c 	bl	8008524 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f001 fc62 	bl	8008fdc <USBD_LL_PrepareReceive>
 8007718:	e03a      	b.n	8007790 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d11c      	bne.n	8007760 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800772e:	429a      	cmp	r2, r3
 8007730:	d316      	bcc.n	8007760 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800773c:	429a      	cmp	r2, r3
 800773e:	d20f      	bcs.n	8007760 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007740:	2200      	movs	r2, #0
 8007742:	2100      	movs	r1, #0
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 feed 	bl	8008524 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fc3f 	bl	8008fdc <USBD_LL_PrepareReceive>
 800775e:	e017      	b.n	8007790 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007772:	2b03      	cmp	r3, #3
 8007774:	d105      	bne.n	8007782 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007782:	2180      	movs	r1, #128	; 0x80
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 fb21 	bl	8008dcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 ff1c 	bl	80085c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007796:	2b01      	cmp	r3, #1
 8007798:	d123      	bne.n	80077e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fe9b 	bl	80074d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077a8:	e01b      	b.n	80077e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d013      	beq.n	80077de <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d10e      	bne.n	80077de <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	7afa      	ldrb	r2, [r7, #11]
 80077ca:	4611      	mov	r1, r2
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	4798      	blx	r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	e002      	b.n	80077e4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	e000      	b.n	80077e4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6852      	ldr	r2, [r2, #4]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	4611      	mov	r1, r2
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	2200      	movs	r2, #0
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fa54 	bl	8008ce4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	; 0x40
 8007848:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	2200      	movs	r2, #0
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 fa46 	bl	8008ce4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2240      	movs	r2, #64	; 0x40
 8007862:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2204      	movs	r2, #4
 80078a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d105      	bne.n	80078d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d10b      	bne.n	800790e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	3301      	adds	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007936:	8a3b      	ldrh	r3, [r7, #16]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b21a      	sxth	r2, r3
 800793c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007940:	4313      	orrs	r3, r2
 8007942:	b21b      	sxth	r3, r3
 8007944:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007946:	89fb      	ldrh	r3, [r7, #14]
}
 8007948:	4618      	mov	r0, r3
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800796a:	2b20      	cmp	r3, #32
 800796c:	d004      	beq.n	8007978 <USBD_StdDevReq+0x24>
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d002      	beq.n	8007978 <USBD_StdDevReq+0x24>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <USBD_StdDevReq+0x38>
 8007976:	e050      	b.n	8007a1a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
    break;
 800798a:	e04b      	b.n	8007a24 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b09      	cmp	r3, #9
 8007992:	d83c      	bhi.n	8007a0e <USBD_StdDevReq+0xba>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <USBD_StdDevReq+0x48>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079f1 	.word	0x080079f1
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a0f 	.word	0x08007a0f
 80079a8:	080079fb 	.word	0x080079fb
 80079ac:	08007a0f 	.word	0x08007a0f
 80079b0:	080079cf 	.word	0x080079cf
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	08007a0f 	.word	0x08007a0f
 80079bc:	080079e7 	.word	0x080079e7
 80079c0:	080079d9 	.word	0x080079d9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9d0 	bl	8007d6c <USBD_GetDescriptor>
      break;
 80079cc:	e024      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fb5f 	bl	8008094 <USBD_SetAddress>
      break;
 80079d6:	e01f      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fb9c 	bl	8008118 <USBD_SetConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
      break;
 80079e4:	e018      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc39 	bl	8008260 <USBD_GetConfig>
      break;
 80079ee:	e013      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc68 	bl	80082c8 <USBD_GetStatus>
      break;
 80079f8:	e00e      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc96 	bl	800832e <USBD_SetFeature>
      break;
 8007a02:	e009      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fca5 	bl	8008356 <USBD_ClrFeature>
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fcfb 	bl	800840c <USBD_CtlError>
      break;
 8007a16:	bf00      	nop
    }
    break;
 8007a18:	e004      	b.n	8007a24 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fcf5 	bl	800840c <USBD_CtlError>
    break;
 8007a22:	bf00      	nop
  }

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop

08007a30 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d003      	beq.n	8007a52 <USBD_StdItfReq+0x22>
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d001      	beq.n	8007a52 <USBD_StdItfReq+0x22>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d12a      	bne.n	8007aa8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d81d      	bhi.n	8007a9a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	889b      	ldrh	r3, [r3, #4]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d813      	bhi.n	8007a90 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	88db      	ldrh	r3, [r3, #6]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d110      	bne.n	8007aa4 <USBD_StdItfReq+0x74>
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10d      	bne.n	8007aa4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fd8a 	bl	80085a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007a8e:	e009      	b.n	8007aa4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fcba 	bl	800840c <USBD_CtlError>
      break;
 8007a98:	e004      	b.n	8007aa4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fcb5 	bl	800840c <USBD_CtlError>
      break;
 8007aa2:	e000      	b.n	8007aa6 <USBD_StdItfReq+0x76>
      break;
 8007aa4:	bf00      	nop
    }
    break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fcae 	bl	800840c <USBD_CtlError>
    break;
 8007ab0:	bf00      	nop
  }

  return ret;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	889b      	ldrh	r3, [r3, #4]
 8007ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d004      	beq.n	8007ae6 <USBD_StdEPReq+0x2a>
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d002      	beq.n	8007ae6 <USBD_StdEPReq+0x2a>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <USBD_StdEPReq+0x3e>
 8007ae4:	e137      	b.n	8007d56 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
    break;
 8007af8:	e132      	b.n	8007d60 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d03e      	beq.n	8007b80 <USBD_StdEPReq+0xc4>
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d002      	beq.n	8007b0c <USBD_StdEPReq+0x50>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d079      	beq.n	8007bfe <USBD_StdEPReq+0x142>
 8007b0a:	e11e      	b.n	8007d4a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d002      	beq.n	8007b1c <USBD_StdEPReq+0x60>
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d015      	beq.n	8007b46 <USBD_StdEPReq+0x8a>
 8007b1a:	e02b      	b.n	8007b74 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <USBD_StdEPReq+0x80>
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d009      	beq.n	8007b3c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f94d 	bl	8008dcc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b32:	2180      	movs	r1, #128	; 0x80
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f949 	bl	8008dcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b3a:	e020      	b.n	8007b7e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc64 	bl	800840c <USBD_CtlError>
        break;
 8007b44:	e01b      	b.n	8007b7e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10e      	bne.n	8007b6c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_StdEPReq+0xb0>
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b80      	cmp	r3, #128	; 0x80
 8007b58:	d008      	beq.n	8007b6c <USBD_StdEPReq+0xb0>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f930 	bl	8008dcc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fd18 	bl	80085a2 <USBD_CtlSendStatus>

        break;
 8007b72:	e004      	b.n	8007b7e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fc48 	bl	800840c <USBD_CtlError>
        break;
 8007b7c:	bf00      	nop
      }
      break;
 8007b7e:	e0e9      	b.n	8007d54 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0xd4>
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d015      	beq.n	8007bba <USBD_StdEPReq+0xfe>
 8007b8e:	e02f      	b.n	8007bf0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <USBD_StdEPReq+0xf4>
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d009      	beq.n	8007bb0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f913 	bl	8008dcc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ba6:	2180      	movs	r1, #128	; 0x80
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f90f 	bl	8008dcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007bae:	e025      	b.n	8007bfc <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc2a 	bl	800840c <USBD_CtlError>
        break;
 8007bb8:	e020      	b.n	8007bfc <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11b      	bne.n	8007bfa <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f931 	bl	8008e38 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fce3 	bl	80085a2 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bee:	e004      	b.n	8007bfa <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc0a 	bl	800840c <USBD_CtlError>
        break;
 8007bf8:	e000      	b.n	8007bfc <USBD_StdEPReq+0x140>
        break;
 8007bfa:	bf00      	nop
      }
      break;
 8007bfc:	e0aa      	b.n	8007d54 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d002      	beq.n	8007c0e <USBD_StdEPReq+0x152>
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d032      	beq.n	8007c72 <USBD_StdEPReq+0x1b6>
 8007c0c:	e097      	b.n	8007d3e <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <USBD_StdEPReq+0x168>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b80      	cmp	r3, #128	; 0x80
 8007c18:	d004      	beq.n	8007c24 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbf5 	bl	800840c <USBD_CtlError>
          break;
 8007c22:	e091      	b.n	8007d48 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0b      	bge.n	8007c44 <USBD_StdEPReq+0x188>
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	e00b      	b.n	8007c5c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc3f 	bl	80084ee <USBD_CtlSendData>
        break;
 8007c70:	e06a      	b.n	8007d48 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da11      	bge.n	8007c9e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	f003 020f 	and.w	r2, r3, #15
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3324      	adds	r3, #36	; 0x24
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d117      	bne.n	8007cc4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fbb8 	bl	800840c <USBD_CtlError>
            break;
 8007c9c:	e054      	b.n	8007d48 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fba5 	bl	800840c <USBD_CtlError>
            break;
 8007cc2:	e041      	b.n	8007d48 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da0b      	bge.n	8007ce4 <USBD_StdEPReq+0x228>
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	3310      	adds	r3, #16
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4413      	add	r3, r2
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	e00b      	b.n	8007cfc <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <USBD_StdEPReq+0x24e>
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d103      	bne.n	8007d12 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e00e      	b.n	8007d30 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 f8c4 	bl	8008ea4 <USBD_LL_IsStallEP>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2201      	movs	r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e002      	b.n	8007d30 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2202      	movs	r2, #2
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fbd9 	bl	80084ee <USBD_CtlSendData>
          break;
 8007d3c:	e004      	b.n	8007d48 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fb63 	bl	800840c <USBD_CtlError>
        break;
 8007d46:	bf00      	nop
      }
      break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fb5d 	bl	800840c <USBD_CtlError>
      break;
 8007d52:	bf00      	nop
    }
    break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb57 	bl	800840c <USBD_CtlError>
    break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	2b0e      	cmp	r3, #14
 8007d8e:	f200 8152 	bhi.w	8008036 <USBD_GetDescriptor+0x2ca>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USBD_GetDescriptor+0x2c>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e61 	.word	0x08007e61
 8007da4:	08008037 	.word	0x08008037
 8007da8:	08008037 	.word	0x08008037
 8007dac:	08007fd7 	.word	0x08007fd7
 8007db0:	08008003 	.word	0x08008003
 8007db4:	08008037 	.word	0x08008037
 8007db8:	08008037 	.word	0x08008037
 8007dbc:	08008037 	.word	0x08008037
 8007dc0:	08008037 	.word	0x08008037
 8007dc4:	08008037 	.word	0x08008037
 8007dc8:	08008037 	.word	0x08008037
 8007dcc:	08008037 	.word	0x08008037
 8007dd0:	08007dd5 	.word	0x08007dd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007df6:	e126      	b.n	8008046 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb06 	bl	800840c <USBD_CtlError>
      err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
    break;
 8007e06:	e11e      	b.n	8008046 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
    break;
 8007e1e:	e112      	b.n	8008046 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7c1b      	ldrb	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10d      	bne.n	8007e44 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f107 0208 	add.w	r2, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	2202      	movs	r2, #2
 8007e40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007e42:	e100      	b.n	8008046 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	f107 0208 	add.w	r2, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	701a      	strb	r2, [r3, #0]
    break;
 8007e5e:	e0f2      	b.n	8008046 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	f200 80ac 	bhi.w	8007fc4 <USBD_GetDescriptor+0x258>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <USBD_GetDescriptor+0x108>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f5d 	.word	0x08007f5d
 8007e88:	08007f91 	.word	0x08007f91
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eae:	e091      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 faaa 	bl	800840c <USBD_CtlError>
        err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
      break;
 8007ebe:	e089      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee2:	e077      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa90 	bl	800840c <USBD_CtlError>
        err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef2:	e06f      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	7c12      	ldrb	r2, [r2, #16]
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f16:	e05d      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa76 	bl	800840c <USBD_CtlError>
        err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
      break;
 8007f26:	e055      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f4a:	e043      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa5c 	bl	800840c <USBD_CtlError>
        err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5a:	e03b      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7e:	e029      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa42 	bl	800840c <USBD_CtlError>
        err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8e:	e021      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb2:	e00f      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa28 	bl	800840c <USBD_CtlError>
        err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc2:	e007      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa20 	bl	800840c <USBD_CtlError>
      err++;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007fd2:	bf00      	nop
    }
    break;
 8007fd4:	e037      	b.n	8008046 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7c1b      	ldrb	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	f107 0208 	add.w	r2, r7, #8
 8007fea:	4610      	mov	r0, r2
 8007fec:	4798      	blx	r3
 8007fee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ff0:	e029      	b.n	8008046 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa09 	bl	800840c <USBD_CtlError>
      err++;
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	72fb      	strb	r3, [r7, #11]
    break;
 8008000:	e021      	b.n	8008046 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7c1b      	ldrb	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10d      	bne.n	8008026 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f107 0208 	add.w	r2, r7, #8
 8008016:	4610      	mov	r0, r2
 8008018:	4798      	blx	r3
 800801a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	2207      	movs	r2, #7
 8008022:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008024:	e00f      	b.n	8008046 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f9ef 	bl	800840c <USBD_CtlError>
      err++;
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	3301      	adds	r3, #1
 8008032:	72fb      	strb	r3, [r7, #11]
    break;
 8008034:	e007      	b.n	8008046 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9e7 	bl	800840c <USBD_CtlError>
    err++;
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	3301      	adds	r3, #1
 8008042:	72fb      	strb	r3, [r7, #11]
    break;
 8008044:	bf00      	nop
  }

  if (err != 0U)
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11e      	bne.n	800808a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	88db      	ldrh	r3, [r3, #6]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d016      	beq.n	8008082 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008054:	893b      	ldrh	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	88da      	ldrh	r2, [r3, #6]
 800805e:	893b      	ldrh	r3, [r7, #8]
 8008060:	4293      	cmp	r3, r2
 8008062:	bf28      	it	cs
 8008064:	4613      	movcs	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800806a:	893b      	ldrh	r3, [r7, #8]
 800806c:	461a      	mov	r2, r3
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa3c 	bl	80084ee <USBD_CtlSendData>
 8008076:	e009      	b.n	800808c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f9c6 	bl	800840c <USBD_CtlError>
 8008080:	e004      	b.n	800808c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa8d 	bl	80085a2 <USBD_CtlSendStatus>
 8008088:	e000      	b.n	800808c <USBD_GetDescriptor+0x320>
    return;
 800808a:	bf00      	nop
    }
  }
}
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d130      	bne.n	8008108 <USBD_SetAddress+0x74>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88db      	ldrh	r3, [r3, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d12c      	bne.n	8008108 <USBD_SetAddress+0x74>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b7f      	cmp	r3, #127	; 0x7f
 80080b4:	d828      	bhi.n	8008108 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d104      	bne.n	80080d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f99c 	bl	800840c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d4:	e01c      	b.n	8008110 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7bfa      	ldrb	r2, [r7, #15]
 80080da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ff0c 	bl	8008f00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa5a 	bl	80085a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fc:	e008      	b.n	8008110 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008106:	e003      	b.n	8008110 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f97e 	bl	800840c <USBD_CtlError>
  }
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	4b4b      	ldr	r3, [pc, #300]	; (800825c <USBD_SetConfig+0x144>)
 800812e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008130:	4b4a      	ldr	r3, [pc, #296]	; (800825c <USBD_SetConfig+0x144>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d905      	bls.n	8008144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f966 	bl	800840c <USBD_CtlError>
    return USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	e087      	b.n	8008254 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814a:	2b02      	cmp	r3, #2
 800814c:	d002      	beq.n	8008154 <USBD_SetConfig+0x3c>
 800814e:	2b03      	cmp	r3, #3
 8008150:	d025      	beq.n	800819e <USBD_SetConfig+0x86>
 8008152:	e071      	b.n	8008238 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008154:	4b41      	ldr	r3, [pc, #260]	; (800825c <USBD_SetConfig+0x144>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01c      	beq.n	8008196 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800815c:	4b3f      	ldr	r3, [pc, #252]	; (800825c <USBD_SetConfig+0x144>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008166:	4b3d      	ldr	r3, [pc, #244]	; (800825c <USBD_SetConfig+0x144>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff f9bd 	bl	80074ec <USBD_SetClassConfig>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f944 	bl	800840c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008184:	e065      	b.n	8008252 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa0b 	bl	80085a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2203      	movs	r2, #3
 8008190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008194:	e05d      	b.n	8008252 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa03 	bl	80085a2 <USBD_CtlSendStatus>
    break;
 800819c:	e059      	b.n	8008252 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800819e:	4b2f      	ldr	r3, [pc, #188]	; (800825c <USBD_SetConfig+0x144>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d112      	bne.n	80081cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80081ae:	4b2b      	ldr	r3, [pc, #172]	; (800825c <USBD_SetConfig+0x144>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081b8:	4b28      	ldr	r3, [pc, #160]	; (800825c <USBD_SetConfig+0x144>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff f9b0 	bl	8007524 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f9ec 	bl	80085a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80081ca:	e042      	b.n	8008252 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80081cc:	4b23      	ldr	r3, [pc, #140]	; (800825c <USBD_SetConfig+0x144>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d02a      	beq.n	8008230 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff f99e 	bl	8007524 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <USBD_SetConfig+0x144>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <USBD_SetConfig+0x144>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff f977 	bl	80074ec <USBD_SetClassConfig>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00f      	beq.n	8008228 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f8fe 	bl	800840c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff f983 	bl	8007524 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008226:	e014      	b.n	8008252 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f9ba 	bl	80085a2 <USBD_CtlSendStatus>
    break;
 800822e:	e010      	b.n	8008252 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f9b6 	bl	80085a2 <USBD_CtlSendStatus>
    break;
 8008236:	e00c      	b.n	8008252 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8e6 	bl	800840c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <USBD_SetConfig+0x144>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff f96c 	bl	8007524 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	bf00      	nop
  }

  return ret;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20000214 	.word	0x20000214

08008260 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88db      	ldrh	r3, [r3, #6]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d004      	beq.n	800827c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f8c9 	bl	800840c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800827a:	e021      	b.n	80082c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008282:	2b01      	cmp	r3, #1
 8008284:	db17      	blt.n	80082b6 <USBD_GetConfig+0x56>
 8008286:	2b02      	cmp	r3, #2
 8008288:	dd02      	ble.n	8008290 <USBD_GetConfig+0x30>
 800828a:	2b03      	cmp	r3, #3
 800828c:	d00b      	beq.n	80082a6 <USBD_GetConfig+0x46>
 800828e:	e012      	b.n	80082b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3308      	adds	r3, #8
 800829a:	2201      	movs	r2, #1
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f925 	bl	80084ee <USBD_CtlSendData>
      break;
 80082a4:	e00c      	b.n	80082c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2201      	movs	r2, #1
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f91d 	bl	80084ee <USBD_CtlSendData>
      break;
 80082b4:	e004      	b.n	80082c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8a7 	bl	800840c <USBD_CtlError>
      break;
 80082be:	bf00      	nop
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d81e      	bhi.n	800831c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d004      	beq.n	80082f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f88f 	bl	800840c <USBD_CtlError>
      break;
 80082ee:	e01a      	b.n	8008326 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f043 0202 	orr.w	r2, r3, #2
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	330c      	adds	r3, #12
 8008310:	2202      	movs	r2, #2
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8ea 	bl	80084ee <USBD_CtlSendData>
    break;
 800831a:	e004      	b.n	8008326 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f874 	bl	800840c <USBD_CtlError>
    break;
 8008324:	bf00      	nop
  }
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d106      	bne.n	800834e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f92a 	bl	80085a2 <USBD_CtlSendStatus>
  }
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008366:	3b01      	subs	r3, #1
 8008368:	2b02      	cmp	r3, #2
 800836a:	d80b      	bhi.n	8008384 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d10c      	bne.n	800838e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f910 	bl	80085a2 <USBD_CtlSendStatus>
      }
      break;
 8008382:	e004      	b.n	800838e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f840 	bl	800840c <USBD_CtlError>
      break;
 800838c:	e000      	b.n	8008390 <USBD_ClrFeature+0x3a>
      break;
 800838e:	bf00      	nop
  }
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff faa8 	bl	8007918 <SWAPBYTE>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fa9b 	bl	8007918 <SWAPBYTE>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fa8e 	bl	8007918 <SWAPBYTE>
 80083fc:	4603      	mov	r3, r0
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	80da      	strh	r2, [r3, #6]
}
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008416:	2180      	movs	r1, #128	; 0x80
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fcd7 	bl	8008dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800841e:	2100      	movs	r1, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fcd3 	bl	8008dcc <USBD_LL_StallEP>
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d036      	beq.n	80084b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008448:	6938      	ldr	r0, [r7, #16]
 800844a:	f000 f836 	bl	80084ba <USBD_GetLen>
 800844e:	4603      	mov	r3, r0
 8008450:	3301      	adds	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	701a      	strb	r2, [r3, #0]
  idx++;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	3301      	adds	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4413      	add	r3, r2
 8008474:	2203      	movs	r2, #3
 8008476:	701a      	strb	r2, [r3, #0]
  idx++;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	3301      	adds	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800847e:	e013      	b.n	80084a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	4413      	add	r3, r2
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3301      	adds	r3, #1
 8008490:	613b      	str	r3, [r7, #16]
    idx++;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	3301      	adds	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e7      	bne.n	8008480 <USBD_GetString+0x52>
 80084b0:	e000      	b.n	80084b4 <USBD_GetString+0x86>
    return;
 80084b2:	bf00      	nop
  }
}
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084ca:	e005      	b.n	80084d8 <USBD_GetLen+0x1e>
  {
    len++;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	3301      	adds	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	3301      	adds	r3, #1
 80084d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f5      	bne.n	80084cc <USBD_GetLen+0x12>
  }

  return len;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	2100      	movs	r1, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fd29 	bl	8008f6c <USBD_LL_Transmit>

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	2100      	movs	r1, #0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fd18 	bl	8008f6c <USBD_LL_Transmit>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2203      	movs	r2, #3
 8008556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	2100      	movs	r1, #0
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fd33 	bl	8008fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	2100      	movs	r1, #0
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fd22 	bl	8008fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2204      	movs	r2, #4
 80085ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085b2:	2300      	movs	r3, #0
 80085b4:	2200      	movs	r2, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fcd7 	bl	8008f6c <USBD_LL_Transmit>

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2205      	movs	r2, #5
 80085d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	2100      	movs	r1, #0
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fcfc 	bl	8008fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4912      	ldr	r1, [pc, #72]	; (8008640 <MX_USB_DEVICE_Init+0x50>)
 80085f8:	4812      	ldr	r0, [pc, #72]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe ff09 	bl	8007410 <USBD_Init>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008604:	f7f8 fa17 	bl	8000a36 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008608:	490f      	ldr	r1, [pc, #60]	; (8008648 <MX_USB_DEVICE_Init+0x58>)
 800860a:	480e      	ldr	r0, [pc, #56]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800860c:	f7fe ff30 	bl	8007470 <USBD_RegisterClass>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008616:	f7f8 fa0e 	bl	8000a36 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800861a:	490c      	ldr	r1, [pc, #48]	; (800864c <MX_USB_DEVICE_Init+0x5c>)
 800861c:	4809      	ldr	r0, [pc, #36]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800861e:	f7fe fe8b 	bl	8007338 <USBD_CDC_RegisterInterface>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008628:	f7f8 fa05 	bl	8000a36 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800862c:	4805      	ldr	r0, [pc, #20]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800862e:	f7fe ff46 	bl	80074be <USBD_Start>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008638:	f7f8 f9fd 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800863c:	bf00      	nop
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000130 	.word	0x20000130
 8008644:	200003b8 	.word	0x200003b8
 8008648:	20000018 	.word	0x20000018
 800864c:	2000011c 	.word	0x2000011c

08008650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008654:	2200      	movs	r2, #0
 8008656:	4905      	ldr	r1, [pc, #20]	; (800866c <CDC_Init_FS+0x1c>)
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <CDC_Init_FS+0x20>)
 800865a:	f7fe fe82 	bl	8007362 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800865e:	4905      	ldr	r1, [pc, #20]	; (8008674 <CDC_Init_FS+0x24>)
 8008660:	4803      	ldr	r0, [pc, #12]	; (8008670 <CDC_Init_FS+0x20>)
 8008662:	f7fe fe97 	bl	8007394 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008668:	4618      	mov	r0, r3
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000e88 	.word	0x20000e88
 8008670:	200003b8 	.word	0x200003b8
 8008674:	20000688 	.word	0x20000688

08008678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800867c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
 8008694:	4613      	mov	r3, r2
 8008696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b23      	cmp	r3, #35	; 0x23
 800869c:	d84a      	bhi.n	8008734 <CDC_Control_FS+0xac>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <CDC_Control_FS+0x1c>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	08008735 	.word	0x08008735
 80086a8:	08008735 	.word	0x08008735
 80086ac:	08008735 	.word	0x08008735
 80086b0:	08008735 	.word	0x08008735
 80086b4:	08008735 	.word	0x08008735
 80086b8:	08008735 	.word	0x08008735
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008735 	.word	0x08008735
 80086c4:	08008735 	.word	0x08008735
 80086c8:	08008735 	.word	0x08008735
 80086cc:	08008735 	.word	0x08008735
 80086d0:	08008735 	.word	0x08008735
 80086d4:	08008735 	.word	0x08008735
 80086d8:	08008735 	.word	0x08008735
 80086dc:	08008735 	.word	0x08008735
 80086e0:	08008735 	.word	0x08008735
 80086e4:	08008735 	.word	0x08008735
 80086e8:	08008735 	.word	0x08008735
 80086ec:	08008735 	.word	0x08008735
 80086f0:	08008735 	.word	0x08008735
 80086f4:	08008735 	.word	0x08008735
 80086f8:	08008735 	.word	0x08008735
 80086fc:	08008735 	.word	0x08008735
 8008700:	08008735 	.word	0x08008735
 8008704:	08008735 	.word	0x08008735
 8008708:	08008735 	.word	0x08008735
 800870c:	08008735 	.word	0x08008735
 8008710:	08008735 	.word	0x08008735
 8008714:	08008735 	.word	0x08008735
 8008718:	08008735 	.word	0x08008735
 800871c:	08008735 	.word	0x08008735
 8008720:	08008735 	.word	0x08008735
 8008724:	08008735 	.word	0x08008735
 8008728:	08008735 	.word	0x08008735
 800872c:	08008735 	.word	0x08008735
 8008730:	08008735 	.word	0x08008735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008734:	bf00      	nop
  }

  return (USBD_OK);
 8008736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <CDC_Receive_FS+0x24>)
 8008752:	f7fe fe1f 	bl	8007394 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008756:	4804      	ldr	r0, [pc, #16]	; (8008768 <CDC_Receive_FS+0x24>)
 8008758:	f7fe fe30 	bl	80073bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800875c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200003b8 	.word	0x200003b8

0800876c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800877e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2212      	movs	r2, #18
 80087a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000150 	.word	0x20000150

080087b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2204      	movs	r2, #4
 80087c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087c6:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	20000170 	.word	0x20000170

080087d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d105      	bne.n	80087f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4907      	ldr	r1, [pc, #28]	; (800880c <USBD_FS_ProductStrDescriptor+0x34>)
 80087ee:	4808      	ldr	r0, [pc, #32]	; (8008810 <USBD_FS_ProductStrDescriptor+0x38>)
 80087f0:	f7ff fe1d 	bl	800842e <USBD_GetString>
 80087f4:	e004      	b.n	8008800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	4904      	ldr	r1, [pc, #16]	; (800880c <USBD_FS_ProductStrDescriptor+0x34>)
 80087fa:	4805      	ldr	r0, [pc, #20]	; (8008810 <USBD_FS_ProductStrDescriptor+0x38>)
 80087fc:	f7ff fe17 	bl	800842e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008800:	4b02      	ldr	r3, [pc, #8]	; (800880c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20001688 	.word	0x20001688
 8008810:	08009308 	.word	0x08009308

08008814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	4904      	ldr	r1, [pc, #16]	; (8008834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008824:	4804      	ldr	r0, [pc, #16]	; (8008838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008826:	f7ff fe02 	bl	800842e <USBD_GetString>
  return USBD_StrDesc;
 800882a:	4b02      	ldr	r3, [pc, #8]	; (8008834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20001688 	.word	0x20001688
 8008838:	08009318 	.word	0x08009318

0800883c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	221a      	movs	r2, #26
 800884c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800884e:	f000 f855 	bl	80088fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008852:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000174 	.word	0x20000174

08008860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4907      	ldr	r1, [pc, #28]	; (8008894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008876:	4808      	ldr	r0, [pc, #32]	; (8008898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008878:	f7ff fdd9 	bl	800842e <USBD_GetString>
 800887c:	e004      	b.n	8008888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	4904      	ldr	r1, [pc, #16]	; (8008894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008884:	f7ff fdd3 	bl	800842e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20001688 	.word	0x20001688
 8008898:	0800932c 	.word	0x0800932c

0800889c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	4907      	ldr	r1, [pc, #28]	; (80088d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088b2:	4808      	ldr	r0, [pc, #32]	; (80088d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088b4:	f7ff fdbb 	bl	800842e <USBD_GetString>
 80088b8:	e004      	b.n	80088c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4904      	ldr	r1, [pc, #16]	; (80088d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088be:	4805      	ldr	r0, [pc, #20]	; (80088d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088c0:	f7ff fdb5 	bl	800842e <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20001688 	.word	0x20001688
 80088d4:	08009338 	.word	0x08009338

080088d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	220c      	movs	r2, #12
 80088e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80088ea:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	20000164 	.word	0x20000164

080088fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <Get_SerialNum+0x44>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <Get_SerialNum+0x48>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800890e:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <Get_SerialNum+0x4c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4413      	add	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008922:	2208      	movs	r2, #8
 8008924:	4909      	ldr	r1, [pc, #36]	; (800894c <Get_SerialNum+0x50>)
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f814 	bl	8008954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800892c:	2204      	movs	r2, #4
 800892e:	4908      	ldr	r1, [pc, #32]	; (8008950 <Get_SerialNum+0x54>)
 8008930:	68b8      	ldr	r0, [r7, #8]
 8008932:	f000 f80f 	bl	8008954 <IntToUnicode>
  }
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	1fff7590 	.word	0x1fff7590
 8008944:	1fff7594 	.word	0x1fff7594
 8008948:	1fff7598 	.word	0x1fff7598
 800894c:	20000176 	.word	0x20000176
 8008950:	20000186 	.word	0x20000186

08008954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
 800896a:	e027      	b.n	80089bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	0f1b      	lsrs	r3, r3, #28
 8008970:	2b09      	cmp	r3, #9
 8008972:	d80b      	bhi.n	800898c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	0f1b      	lsrs	r3, r3, #28
 8008978:	b2da      	uxtb	r2, r3
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	4619      	mov	r1, r3
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	440b      	add	r3, r1
 8008984:	3230      	adds	r2, #48	; 0x30
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	e00a      	b.n	80089a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	0f1b      	lsrs	r3, r3, #28
 8008990:	b2da      	uxtb	r2, r3
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	4619      	mov	r1, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	440b      	add	r3, r1
 800899c:	3237      	adds	r2, #55	; 0x37
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	3301      	adds	r3, #1
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	3301      	adds	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]
 80089bc:	7dfa      	ldrb	r2, [r7, #23]
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d3d3      	bcc.n	800896c <IntToUnicode+0x18>
  }
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	; 0x28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	605a      	str	r2, [r3, #4]
 80089e2:	609a      	str	r2, [r3, #8]
 80089e4:	60da      	str	r2, [r3, #12]
 80089e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <HAL_PCD_MspInit+0x90>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d131      	bne.n	8008a56 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089f2:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 80089f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f6:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089fe:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 8008a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a10:	2302      	movs	r3, #2
 8008a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008a1c:	230a      	movs	r3, #10
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a20:	f107 0314 	add.w	r3, r7, #20
 8008a24:	4619      	mov	r1, r3
 8008a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a2a:	f7f8 fbf3 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 8008a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a38:	6593      	str	r3, [r2, #88]	; 0x58
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <HAL_PCD_MspInit+0x94>)
 8008a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	2043      	movs	r0, #67	; 0x43
 8008a4c:	f7f8 fbab 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008a50:	2043      	movs	r0, #67	; 0x43
 8008a52:	f7f8 fbc4 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a56:	bf00      	nop
 8008a58:	3728      	adds	r7, #40	; 0x28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	40006800 	.word	0x40006800
 8008a64:	40021000 	.word	0x40021000

08008a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7fe fd68 	bl	8007554 <USBD_LL_SetupStage>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	00db      	lsls	r3, r3, #3
 8008aaa:	440b      	add	r3, r1
 8008aac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f7fe fda0 	bl	80075fa <USBD_LL_DataOutStage>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	440b      	add	r3, r1
 8008ae2:	333c      	adds	r3, #60	; 0x3c
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f7fe fde9 	bl	80076c0 <USBD_LL_DataInStage>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe feed 	bl	80078e4 <USBD_LL_SOF>
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d001      	beq.n	8008b2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b26:	f7f7 ff86 	bl	8000a36 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b30:	7bfa      	ldrb	r2, [r7, #15]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fe9a 	bl	800786e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fe53 	bl	80077ec <USBD_LL_Reset>
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fe95 	bl	800788e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <HAL_PCD_SuspendCallback+0x30>)
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	4a03      	ldr	r2, [pc, #12]	; (8008b80 <HAL_PCD_SuspendCallback+0x30>)
 8008b72:	f043 0306 	orr.w	r3, r3, #6
 8008b76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	e000ed00 	.word	0xe000ed00

08008b84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <HAL_PCD_ResumeCallback+0x34>)
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	4a07      	ldr	r2, [pc, #28]	; (8008bb8 <HAL_PCD_ResumeCallback+0x34>)
 8008b9a:	f023 0306 	bic.w	r3, r3, #6
 8008b9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008ba0:	f000 fa9e 	bl	80090e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fe84 	bl	80078b8 <USBD_LL_Resume>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed00 	.word	0xe000ed00

08008bbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008bc4:	f7fa f8c2 	bl	8002d4c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008bc8:	4a2b      	ldr	r2, [pc, #172]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a29      	ldr	r2, [pc, #164]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008bd8:	4b27      	ldr	r3, [pc, #156]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bda:	4a28      	ldr	r2, [pc, #160]	; (8008c7c <USBD_LL_Init+0xc0>)
 8008bdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008bde:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008be0:	2208      	movs	r2, #8
 8008be2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008be4:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008be6:	2202      	movs	r2, #2
 8008be8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bea:	4b23      	ldr	r3, [pc, #140]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bec:	2202      	movs	r2, #2
 8008bee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008bf0:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008bf6:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c08:	481b      	ldr	r0, [pc, #108]	; (8008c78 <USBD_LL_Init+0xbc>)
 8008c0a:	f7f8 fc95 	bl	8001538 <HAL_PCD_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008c14:	f7f7 ff0f 	bl	8000a36 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c1e:	2318      	movs	r3, #24
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	f7f9 ffb0 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c2e:	2358      	movs	r3, #88	; 0x58
 8008c30:	2200      	movs	r2, #0
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	f7f9 ffa8 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c3e:	23c0      	movs	r3, #192	; 0xc0
 8008c40:	2200      	movs	r2, #0
 8008c42:	2181      	movs	r1, #129	; 0x81
 8008c44:	f7f9 ffa0 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008c52:	2200      	movs	r2, #0
 8008c54:	2101      	movs	r1, #1
 8008c56:	f7f9 ff97 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c64:	2200      	movs	r2, #0
 8008c66:	2182      	movs	r1, #130	; 0x82
 8008c68:	f7f9 ff8e 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20001888 	.word	0x20001888
 8008c7c:	40006800 	.word	0x40006800

08008c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f8 fd60 	bl	800175c <HAL_PCD_Start>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d816      	bhi.n	8008cd4 <USBD_LL_Start+0x54>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <USBD_LL_Start+0x2c>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008cc3 	.word	0x08008cc3
 8008cb4:	08008cc9 	.word	0x08008cc9
 8008cb8:	08008ccf 	.word	0x08008ccf
    case HAL_OK :
      usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc0:	e00b      	b.n	8008cda <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc6:	e008      	b.n	8008cda <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ccc:	e005      	b.n	8008cda <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd2:	e002      	b.n	8008cda <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd8:	bf00      	nop
  }
  return usb_status;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	4608      	mov	r0, r1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	70fb      	strb	r3, [r7, #3]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70bb      	strb	r3, [r7, #2]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d0c:	78bb      	ldrb	r3, [r7, #2]
 8008d0e:	883a      	ldrh	r2, [r7, #0]
 8008d10:	78f9      	ldrb	r1, [r7, #3]
 8008d12:	f7f8 feb8 	bl	8001a86 <HAL_PCD_EP_Open>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d817      	bhi.n	8008d50 <USBD_LL_OpenEP+0x6c>
 8008d20:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <USBD_LL_OpenEP+0x44>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008d39 	.word	0x08008d39
 8008d2c:	08008d3f 	.word	0x08008d3f
 8008d30:	08008d45 	.word	0x08008d45
 8008d34:	08008d4b 	.word	0x08008d4b
    case HAL_OK :
      usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3c:	e00b      	b.n	8008d56 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	73fb      	strb	r3, [r7, #15]
    break;
 8008d42:	e008      	b.n	8008d56 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d44:	2301      	movs	r3, #1
 8008d46:	73fb      	strb	r3, [r7, #15]
    break;
 8008d48:	e005      	b.n	8008d56 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4e:	e002      	b.n	8008d56 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	bf00      	nop
  }
  return usb_status;
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d7a:	78fa      	ldrb	r2, [r7, #3]
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f8 fee7 	bl	8001b52 <HAL_PCD_EP_Close>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d816      	bhi.n	8008dbc <USBD_LL_CloseEP+0x5c>
 8008d8e:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <USBD_LL_CloseEP+0x34>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008da5 	.word	0x08008da5
 8008d98:	08008dab 	.word	0x08008dab
 8008d9c:	08008db1 	.word	0x08008db1
 8008da0:	08008db7 	.word	0x08008db7
    case HAL_OK :
      usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	e00b      	b.n	8008dc2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008daa:	2303      	movs	r3, #3
 8008dac:	73fb      	strb	r3, [r7, #15]
    break;
 8008dae:	e008      	b.n	8008dc2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	e005      	b.n	8008dc2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008db6:	2303      	movs	r3, #3
 8008db8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dba:	e002      	b.n	8008dc2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc0:	bf00      	nop
  }
  return usb_status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f8 ff91 	bl	8001d12 <HAL_PCD_EP_SetStall>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d816      	bhi.n	8008e28 <USBD_LL_StallEP+0x5c>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <USBD_LL_StallEP+0x34>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e17 	.word	0x08008e17
 8008e08:	08008e1d 	.word	0x08008e1d
 8008e0c:	08008e23 	.word	0x08008e23
    case HAL_OK :
      usb_status = USBD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	e00b      	b.n	8008e2e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1a:	e008      	b.n	8008e2e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e005      	b.n	8008e2e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
    break;
 8008e26:	e002      	b.n	8008e2e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2c:	bf00      	nop
  }
  return usb_status;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f8 ffbb 	bl	8001dd2 <HAL_PCD_EP_ClrStall>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d816      	bhi.n	8008e94 <USBD_LL_ClearStallEP+0x5c>
 8008e66:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <USBD_LL_ClearStallEP+0x34>)
 8008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008e83 	.word	0x08008e83
 8008e74:	08008e89 	.word	0x08008e89
 8008e78:	08008e8f 	.word	0x08008e8f
    case HAL_OK :
      usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e80:	e00b      	b.n	8008e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	73fb      	strb	r3, [r7, #15]
    break;
 8008e86:	e008      	b.n	8008e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8c:	e005      	b.n	8008e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	73fb      	strb	r3, [r7, #15]
    break;
 8008e92:	e002      	b.n	8008e9a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	73fb      	strb	r3, [r7, #15]
    break;
 8008e98:	bf00      	nop
  }
  return usb_status;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	da0c      	bge.n	8008eda <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	e00b      	b.n	8008ef2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ee0:	68f9      	ldr	r1, [r7, #12]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	440b      	add	r3, r1
 8008eec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ef0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
	...

08008f00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f8 fd8c 	bl	8001a3c <HAL_PCD_SetAddress>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d816      	bhi.n	8008f5c <USBD_LL_SetUSBAddress+0x5c>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <USBD_LL_SetUSBAddress+0x34>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f45 	.word	0x08008f45
 8008f38:	08008f4b 	.word	0x08008f4b
 8008f3c:	08008f51 	.word	0x08008f51
 8008f40:	08008f57 	.word	0x08008f57
    case HAL_OK :
      usb_status = USBD_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	e00b      	b.n	8008f62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4e:	e008      	b.n	8008f62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	e005      	b.n	8008f62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5a:	e002      	b.n	8008f62 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	bf00      	nop
  }
  return usb_status;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f8a:	7af9      	ldrb	r1, [r7, #11]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	f7f8 fe7c 	bl	8001c8c <HAL_PCD_EP_Transmit>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f98:	7dbb      	ldrb	r3, [r7, #22]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d816      	bhi.n	8008fcc <USBD_LL_Transmit+0x60>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <USBD_LL_Transmit+0x38>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fbb 	.word	0x08008fbb
 8008fac:	08008fc1 	.word	0x08008fc1
 8008fb0:	08008fc7 	.word	0x08008fc7
    case HAL_OK :
      usb_status = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8008fb8:	e00b      	b.n	8008fd2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	75fb      	strb	r3, [r7, #23]
    break;
 8008fbe:	e008      	b.n	8008fd2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
    break;
 8008fc4:	e005      	b.n	8008fd2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	75fb      	strb	r3, [r7, #23]
    break;
 8008fca:	e002      	b.n	8008fd2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	75fb      	strb	r3, [r7, #23]
    break;
 8008fd0:	bf00      	nop
  }
  return usb_status;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ffa:	7af9      	ldrb	r1, [r7, #11]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	f7f8 fdef 	bl	8001be2 <HAL_PCD_EP_Receive>
 8009004:	4603      	mov	r3, r0
 8009006:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009008:	7dbb      	ldrb	r3, [r7, #22]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d816      	bhi.n	800903c <USBD_LL_PrepareReceive+0x60>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_LL_PrepareReceive+0x38>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009025 	.word	0x08009025
 8009018:	0800902b 	.word	0x0800902b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009037 	.word	0x08009037
    case HAL_OK :
      usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]
    break;
 8009028:	e00b      	b.n	8009042 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	75fb      	strb	r3, [r7, #23]
    break;
 800902e:	e008      	b.n	8009042 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
    break;
 8009034:	e005      	b.n	8009042 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	75fb      	strb	r3, [r7, #23]
    break;
 800903a:	e002      	b.n	8009042 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	75fb      	strb	r3, [r7, #23]
    break;
 8009040:	bf00      	nop
  }
  return usb_status;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7f8 fdfa 	bl	8001c5c <HAL_PCD_EP_GetRxCount>
 8009068:	4603      	mov	r3, r0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <HAL_PCDEx_LPM_Callback+0x18>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d013      	beq.n	80090b2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800908a:	e023      	b.n	80090d4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d007      	beq.n	80090a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009094:	f000 f824 	bl	80090e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <HAL_PCDEx_LPM_Callback+0x68>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4a0f      	ldr	r2, [pc, #60]	; (80090dc <HAL_PCDEx_LPM_Callback+0x68>)
 800909e:	f023 0306 	bic.w	r3, r3, #6
 80090a2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fc04 	bl	80078b8 <USBD_LL_Resume>
    break;
 80090b0:	e010      	b.n	80090d4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fbe8 	bl	800788e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <HAL_PCDEx_LPM_Callback+0x68>)
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	4a04      	ldr	r2, [pc, #16]	; (80090dc <HAL_PCDEx_LPM_Callback+0x68>)
 80090cc:	f043 0306 	orr.w	r3, r3, #6
 80090d0:	6113      	str	r3, [r2, #16]
    break;
 80090d2:	bf00      	nop
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	e000ed00 	.word	0xe000ed00

080090e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80090e4:	f7f7 fa78 	bl	80005d8 <SystemClock_Config>
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}

080090ec <__errno>:
 80090ec:	4b01      	ldr	r3, [pc, #4]	; (80090f4 <__errno+0x8>)
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000190 	.word	0x20000190

080090f8 <__libc_init_array>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4e0d      	ldr	r6, [pc, #52]	; (8009130 <__libc_init_array+0x38>)
 80090fc:	4c0d      	ldr	r4, [pc, #52]	; (8009134 <__libc_init_array+0x3c>)
 80090fe:	1ba4      	subs	r4, r4, r6
 8009100:	10a4      	asrs	r4, r4, #2
 8009102:	2500      	movs	r5, #0
 8009104:	42a5      	cmp	r5, r4
 8009106:	d109      	bne.n	800911c <__libc_init_array+0x24>
 8009108:	4e0b      	ldr	r6, [pc, #44]	; (8009138 <__libc_init_array+0x40>)
 800910a:	4c0c      	ldr	r4, [pc, #48]	; (800913c <__libc_init_array+0x44>)
 800910c:	f000 f8ea 	bl	80092e4 <_init>
 8009110:	1ba4      	subs	r4, r4, r6
 8009112:	10a4      	asrs	r4, r4, #2
 8009114:	2500      	movs	r5, #0
 8009116:	42a5      	cmp	r5, r4
 8009118:	d105      	bne.n	8009126 <__libc_init_array+0x2e>
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009120:	4798      	blx	r3
 8009122:	3501      	adds	r5, #1
 8009124:	e7ee      	b.n	8009104 <__libc_init_array+0xc>
 8009126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800912a:	4798      	blx	r3
 800912c:	3501      	adds	r5, #1
 800912e:	e7f2      	b.n	8009116 <__libc_init_array+0x1e>
 8009130:	08009398 	.word	0x08009398
 8009134:	08009398 	.word	0x08009398
 8009138:	08009398 	.word	0x08009398
 800913c:	0800939c 	.word	0x0800939c

08009140 <malloc>:
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <malloc+0xc>)
 8009142:	4601      	mov	r1, r0
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f000 b861 	b.w	800920c <_malloc_r>
 800914a:	bf00      	nop
 800914c:	20000190 	.word	0x20000190

08009150 <free>:
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <free+0xc>)
 8009152:	4601      	mov	r1, r0
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f000 b80b 	b.w	8009170 <_free_r>
 800915a:	bf00      	nop
 800915c:	20000190 	.word	0x20000190

08009160 <memset>:
 8009160:	4402      	add	r2, r0
 8009162:	4603      	mov	r3, r0
 8009164:	4293      	cmp	r3, r2
 8009166:	d100      	bne.n	800916a <memset+0xa>
 8009168:	4770      	bx	lr
 800916a:	f803 1b01 	strb.w	r1, [r3], #1
 800916e:	e7f9      	b.n	8009164 <memset+0x4>

08009170 <_free_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4605      	mov	r5, r0
 8009174:	2900      	cmp	r1, #0
 8009176:	d045      	beq.n	8009204 <_free_r+0x94>
 8009178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917c:	1f0c      	subs	r4, r1, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	bfb8      	it	lt
 8009182:	18e4      	addlt	r4, r4, r3
 8009184:	f000 f8ac 	bl	80092e0 <__malloc_lock>
 8009188:	4a1f      	ldr	r2, [pc, #124]	; (8009208 <_free_r+0x98>)
 800918a:	6813      	ldr	r3, [r2, #0]
 800918c:	4610      	mov	r0, r2
 800918e:	b933      	cbnz	r3, 800919e <_free_r+0x2e>
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	6014      	str	r4, [r2, #0]
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800919a:	f000 b8a2 	b.w	80092e2 <__malloc_unlock>
 800919e:	42a3      	cmp	r3, r4
 80091a0:	d90c      	bls.n	80091bc <_free_r+0x4c>
 80091a2:	6821      	ldr	r1, [r4, #0]
 80091a4:	1862      	adds	r2, r4, r1
 80091a6:	4293      	cmp	r3, r2
 80091a8:	bf04      	itt	eq
 80091aa:	681a      	ldreq	r2, [r3, #0]
 80091ac:	685b      	ldreq	r3, [r3, #4]
 80091ae:	6063      	str	r3, [r4, #4]
 80091b0:	bf04      	itt	eq
 80091b2:	1852      	addeq	r2, r2, r1
 80091b4:	6022      	streq	r2, [r4, #0]
 80091b6:	6004      	str	r4, [r0, #0]
 80091b8:	e7ec      	b.n	8009194 <_free_r+0x24>
 80091ba:	4613      	mov	r3, r2
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	b10a      	cbz	r2, 80091c4 <_free_r+0x54>
 80091c0:	42a2      	cmp	r2, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x4a>
 80091c4:	6819      	ldr	r1, [r3, #0]
 80091c6:	1858      	adds	r0, r3, r1
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x74>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	4401      	add	r1, r0
 80091d0:	1858      	adds	r0, r3, r1
 80091d2:	4282      	cmp	r2, r0
 80091d4:	6019      	str	r1, [r3, #0]
 80091d6:	d1dd      	bne.n	8009194 <_free_r+0x24>
 80091d8:	6810      	ldr	r0, [r2, #0]
 80091da:	6852      	ldr	r2, [r2, #4]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	4401      	add	r1, r0
 80091e0:	6019      	str	r1, [r3, #0]
 80091e2:	e7d7      	b.n	8009194 <_free_r+0x24>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x7c>
 80091e6:	230c      	movs	r3, #12
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	e7d3      	b.n	8009194 <_free_r+0x24>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428a      	cmp	r2, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6811      	ldreq	r1, [r2, #0]
 80091f6:	6852      	ldreq	r2, [r2, #4]
 80091f8:	6062      	str	r2, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	605c      	str	r4, [r3, #4]
 8009202:	e7c7      	b.n	8009194 <_free_r+0x24>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000218 	.word	0x20000218

0800920c <_malloc_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	1ccd      	adds	r5, r1, #3
 8009210:	f025 0503 	bic.w	r5, r5, #3
 8009214:	3508      	adds	r5, #8
 8009216:	2d0c      	cmp	r5, #12
 8009218:	bf38      	it	cc
 800921a:	250c      	movcc	r5, #12
 800921c:	2d00      	cmp	r5, #0
 800921e:	4606      	mov	r6, r0
 8009220:	db01      	blt.n	8009226 <_malloc_r+0x1a>
 8009222:	42a9      	cmp	r1, r5
 8009224:	d903      	bls.n	800922e <_malloc_r+0x22>
 8009226:	230c      	movs	r3, #12
 8009228:	6033      	str	r3, [r6, #0]
 800922a:	2000      	movs	r0, #0
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	f000 f857 	bl	80092e0 <__malloc_lock>
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <_malloc_r+0xac>)
 8009234:	6814      	ldr	r4, [r2, #0]
 8009236:	4621      	mov	r1, r4
 8009238:	b991      	cbnz	r1, 8009260 <_malloc_r+0x54>
 800923a:	4c20      	ldr	r4, [pc, #128]	; (80092bc <_malloc_r+0xb0>)
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	b91b      	cbnz	r3, 8009248 <_malloc_r+0x3c>
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f83d 	bl	80092c0 <_sbrk_r>
 8009246:	6020      	str	r0, [r4, #0]
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f000 f838 	bl	80092c0 <_sbrk_r>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d124      	bne.n	800929e <_malloc_r+0x92>
 8009254:	230c      	movs	r3, #12
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f842 	bl	80092e2 <__malloc_unlock>
 800925e:	e7e4      	b.n	800922a <_malloc_r+0x1e>
 8009260:	680b      	ldr	r3, [r1, #0]
 8009262:	1b5b      	subs	r3, r3, r5
 8009264:	d418      	bmi.n	8009298 <_malloc_r+0x8c>
 8009266:	2b0b      	cmp	r3, #11
 8009268:	d90f      	bls.n	800928a <_malloc_r+0x7e>
 800926a:	600b      	str	r3, [r1, #0]
 800926c:	50cd      	str	r5, [r1, r3]
 800926e:	18cc      	adds	r4, r1, r3
 8009270:	4630      	mov	r0, r6
 8009272:	f000 f836 	bl	80092e2 <__malloc_unlock>
 8009276:	f104 000b 	add.w	r0, r4, #11
 800927a:	1d23      	adds	r3, r4, #4
 800927c:	f020 0007 	bic.w	r0, r0, #7
 8009280:	1ac3      	subs	r3, r0, r3
 8009282:	d0d3      	beq.n	800922c <_malloc_r+0x20>
 8009284:	425a      	negs	r2, r3
 8009286:	50e2      	str	r2, [r4, r3]
 8009288:	e7d0      	b.n	800922c <_malloc_r+0x20>
 800928a:	428c      	cmp	r4, r1
 800928c:	684b      	ldr	r3, [r1, #4]
 800928e:	bf16      	itet	ne
 8009290:	6063      	strne	r3, [r4, #4]
 8009292:	6013      	streq	r3, [r2, #0]
 8009294:	460c      	movne	r4, r1
 8009296:	e7eb      	b.n	8009270 <_malloc_r+0x64>
 8009298:	460c      	mov	r4, r1
 800929a:	6849      	ldr	r1, [r1, #4]
 800929c:	e7cc      	b.n	8009238 <_malloc_r+0x2c>
 800929e:	1cc4      	adds	r4, r0, #3
 80092a0:	f024 0403 	bic.w	r4, r4, #3
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d005      	beq.n	80092b4 <_malloc_r+0xa8>
 80092a8:	1a21      	subs	r1, r4, r0
 80092aa:	4630      	mov	r0, r6
 80092ac:	f000 f808 	bl	80092c0 <_sbrk_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d0cf      	beq.n	8009254 <_malloc_r+0x48>
 80092b4:	6025      	str	r5, [r4, #0]
 80092b6:	e7db      	b.n	8009270 <_malloc_r+0x64>
 80092b8:	20000218 	.word	0x20000218
 80092bc:	2000021c 	.word	0x2000021c

080092c0 <_sbrk_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4c06      	ldr	r4, [pc, #24]	; (80092dc <_sbrk_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4605      	mov	r5, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	f7f7 fd64 	bl	8000d98 <_sbrk>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_sbrk_r+0x1a>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	b103      	cbz	r3, 80092da <_sbrk_r+0x1a>
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20001b7c 	.word	0x20001b7c

080092e0 <__malloc_lock>:
 80092e0:	4770      	bx	lr

080092e2 <__malloc_unlock>:
 80092e2:	4770      	bx	lr

080092e4 <_init>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr

080092f0 <_fini>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr
