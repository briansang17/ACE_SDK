
self_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009110  08009110  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009118  08009118  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001f4  08009314  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  08009314  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bef4  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003735  00000000  00000000  0003c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0003f850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026012  00000000  00000000  00041d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012378  00000000  00000000  00067d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8ac1  00000000  00000000  0007a0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005058  00000000  00000000  00152c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009070 	.word	0x08009070

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	08009070 	.word	0x08009070

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc6d 	bl	8000db6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80e 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f97a 	bl	80007d8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004e4:	f000 f90a 	bl	80006fc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f946 	bl	8000778 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f007 ff46 	bl	800837c <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 80004f0:	f000 f89a 	bl	8000628 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80004f4:	f000 f8c4 	bl	8000680 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x24>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0b0      	sub	sp, #192	; 0xc0
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000506:	2244      	movs	r2, #68	; 0x44
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f008 fcee 	bl	8008eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2268      	movs	r2, #104	; 0x68
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fce0 	bl	8008eec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800052c:	f002 faf2 	bl	8002b14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000530:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <SystemClock_Config+0x128>)
 8000532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000536:	4a3b      	ldr	r2, [pc, #236]	; (8000624 <SystemClock_Config+0x128>)
 8000538:	f023 0318 	bic.w	r3, r3, #24
 800053c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000540:	2314      	movs	r3, #20
 8000542:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000556:	2360      	movs	r3, #96	; 0x60
 8000558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000562:	2301      	movs	r3, #1
 8000564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 800056e:	2328      	movs	r3, #40	; 0x28
 8000570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fc08 	bl	8002da0 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000596:	f000 f9c9 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f813 	bl	80035e0 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005c0:	f000 f9b4 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80005c4:	f242 0301 	movw	r3, #8193	; 0x2001
 80005c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005dc:	2318      	movs	r3, #24
 80005de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005f0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f9f7 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000600:	f000 f994 	bl	800092c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000604:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000608:	f002 faa2 	bl	8002b50 <HAL_PWREx_ControlVoltageScaling>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8000612:	f000 f98b 	bl	800092c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000616:	f003 fc51 	bl	8003ebc <HAL_RCCEx_EnableMSIPLLMode>
}
 800061a:	bf00      	nop
 800061c:	37c0      	adds	r7, #192	; 0xc0
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_QUADSPI_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_QUADSPI_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000634:	22ff      	movs	r2, #255	; 0xff
 8000636:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_QUADSPI_Init+0x50>)
 800063a:	2201      	movs	r2, #1
 800063c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_QUADSPI_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_QUADSPI_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_QUADSPI_Init+0x50>)
 8000664:	f002 fada 	bl	8002c1c <HAL_QSPI_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 f95d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000368 	.word	0x20000368
 800067c:	a0001000 	.word	0xa0001000

08000680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_SPI2_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_SPI2_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_SPI2_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_SPI2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI2_Init+0x74>)
 800069a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800069e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_SPI2_Init+0x74>)
 80006e0:	f003 fcec 	bl	80040bc <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f91f 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000220 	.word	0x20000220
 80006f8:	40003800 	.word	0x40003800

080006fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI3_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI3_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI3_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI3_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI3_Init+0x74>)
 8000716:	f44f 7240 	mov.w	r2, #768	; 0x300
 800071a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI3_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI3_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI3_Init+0x74>)
 800072a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI3_Init+0x74>)
 800074a:	2207      	movs	r2, #7
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_SPI3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI3_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_SPI3_Init+0x74>)
 800075c:	f003 fcae 	bl	80040bc <HAL_SPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8e1 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000284 	.word	0x20000284
 8000774:	40003c00 	.word	0x40003c00

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART1_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007bc:	f003 fd21 	bl	8004202 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8b1 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200002e8 	.word	0x200002e8
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b4a      	ldr	r3, [pc, #296]	; (8000918 <MX_GPIO_Init+0x140>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a49      	ldr	r2, [pc, #292]	; (8000918 <MX_GPIO_Init+0x140>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b47      	ldr	r3, [pc, #284]	; (8000918 <MX_GPIO_Init+0x140>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b44      	ldr	r3, [pc, #272]	; (8000918 <MX_GPIO_Init+0x140>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a43      	ldr	r2, [pc, #268]	; (8000918 <MX_GPIO_Init+0x140>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <MX_GPIO_Init+0x140>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <MX_GPIO_Init+0x140>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <MX_GPIO_Init+0x140>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_GPIO_Init+0x140>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <MX_GPIO_Init+0x140>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a37      	ldr	r2, [pc, #220]	; (8000918 <MX_GPIO_Init+0x140>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <MX_GPIO_Init+0x140>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <MX_GPIO_Init+0x140>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a31      	ldr	r2, [pc, #196]	; (8000918 <MX_GPIO_Init+0x140>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_GPIO_Init+0x140>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADXL_CS_Pin|ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f241 0110 	movw	r1, #4112	; 0x1010
 800086c:	482b      	ldr	r0, [pc, #172]	; (800091c <MX_GPIO_Init+0x144>)
 800086e:	f000 fda3 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f246 3140 	movw	r1, #25408	; 0x6340
 8000878:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_GPIO_Init+0x148>)
 800087a:	f000 fd9d 	bl	80013b8 <HAL_GPIO_WritePin>
                          |ADS_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APWR_EN_GPIO_Port, APWR_EN_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2104      	movs	r1, #4
 8000882:	4828      	ldr	r0, [pc, #160]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000884:	f000 fd98 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADXL_CS_Pin ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin|ADS_PWDN_Pin;
 8000888:	f241 0310 	movw	r3, #4112	; 0x1010
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	481e      	ldr	r0, [pc, #120]	; (800091c <MX_GPIO_Init+0x144>)
 80008a2:	f000 fc0f 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin SPI3_CS_Pin ADS_START_Pin
                           ADS_RST_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 80008a6:	f246 3340 	movw	r3, #25408	; 0x6340
 80008aa:	617b      	str	r3, [r7, #20]
                          |ADS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <MX_GPIO_Init+0x148>)
 80008c0:	f000 fc00 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : APWR_EN_Pin */
  GPIO_InitStruct.Pin = APWR_EN_Pin;
 80008c4:	2304      	movs	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0x14c>)
 80008dc:	f000 fbf2 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x148>)
 80008f4:	f000 fbe6 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80008f8:	2308      	movs	r3, #8
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_GPIO_Init+0x150>)
 800090c:	f000 fbda 	bl	80010c4 <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	48000800 	.word	0x48000800
 8000920:	48000400 	.word	0x48000400
 8000924:	48000c00 	.word	0x48000c00
 8000928:	48001c00 	.word	0x48001c00

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x6>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6613      	str	r3, [r2, #96]	; 0x60
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <HAL_QSPI_MspInit+0xb4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d144      	bne.n	8000a28 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6513      	str	r3, [r2, #80]	; 0x50
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_QSPI_MspInit+0xb8>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80009e6:	23cc      	movs	r3, #204	; 0xcc
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009f6:	230a      	movs	r3, #10
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fb5e 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a18:	230a      	movs	r3, #10
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_QSPI_MspInit+0xbc>)
 8000a24:	f000 fb4e 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	a0001000 	.word	0xa0001000
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000400 	.word	0x48000400

08000a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a4b      	ldr	r2, [pc, #300]	; (8000b88 <HAL_SPI_MspInit+0x14c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d145      	bne.n	8000aea <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5e:	4b4b      	ldr	r3, [pc, #300]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a4a      	ldr	r2, [pc, #296]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a3e      	ldr	r2, [pc, #248]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4833      	ldr	r0, [pc, #204]	; (8000b90 <HAL_SPI_MspInit+0x154>)
 8000ac2:	f000 faff 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482c      	ldr	r0, [pc, #176]	; (8000b94 <HAL_SPI_MspInit+0x158>)
 8000ae4:	f000 faee 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae8:	e049      	b.n	8000b7e <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d144      	bne.n	8000b7e <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afe:	6593      	str	r3, [r2, #88]	; 0x58
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_SPI_MspInit+0x150>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_SPI_MspInit+0x154>)
 8000b5a:	f000 fab3 	bl	80010c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5e:	2330      	movs	r3, #48	; 0x30
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <HAL_SPI_MspInit+0x158>)
 8000b7a:	f000 faa3 	bl	80010c4 <HAL_GPIO_Init>
}
 8000b7e:	bf00      	nop
 8000b80:	3738      	adds	r7, #56	; 0x38
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40003800 	.word	0x40003800
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000800 	.word	0x48000800
 8000b94:	48000400 	.word	0x48000400
 8000b98:	40003c00 	.word	0x40003c00

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d129      	bne.n	8000c12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c00:	2307      	movs	r3, #7
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f000 fa59 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8f6 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <USB_IRQHandler+0x10>)
 8000c7e:	f000 fce7 	bl	8001650 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20001888 	.word	0x20001888

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f008 f8dc 	bl	8008e78 <__errno>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20028000 	.word	0x20028000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000210 	.word	0x20000210
 8000cf4:	20001b80 	.word	0x20001b80

08000cf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <SystemInit+0x64>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <SystemInit+0x64>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <SystemInit+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <SystemInit+0x68>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <SystemInit+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0x68>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <SystemInit+0x68>)
 8000d24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemInit+0x68>)
 8000d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SystemInit+0x68>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <SystemInit+0x68>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SystemInit+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x64>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	40021000 	.word	0x40021000

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffc6 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
	ldr	r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f008 f877 	bl	8008e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fb9d 	bl	80004d4 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000da0:	08009120 	.word	0x08009120
	ldr	r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000dac:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000db0:	20001b80 	.word	0x20001b80

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>

08000db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f93d 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f80e 	bl	8000de8 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fdac 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_InitTick+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d023      	beq.n	8000e44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_InitTick+0x70>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f949 	bl	80010aa <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d809      	bhi.n	8000e38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f913 	bl	8001056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_InitTick+0x74>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e004      	b.n	8000e48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e001      	b.n	8000e48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200003b4 	.word	0x200003b4

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200003b4 	.word	0x200003b4

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e154      	b.n	800137e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8146 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d00b      	beq.n	800110c <HAL_GPIO_Init+0x48>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001100:	2b11      	cmp	r3, #17
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0xea>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d123      	bne.n	80011f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0203 	and.w	r2, r3, #3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80a0 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6613      	str	r3, [r2, #96]	; 0x60
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_GPIO_Init+0x2d8>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127a:	d019      	beq.n	80012b0 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x2e0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1e0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1dc>
 800129c:	2304      	movs	r3, #4
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a0:	2307      	movs	r3, #7
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a4:	2303      	movs	r3, #3
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f aea3 	bne.w	80010d4 <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48001000 	.word	0x48001000
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af06      	add	r7, sp, #24
 80013ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e104      	b.n	8001604 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f007 f9a4 	bl	800875c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fb25 	bl	8004a70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	687e      	ldr	r6, [r7, #4]
 800142e:	466d      	mov	r5, sp
 8001430:	f106 0410 	add.w	r4, r6, #16
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	602b      	str	r3, [r5, #0]
 800143c:	1d33      	adds	r3, r6, #4
 800143e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f003 faed 	bl	8004a20 <USB_CoreInit>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0d5      	b.n	8001604 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fb21 	bl	8004aa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e04c      	b.n	8001504 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3301      	adds	r3, #1
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	b298      	uxth	r0, r3
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3336      	adds	r3, #54	; 0x36
 80014a8:	4602      	mov	r2, r0
 80014aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3303      	adds	r3, #3
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3338      	adds	r3, #56	; 0x38
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	333c      	adds	r3, #60	; 0x3c
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	3340      	adds	r3, #64	; 0x40
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	3301      	adds	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3ad      	bcc.n	800146a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e044      	b.n	800159e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3b5      	bcc.n	8001514 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	687e      	ldr	r6, [r7, #4]
 80015b0:	466d      	mov	r5, sp
 80015b2:	f106 0410 	add.w	r4, r6, #16
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	602b      	str	r3, [r5, #0]
 80015be:	1d33      	adds	r3, r6, #4
 80015c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f003 fa7c 	bl	8004ac0 <USB_DevInit>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e014      	b.n	8001604 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f001 fa63 	bl	8002abe <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 fa35 	bl	8006a6c <USB_DevDisconnect>

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800160c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_PCD_Start+0x16>
 800161e:	2302      	movs	r3, #2
 8001620:	e012      	b.n	8001648 <HAL_PCD_Start+0x3c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fa07 	bl	8004a42 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fa00 	bl	8006a3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f005 fa1a 	bl	8006a96 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166c:	d102      	bne.n	8001674 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fb5b 	bl	8001d2a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fa0c 	bl	8006a96 <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d112      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f007 f8fb 	bl	800889e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f91e 	bl	80018ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f9ee 	bl	8006a96 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c4:	d10b      	bne.n	80016de <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f9d7 	bl	8006a96 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f2:	d10b      	bne.n	800170c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001706:	b292      	uxth	r2, r2
 8001708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f9c0 	bl	8006a96 <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001720:	d133      	bne.n	800178a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0204 	bic.w	r2, r2, #4
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001764:	2100      	movs	r1, #0
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f007 fb4a 	bl	8008e00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f007 f8cf 	bl	8008910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001784:	b292      	uxth	r2, r2
 8001786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f005 f981 	bl	8006a96 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179e:	d126      	bne.n	80017ee <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0208 	orr.w	r2, r2, #8
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0204 	orr.w	r2, r2, #4
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f007 f877 	bl	80088dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 f94f 	bl	8006a96 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b80      	cmp	r3, #128	; 0x80
 8001800:	d13f      	bne.n	8001882 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d12b      	bne.n	800187c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0204 	orr.w	r2, r2, #4
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0208 	orr.w	r2, r2, #8
 800184e:	b292      	uxth	r2, r2
 8001850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001864:	b29b      	uxth	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001872:	2101      	movs	r1, #1
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f007 fac3 	bl	8008e00 <HAL_PCDEx_LPM_Callback>
 800187a:	e002      	b.n	8001882 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f007 f82d 	bl	80088dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f905 	bl	8006a96 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001896:	d10e      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f006 ffe6 	bl	8008882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 f8eb 	bl	8006a96 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ca:	d10b      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_PCD_SetAddress+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e013      	b.n	800192e <HAL_PCD_SetAddress+0x42>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f879 	bl	8006a16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	4608      	mov	r0, r1
 8001940:	4611      	mov	r1, r2
 8001942:	461a      	mov	r2, r3
 8001944:	4603      	mov	r3, r0
 8001946:	70fb      	strb	r3, [r7, #3]
 8001948:	460b      	mov	r3, r1
 800194a:	803b      	strh	r3, [r7, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0e      	bge.n	800197a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00e      	b.n	8001998 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019a4:	883a      	ldrh	r2, [r7, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	78ba      	ldrb	r2, [r7, #2]
 80019ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019c2:	78bb      	ldrb	r3, [r7, #2]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d102      	bne.n	80019ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_PCD_EP_Open+0xa6>
 80019d8:	2302      	movs	r3, #2
 80019da:	e00e      	b.n	80019fa <HAL_PCD_EP_Open+0xc4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f88a 	bl	8004b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019f8:	7afb      	ldrb	r3, [r7, #11]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da0e      	bge.n	8001a34 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	705a      	strb	r2, [r3, #1]
 8001a32:	e00e      	b.n	8001a52 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 0207 	and.w	r2, r3, #7
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_PCD_EP_Close+0x6a>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e00e      	b.n	8001a8a <HAL_PCD_EP_Close+0x88>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fbb0 	bl	80051e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	f003 0207 	and.w	r2, r3, #7
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fd63 	bl	80055ba <USB_EPStartXfer>
 8001af4:	e005      	b.n	8001b02 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6979      	ldr	r1, [r7, #20]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fd5c 	bl	80055ba <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2201      	movs	r2, #1
 8001b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6979      	ldr	r1, [r7, #20]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fd08 	bl	80055ba <USB_EPStartXfer>
 8001baa:	e005      	b.n	8001bb8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6979      	ldr	r1, [r7, #20]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fd01 	bl	80055ba <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0207 	and.w	r2, r3, #7
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d901      	bls.n	8001be0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e04c      	b.n	8001c7a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da0e      	bge.n	8001c06 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00c      	b.n	8001c20 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_EP_SetStall+0x7e>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e01c      	b.n	8001c7a <HAL_PCD_EP_SetStall+0xb8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fde2 	bl	8006818 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f004 ff23 	bl	8006ab6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d901      	bls.n	8001ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e040      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da0e      	bge.n	8001cc6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 0207 	and.w	r2, r3, #7
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_PCD_EP_ClrStall+0x82>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e00e      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fdd1 	bl	80068ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b08e      	sub	sp, #56	; 0x38
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d32:	e2d1      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 8152 	bne.w	8001ff8 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d150      	bne.n	8001e00 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6e:	81fb      	strh	r3, [r7, #14]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3328      	adds	r3, #40	; 0x28
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	441a      	add	r2, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f006 fd44 	bl	800884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8282 	beq.w	80022d8 <PCD_EP_ISR_Handler+0x5ae>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 827d 	bne.w	80022d8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dfe:	e26b      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d032      	beq.n	8001e80 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f004 fe7b 	bl	8006b50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e66:	4013      	ands	r3, r2
 8001e68:	823b      	strh	r3, [r7, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	8a3a      	ldrh	r2, [r7, #16]
 8001e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e74:	b292      	uxth	r2, r2
 8001e76:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f006 fcbb 	bl	80087f4 <HAL_PCD_SetupStageCallback>
 8001e7e:	e22b      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e80:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f280 8227 	bge.w	80022d8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e96:	4013      	ands	r3, r2
 8001e98:	83bb      	strh	r3, [r7, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	8bba      	ldrh	r2, [r7, #28]
 8001ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d019      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x1e2>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d015      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	6959      	ldr	r1, [r3, #20]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f004 fe2d 	bl	8006b50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	441a      	add	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f006 fc86 	bl	8008818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4413      	add	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d112      	bne.n	8001f5a <PCD_EP_ISR_Handler+0x230>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	e02f      	b.n	8001fba <PCD_EP_ISR_Handler+0x290>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f60:	d813      	bhi.n	8001f8a <PCD_EP_ISR_Handler+0x260>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x252>
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	3301      	adds	r3, #1
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	029b      	lsls	r3, r3, #10
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e017      	b.n	8001fba <PCD_EP_ISR_Handler+0x290>
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <PCD_EP_ISR_Handler+0x27a>
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	827b      	strh	r3, [r7, #18]
 8001fcc:	8a7b      	ldrh	r3, [r7, #18]
 8001fce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fd2:	827b      	strh	r3, [r7, #18]
 8001fd4:	8a7b      	ldrh	r3, [r7, #18]
 8001fd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fda:	827b      	strh	r3, [r7, #18]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	8013      	strh	r3, [r2, #0]
 8001ff6:	e16f      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800200a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800200e:	2b00      	cmp	r3, #0
 8002010:	f280 80e4 	bge.w	80021dc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29a      	uxth	r2, r3
 8002026:	f640 738f 	movw	r3, #3983	; 0xf8f
 800202a:	4013      	ands	r3, r2
 800202c:	853b      	strh	r3, [r7, #40]	; 0x28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002042:	b292      	uxth	r2, r2
 8002044:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002046:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	7b1b      	ldrb	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d120      	bne.n	80020a6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800208a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8083 	beq.w	8002198 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	88da      	ldrh	r2, [r3, #6]
 800209e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a0:	f004 fd56 	bl	8006b50 <USB_ReadPMA>
 80020a4:	e078      	b.n	8002198 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	78db      	ldrb	r3, [r3, #3]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d108      	bne.n	80020c0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020b0:	461a      	mov	r2, r3
 80020b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f91d 	bl	80022f4 <HAL_PCD_EP_DB_Receive>
 80020ba:	4603      	mov	r3, r0
 80020bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020be:	e06b      	b.n	8002198 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	847b      	strh	r3, [r7, #34]	; 0x22
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002142:	2b00      	cmp	r3, #0
 8002144:	d028      	beq.n	8002198 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	891a      	ldrh	r2, [r3, #8]
 8002152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002154:	f004 fcfc 	bl	8006b50 <USB_ReadPMA>
 8002158:	e01e      	b.n	8002198 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	4413      	add	r3, r2
 8002174:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	6959      	ldr	r1, [r3, #20]
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	895a      	ldrh	r2, [r3, #10]
 8002192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002194:	f004 fcdc 	bl	8006b50 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800219e:	441a      	add	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021aa:	441a      	add	r2, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <PCD_EP_ISR_Handler+0x498>
 80021b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d206      	bcs.n	80021d0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f006 fb25 	bl	8008818 <HAL_PCD_DataOutStageCallback>
 80021ce:	e005      	b.n	80021dc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f9ef 	bl	80055ba <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d078      	beq.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80021e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002214:	843b      	strh	r3, [r7, #32]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	441a      	add	r2, r3
 8002224:	8c3b      	ldrh	r3, [r7, #32]
 8002226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d108      	bne.n	800224c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800223e:	2b02      	cmp	r3, #2
 8002240:	d144      	bne.n	80022cc <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d13f      	bne.n	80022cc <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	4413      	add	r3, r2
 8002266:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002270:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	8bfb      	ldrh	r3, [r7, #30]
 8002278:	429a      	cmp	r2, r3
 800227a:	d906      	bls.n	800228a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	8bfb      	ldrh	r3, [r7, #30]
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	e002      	b.n	8002290 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f006 fad5 	bl	800884e <HAL_PCD_DataInStageCallback>
 80022a4:	e018      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	8bfb      	ldrh	r3, [r7, #30]
 80022ac:	441a      	add	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f978 	bl	80055ba <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022ca:	e005      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f917 	bl	8002506 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f6ff ad25 	blt.w	8001d34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3738      	adds	r7, #56	; 0x38
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07c      	beq.n	8002406 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	8b7b      	ldrh	r3, [r7, #26]
 8002338:	429a      	cmp	r2, r3
 800233a:	d306      	bcc.n	800234a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	e002      	b.n	8002350 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d123      	bne.n	80023a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	833b      	strh	r3, [r7, #24]
 8002374:	8b3b      	ldrh	r3, [r7, #24]
 8002376:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800237a:	833b      	strh	r3, [r7, #24]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	8b3b      	ldrh	r3, [r7, #24]
 800238c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	b29b      	uxth	r3, r3
 800239e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01f      	beq.n	80023ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c4:	82fb      	strh	r3, [r7, #22]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	441a      	add	r2, r3
 80023d4:	8afb      	ldrh	r3, [r7, #22]
 80023d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8085 	beq.w	80024fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6959      	ldr	r1, [r3, #20]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	891a      	ldrh	r2, [r3, #8]
 80023fe:	8b7b      	ldrh	r3, [r7, #26]
 8002400:	f004 fba6 	bl	8006b50 <USB_ReadPMA>
 8002404:	e07a      	b.n	80024fc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4413      	add	r3, r2
 8002420:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	8b7b      	ldrh	r3, [r7, #26]
 8002432:	429a      	cmp	r2, r3
 8002434:	d306      	bcc.n	8002444 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	8b7b      	ldrh	r3, [r7, #26]
 800243c:	1ad2      	subs	r2, r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	619a      	str	r2, [r3, #24]
 8002442:	e002      	b.n	800244a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d123      	bne.n	800249a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	83fb      	strh	r3, [r7, #30]
 800246e:	8bfb      	ldrh	r3, [r7, #30]
 8002470:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002474:	83fb      	strh	r3, [r7, #30]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	441a      	add	r2, r3
 8002484:	8bfb      	ldrh	r3, [r7, #30]
 8002486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	b29b      	uxth	r3, r3
 8002498:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11f      	bne.n	80024e4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	83bb      	strh	r3, [r7, #28]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	8bbb      	ldrh	r3, [r7, #28]
 80024d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024e4:	8b7b      	ldrh	r3, [r7, #26]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	895a      	ldrh	r2, [r3, #10]
 80024f6:	8b7b      	ldrh	r3, [r7, #26]
 80024f8:	f004 fb2a 	bl	8006b50 <USB_ReadPMA>
    }
  }

  return count;
 80024fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b092      	sub	sp, #72	; 0x48
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8130 	beq.w	8002780 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800254c:	429a      	cmp	r2, r3
 800254e:	d906      	bls.n	800255e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	619a      	str	r2, [r3, #24]
 800255c:	e002      	b.n	8002564 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12c      	bne.n	80025c6 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f006 f96b 	bl	800884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 822d 	beq.w	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	827b      	strh	r3, [r7, #18]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	441a      	add	r2, r3
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8013      	strh	r3, [r2, #0]
 80025c4:	e20b      	b.n	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01f      	beq.n	8002610 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	b29b      	uxth	r3, r3
 800260e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002616:	2b01      	cmp	r3, #1
 8002618:	f040 81e1 	bne.w	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002622:	441a      	add	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800262e:	441a      	add	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d309      	bcc.n	8002654 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	1ad2      	subs	r2, r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e014      	b.n	800267e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800265c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002668:	e009      	b.n	800267e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	785b      	ldrb	r3, [r3, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d155      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	00da      	lsls	r2, r3, #3
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d112      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x1d4>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026be:	b29a      	uxth	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	801a      	strh	r2, [r3, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	e047      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x264>
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2b3e      	cmp	r3, #62	; 0x3e
 80026de:	d811      	bhi.n	8002704 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	3301      	adds	r3, #1
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e032      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x264>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x214>
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	b29b      	uxth	r3, r3
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	b29b      	uxth	r3, r3
 8002722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272a:	b29a      	uxth	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	e01b      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x264>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d117      	bne.n	800276a <HAL_PCD_EP_DB_Transmit+0x264>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	4413      	add	r3, r2
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	00da      	lsls	r2, r3, #3
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	4413      	add	r3, r2
 800275c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	b29a      	uxth	r2, r3
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6959      	ldr	r1, [r3, #20]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	891a      	ldrh	r2, [r3, #8]
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	b29b      	uxth	r3, r3
 800277a:	f004 f9a8 	bl	8006ace <USB_WritePMA>
 800277e:	e12e      	b.n	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	4413      	add	r3, r2
 800279a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d306      	bcc.n	80027be <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	e002      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d12c      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f006 f83b 	bl	800884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80fd 	bne.w	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
 8002824:	e0db      	b.n	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11f      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800285c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	b29b      	uxth	r3, r3
 800286e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002876:	2b01      	cmp	r3, #1
 8002878:	f040 80b1 	bne.w	80029de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002882:	441a      	add	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800288e:	441a      	add	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d309      	bcc.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	1ad2      	subs	r2, r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	621a      	str	r2, [r3, #32]
 80028b2:	e014      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80028bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028c8:	e009      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d155      	bne.n	8002998 <HAL_PCD_EP_DB_Transmit+0x492>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	4413      	add	r3, r2
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290c:	4413      	add	r3, r2
 800290e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	2b00      	cmp	r3, #0
 8002918:	d112      	bne.n	8002940 <HAL_PCD_EP_DB_Transmit+0x43a>
 800291a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002924:	b29a      	uxth	r2, r3
 8002926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002938:	b29a      	uxth	r2, r3
 800293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	e044      	b.n	80029ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	2b3e      	cmp	r3, #62	; 0x3e
 8002944:	d811      	bhi.n	800296a <HAL_PCD_EP_DB_Transmit+0x464>
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_PCD_EP_DB_Transmit+0x456>
 8002956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002958:	3301      	adds	r3, #1
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	b29b      	uxth	r3, r3
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	b29a      	uxth	r2, r3
 8002964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e02f      	b.n	80029ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_PCD_EP_DB_Transmit+0x47a>
 800297a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297c:	3b01      	subs	r3, #1
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002982:	b29b      	uxth	r3, r3
 8002984:	029b      	lsls	r3, r3, #10
 8002986:	b29b      	uxth	r3, r3
 8002988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002990:	b29a      	uxth	r2, r3
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	e018      	b.n	80029ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d114      	bne.n	80029ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	4413      	add	r3, r2
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	00da      	lsls	r2, r3, #3
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	4413      	add	r3, r2
 80029bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6959      	ldr	r1, [r3, #20]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	895a      	ldrh	r2, [r3, #10]
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f004 f878 	bl	8006ace <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f8:	823b      	strh	r3, [r7, #16]
 80029fa:	8a3b      	ldrh	r3, [r7, #16]
 80029fc:	f083 0310 	eor.w	r3, r3, #16
 8002a00:	823b      	strh	r3, [r7, #16]
 8002a02:	8a3b      	ldrh	r3, [r7, #16]
 8002a04:	f083 0320 	eor.w	r3, r3, #32
 8002a08:	823b      	strh	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8a3b      	ldrh	r3, [r7, #16]
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3748      	adds	r7, #72	; 0x48
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	4613      	mov	r3, r2
 8002a48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e009      	b.n	8002a82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a6e:	897a      	ldrh	r2, [r7, #10]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a82:	893b      	ldrh	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	80da      	strh	r2, [r3, #6]
 8002a96:	e00b      	b.n	8002ab0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5e:	d130      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6c:	d038      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2232      	movs	r2, #50	; 0x32
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	e002      	b.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f2      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d110      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e00f      	b.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d007      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0a:	6053      	str	r3, [r2, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000

08002c1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7fe f930 	bl	8000e88 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e069      	b.n	8002d08 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fe97 	bl	800097c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f85e 	bl	8002d14 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f856 	bl	8002d30 <QSPI_WaitFlagStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d137      	bne.n	8002cfe <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c98:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6852      	ldr	r2, [r2, #4]
 8002ca0:	0611      	lsls	r1, r2, #24
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	69d2      	ldr	r2, [r2, #28]
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a12      	ldr	r2, [r2, #32]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_QSPI_Init+0xf4>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6912      	ldr	r2, [r2, #16]
 8002cca:	0411      	lsls	r1, r2, #16
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6952      	ldr	r2, [r2, #20]
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6992      	ldr	r2, [r2, #24]
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	ffe0f8fe 	.word	0xffe0f8fe

08002d14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d40:	e01a      	b.n	8002d78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d016      	beq.n	8002d78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe f89d 	bl	8000e88 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2204      	movs	r2, #4
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e00e      	b.n	8002d96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1d6      	bne.n	8002d42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f000 bc11 	b.w	80035d6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db4:	4ba0      	ldr	r3, [pc, #640]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbe:	4b9e      	ldr	r3, [pc, #632]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80e4 	beq.w	8002f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_RCC_OscConfig+0x4c>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	f040 808b 	bne.w	8002efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f040 8087 	bne.w	8002efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dec:	4b92      	ldr	r3, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x64>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e3e8      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_RCC_OscConfig+0x7e>
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1c:	e005      	b.n	8002e2a <HAL_RCC_OscConfig+0x8a>
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d223      	bcs.n	8002e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fd78 	bl	8003928 <RCC_SetFlashLatencyFromMSIRange>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e3c9      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e48:	f043 0308 	orr.w	r3, r3, #8
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4977      	ldr	r1, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	4972      	ldr	r1, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e025      	b.n	8002ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	496a      	ldr	r1, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	4965      	ldr	r1, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fd38 	bl	8003928 <RCC_SetFlashLatencyFromMSIRange>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e389      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec2:	f000 fc6f 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x29c>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	fa21 f303 	lsr.w	r3, r1, r3
 8002ede:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_OscConfig+0x2a0>)
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x2a4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ff7e 	bl	8000de8 <HAL_InitTick>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d052      	beq.n	8002f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	e36d      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d032      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f02:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ffbb 	bl	8000e88 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f16:	f7fd ffb7 	bl	8000e88 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e356      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f34:	4b40      	ldr	r3, [pc, #256]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f3a:	f043 0308 	orr.w	r3, r3, #8
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	493a      	ldr	r1, [pc, #232]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
 8002f66:	e01a      	b.n	8002f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f68:	4b33      	ldr	r3, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a32      	ldr	r2, [pc, #200]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f74:	f7fd ff88 	bl	8000e88 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7c:	f7fd ff84 	bl	8000e88 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e323      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1dc>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d073      	beq.n	8003092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_OscConfig+0x21c>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d063      	beq.n	8003090 <HAL_RCC_OscConfig+0x2f0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d15f      	bne.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e300      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x24c>
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0x288>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x270>
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x288>
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a05      	ldr	r2, [pc, #20]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff2a 	bl	8000e88 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	e010      	b.n	800305a <HAL_RCC_OscConfig+0x2ba>
 8003038:	40021000 	.word	0x40021000
 800303c:	080090c8 	.word	0x080090c8
 8003040:	20000000 	.word	0x20000000
 8003044:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fd ff1e 	bl	8000e88 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e2bd      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	4baf      	ldr	r3, [pc, #700]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x2a8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd ff0e 	bl	8000e88 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd ff0a 	bl	8000e88 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e2a9      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	4ba5      	ldr	r3, [pc, #660]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x2d0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d060      	beq.n	8003160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x310>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d119      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	4b99      	ldr	r3, [pc, #612]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x328>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e286      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b93      	ldr	r3, [pc, #588]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4990      	ldr	r1, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030dc:	e040      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d023      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e6:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8b      	ldr	r2, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fec9 	bl	8000e88 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fd fec5 	bl	8000e88 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e264      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	497c      	ldr	r1, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fd fea5 	bl	8000e88 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fd fea1 	bl	8000e88 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e240      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fd fe80 	bl	8000e88 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fd fe7c 	bl	8000e88 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e21b      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <HAL_RCC_OscConfig+0x3ec>
 80031ac:	e01b      	b.n	80031e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fd fe63 	bl	8000e88 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fd fe5f 	bl	8000e88 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1fe      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ef      	bne.n	80031c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a6 	beq.w	8003340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a43      	ldr	r2, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d118      	bne.n	800325e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003238:	f7fd fe26 	bl	8000e88 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fd fe22 	bl	8000e88 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1c1      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x4d8>
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e024      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d110      	bne.n	80032a2 <HAL_RCC_OscConfig+0x502>
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a0:	e00f      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fd fddd 	bl	8000e88 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fdd9 	bl	8000e88 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e176      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ed      	beq.n	80032d2 <HAL_RCC_OscConfig+0x532>
 80032f6:	e01a      	b.n	800332e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd fdc6 	bl	8000e88 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fdc2 	bl	8000e88 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d906      	bls.n	8003320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e15f      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4baa      	ldr	r3, [pc, #680]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e8      	bne.n	8003300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4ba5      	ldr	r3, [pc, #660]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4aa4      	ldr	r2, [pc, #656]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01c      	beq.n	800338e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003354:	4b9d      	ldr	r3, [pc, #628]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335a:	4a9c      	ldr	r2, [pc, #624]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fd fd90 	bl	8000e88 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336c:	f7fd fd8c 	bl	8000e88 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e12b      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800337e:	4b93      	ldr	r3, [pc, #588]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCC_OscConfig+0x5cc>
 800338c:	e01b      	b.n	80033c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800338e:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003394:	4a8d      	ldr	r2, [pc, #564]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fd fd73 	bl	8000e88 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a6:	f7fd fd6f 	bl	8000e88 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e10e      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ef      	bne.n	80033a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8102 	beq.w	80035d4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	f040 80c5 	bne.w	8003564 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d12c      	bne.n	8003448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	3b01      	subs	r3, #1
 80033fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d123      	bne.n	8003448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d11b      	bne.n	8003448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d113      	bne.n	8003448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d109      	bne.n	8003448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	3b01      	subs	r3, #1
 8003442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d067      	beq.n	8003518 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d062      	beq.n	8003514 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0bb      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003468:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800346a:	f7fd fd0d 	bl	8000e88 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fd fd09 	bl	8000e88 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0a8      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003490:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <HAL_RCC_OscConfig+0x830>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034a0:	3a01      	subs	r2, #1
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034aa:	0212      	lsls	r2, r2, #8
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0552      	lsls	r2, r2, #21
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034be:	0852      	lsrs	r2, r2, #1
 80034c0:	3a01      	subs	r2, #1
 80034c2:	0652      	lsls	r2, r2, #25
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ca:	06d2      	lsls	r2, r2, #27
 80034cc:	430a      	orrs	r2, r1
 80034ce:	493f      	ldr	r1, [pc, #252]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034d4:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ec:	f7fd fccc 	bl	8000e88 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fcc8 	bl	8000e88 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e067      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003512:	e05f      	b.n	80035d4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e05e      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003518:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d157      	bne.n	80035d4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800353c:	f7fd fca4 	bl	8000e88 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fca0 	bl	8000e88 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e03f      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x7a4>
 8003562:	e037      	b.n	80035d4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d02d      	beq.n	80035c6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003574:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 8003594:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd fc73 	bl	8000e88 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fd fc6f 	bl	8000e88 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e00e      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_RCC_OscConfig+0x82c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x806>
 80035c4:	e006      	b.n	80035d4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e005      	b.n	80035d6 <HAL_RCC_OscConfig+0x836>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0c8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4961      	ldr	r1, [pc, #388]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b0      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d04c      	beq.n	80036ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d121      	bne.n	8003688 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e09e      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d115      	bne.n	8003688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e092      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003668:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e086      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e07e      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 0203 	bic.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	493f      	ldr	r1, [pc, #252]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369a:	f7fd fbf5 	bl	8000e88 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a2:	f7fd fbf1 	bl	8000e88 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e066      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 020c 	and.w	r2, r3, #12
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d1eb      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	492c      	ldr	r1, [pc, #176]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d210      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 0207 	bic.w	r2, r3, #7
 80036fe:	4924      	ldr	r1, [pc, #144]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x1b0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e036      	b.n	8003786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4918      	ldr	r1, [pc, #96]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4910      	ldr	r1, [pc, #64]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003756:	f000 f825 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800375a:	4601      	mov	r1, r0
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_ClockConfig+0x1b4>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	fa21 f303 	lsr.w	r3, r1, r3
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fb34 	bl	8000de8 <HAL_InitTick>
 8003780:	4603      	mov	r3, r0
 8003782:	72fb      	strb	r3, [r7, #11]

  return status;
 8003784:	7afb      	ldrb	r3, [r7, #11]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
 8003798:	080090c8 	.word	0x080090c8
 800379c:	20000000 	.word	0x20000000
 80037a0:	20000004 	.word	0x20000004

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x34>
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d121      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d11e      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037f4:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003800:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003814:	e00a      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d102      	bne.n	8003822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	e004      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d101      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d133      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0xa4>
 8003842:	2b03      	cmp	r3, #3
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0xaa>
 8003846:	e005      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800384a:	617b      	str	r3, [r7, #20]
      break;
 800384c:	e005      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003850:	617b      	str	r3, [r7, #20]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	617b      	str	r3, [r7, #20]
      break;
 8003858:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	3301      	adds	r3, #1
 8003866:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	fb02 f203 	mul.w	r2, r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0e5b      	lsrs	r3, r3, #25
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800389a:	69bb      	ldr	r3, [r7, #24]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3724      	adds	r7, #36	; 0x24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40021000 	.word	0x40021000
 80038ac:	080090e0 	.word	0x080090e0
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4601      	mov	r1, r0
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	080090d8 	.word	0x080090d8

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003900:	f7ff ffda 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003904:	4601      	mov	r1, r0
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	080090d8 	.word	0x080090d8

08003928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003940:	f7ff f8f8 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 8003944:	6178      	str	r0, [r7, #20]
 8003946:	e014      	b.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
 8003954:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003960:	f7ff f8e8 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 8003964:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003978:	d10b      	bne.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d919      	bls.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2ba0      	cmp	r3, #160	; 0xa0
 8003984:	d902      	bls.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003986:	2302      	movs	r3, #2
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e013      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800398c:	2301      	movs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e010      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d902      	bls.n	800399e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003998:	2303      	movs	r3, #3
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e00a      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d102      	bne.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a4:	2302      	movs	r3, #2
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e004      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b70      	cmp	r3, #112	; 0x70
 80039ae:	d101      	bne.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 0207 	bic.w	r2, r3, #7
 80039bc:	4909      	ldr	r1, [pc, #36]	; (80039e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40022000 	.word	0x40022000

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f4:	2300      	movs	r3, #0
 80039f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02f      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a1a:	4b5d      	ldr	r3, [pc, #372]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a5c      	ldr	r2, [pc, #368]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a26:	e00c      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa54 	bl	8003edc <RCCEx_PLLSAI1_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a48:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	494e      	ldr	r1, [pc, #312]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a5e:	e001      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 809e 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a76:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	4a3f      	ldr	r2, [pc, #252]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	; 0x58
 8003a98:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab4:	f7fd f9e8 	bl	8000e88 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aba:	e009      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fd f9e4 	bl	8000e88 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ace:	e005      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ad0:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d15a      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01e      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d019      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd f9a4 	bl	8000e88 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	e00b      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fd f9a0 	bl	8000e88 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d902      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	74fb      	strb	r3, [r7, #19]
            break;
 8003b5a:	e006      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ec      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7e:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b86:	e009      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9c:	7c7b      	ldrb	r3, [r7, #17]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b9e      	ldr	r3, [pc, #632]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a9d      	ldr	r2, [pc, #628]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bba:	4b98      	ldr	r3, [pc, #608]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4994      	ldr	r1, [pc, #592]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 020c 	bic.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	498c      	ldr	r1, [pc, #560]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bfe:	4b87      	ldr	r3, [pc, #540]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	4983      	ldr	r1, [pc, #524]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	497b      	ldr	r1, [pc, #492]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	4972      	ldr	r1, [pc, #456]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c64:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	496a      	ldr	r1, [pc, #424]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	4961      	ldr	r1, [pc, #388]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	4959      	ldr	r1, [pc, #356]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	4950      	ldr	r1, [pc, #320]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	4948      	ldr	r1, [pc, #288]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	493f      	ldr	r1, [pc, #252]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f8b4 	bl	8003edc <RCCEx_PLLSAI1_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	491f      	ldr	r1, [pc, #124]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db8:	60d3      	str	r3, [r2, #12]
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f885 	bl	8003edc <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e014      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f853 	bl	8003edc <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01c      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f830 	bl	8003edc <RCCEx_PLLSAI1_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000

08003ebc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ec6:	f043 0304 	orr.w	r3, r3, #4
 8003eca:	6013      	str	r3, [r2, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000

08003edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eea:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ef6:	4b70      	ldr	r3, [pc, #448]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0203 	and.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d10d      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
       ||
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d044      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e041      	b.n	8003fac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d00c      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0x6e>
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d013      	beq.n	8003f5c <RCCEx_PLLSAI1_Config+0x80>
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d120      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f38:	4b5f      	ldr	r3, [pc, #380]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11d      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e01a      	b.n	8003f80 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5a:	e013      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f5c:	4b56      	ldr	r3, [pc, #344]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f68:	4b53      	ldr	r3, [pc, #332]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f78:	e006      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7e:	e004      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f88:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10d      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f90:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	4944      	ldr	r1, [pc, #272]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d17c      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fc ff63 	bl	8000e88 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc4:	e009      	b.n	8003fda <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc6:	f7fc ff5f 	bl	8000e88 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d902      	bls.n	8003fda <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd8:	e005      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fda:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1ef      	bne.n	8003fc6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d15f      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d110      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68d2      	ldr	r2, [r2, #12]
 8004008:	06d2      	lsls	r2, r2, #27
 800400a:	430a      	orrs	r2, r1
 800400c:	492a      	ldr	r1, [pc, #168]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]
 8004012:	e027      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d112      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	0211      	lsls	r1, r2, #8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	0852      	lsrs	r2, r2, #1
 8004032:	3a01      	subs	r2, #1
 8004034:	0552      	lsls	r2, r2, #21
 8004036:	430a      	orrs	r2, r1
 8004038:	491f      	ldr	r1, [pc, #124]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
 800403e:	e011      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6952      	ldr	r2, [r2, #20]
 8004056:	0852      	lsrs	r2, r2, #1
 8004058:	3a01      	subs	r2, #1
 800405a:	0652      	lsls	r2, r2, #25
 800405c:	430a      	orrs	r2, r1
 800405e:	4916      	ldr	r1, [pc, #88]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800406a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fc ff0a 	bl	8000e88 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004076:	e009      	b.n	800408c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004078:	f7fc ff06 	bl	8000e88 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	73fb      	strb	r3, [r7, #15]
          break;
 800408a:	e005      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4904      	ldr	r1, [pc, #16]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000

080040bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e095      	b.n	80041fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040de:	d009      	beq.n	80040f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	61da      	str	r2, [r3, #28]
 80040e6:	e005      	b.n	80040f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fc94 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004134:	d902      	bls.n	800413c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e002      	b.n	8004142 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800413c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800414a:	d007      	beq.n	800415c <HAL_SPI_Init+0xa0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004154:	d002      	beq.n	800415c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	ea42 0103 	orr.w	r1, r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	f003 0204 	and.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e040      	b.n	8004296 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fc fcb9 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2224      	movs	r2, #36	; 0x24
 800422e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f82d 	bl	80042a0 <UART_SetConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e022      	b.n	8004296 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa7f 	bl	800475c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fb06 	bl	80048a0 <UART_CheckIdleState>
 8004294:	4603      	mov	r3, r0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042a4:	b088      	sub	sp, #32
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4ba4      	ldr	r3, [pc, #656]	; (8004560 <UART_SetConfig+0x2c0>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a9a      	ldr	r2, [pc, #616]	; (8004564 <UART_SetConfig+0x2c4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	4313      	orrs	r3, r2
 8004308:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a91      	ldr	r2, [pc, #580]	; (8004568 <UART_SetConfig+0x2c8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d121      	bne.n	800436c <UART_SetConfig+0xcc>
 8004328:	4b90      	ldr	r3, [pc, #576]	; (800456c <UART_SetConfig+0x2cc>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b03      	cmp	r3, #3
 8004334:	d816      	bhi.n	8004364 <UART_SetConfig+0xc4>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x9c>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	0800434d 	.word	0x0800434d
 8004340:	08004359 	.word	0x08004359
 8004344:	08004353 	.word	0x08004353
 8004348:	0800435f 	.word	0x0800435f
 800434c:	2301      	movs	r3, #1
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e0be      	b.n	80044d0 <UART_SetConfig+0x230>
 8004352:	2302      	movs	r3, #2
 8004354:	76fb      	strb	r3, [r7, #27]
 8004356:	e0bb      	b.n	80044d0 <UART_SetConfig+0x230>
 8004358:	2304      	movs	r3, #4
 800435a:	76fb      	strb	r3, [r7, #27]
 800435c:	e0b8      	b.n	80044d0 <UART_SetConfig+0x230>
 800435e:	2308      	movs	r3, #8
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e0b5      	b.n	80044d0 <UART_SetConfig+0x230>
 8004364:	2310      	movs	r3, #16
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	bf00      	nop
 800436a:	e0b1      	b.n	80044d0 <UART_SetConfig+0x230>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <UART_SetConfig+0x2d0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d134      	bne.n	80043e0 <UART_SetConfig+0x140>
 8004376:	4b7d      	ldr	r3, [pc, #500]	; (800456c <UART_SetConfig+0x2cc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d829      	bhi.n	80043d8 <UART_SetConfig+0x138>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0xec>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043d9 	.word	0x080043d9
 8004394:	080043d9 	.word	0x080043d9
 8004398:	080043d9 	.word	0x080043d9
 800439c:	080043cd 	.word	0x080043cd
 80043a0:	080043d9 	.word	0x080043d9
 80043a4:	080043d9 	.word	0x080043d9
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043c7 	.word	0x080043c7
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043d9 	.word	0x080043d9
 80043bc:	080043d3 	.word	0x080043d3
 80043c0:	2300      	movs	r3, #0
 80043c2:	76fb      	strb	r3, [r7, #27]
 80043c4:	e084      	b.n	80044d0 <UART_SetConfig+0x230>
 80043c6:	2302      	movs	r3, #2
 80043c8:	76fb      	strb	r3, [r7, #27]
 80043ca:	e081      	b.n	80044d0 <UART_SetConfig+0x230>
 80043cc:	2304      	movs	r3, #4
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e07e      	b.n	80044d0 <UART_SetConfig+0x230>
 80043d2:	2308      	movs	r3, #8
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e07b      	b.n	80044d0 <UART_SetConfig+0x230>
 80043d8:	2310      	movs	r3, #16
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	bf00      	nop
 80043de:	e077      	b.n	80044d0 <UART_SetConfig+0x230>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a63      	ldr	r2, [pc, #396]	; (8004574 <UART_SetConfig+0x2d4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d120      	bne.n	800442c <UART_SetConfig+0x18c>
 80043ea:	4b60      	ldr	r3, [pc, #384]	; (800456c <UART_SetConfig+0x2cc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d00f      	beq.n	8004418 <UART_SetConfig+0x178>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d802      	bhi.n	8004402 <UART_SetConfig+0x162>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <UART_SetConfig+0x16c>
 8004400:	e010      	b.n	8004424 <UART_SetConfig+0x184>
 8004402:	2b20      	cmp	r3, #32
 8004404:	d005      	beq.n	8004412 <UART_SetConfig+0x172>
 8004406:	2b30      	cmp	r3, #48	; 0x30
 8004408:	d009      	beq.n	800441e <UART_SetConfig+0x17e>
 800440a:	e00b      	b.n	8004424 <UART_SetConfig+0x184>
 800440c:	2300      	movs	r3, #0
 800440e:	76fb      	strb	r3, [r7, #27]
 8004410:	e05e      	b.n	80044d0 <UART_SetConfig+0x230>
 8004412:	2302      	movs	r3, #2
 8004414:	76fb      	strb	r3, [r7, #27]
 8004416:	e05b      	b.n	80044d0 <UART_SetConfig+0x230>
 8004418:	2304      	movs	r3, #4
 800441a:	76fb      	strb	r3, [r7, #27]
 800441c:	e058      	b.n	80044d0 <UART_SetConfig+0x230>
 800441e:	2308      	movs	r3, #8
 8004420:	76fb      	strb	r3, [r7, #27]
 8004422:	e055      	b.n	80044d0 <UART_SetConfig+0x230>
 8004424:	2310      	movs	r3, #16
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	bf00      	nop
 800442a:	e051      	b.n	80044d0 <UART_SetConfig+0x230>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a51      	ldr	r2, [pc, #324]	; (8004578 <UART_SetConfig+0x2d8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d120      	bne.n	8004478 <UART_SetConfig+0x1d8>
 8004436:	4b4d      	ldr	r3, [pc, #308]	; (800456c <UART_SetConfig+0x2cc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d00f      	beq.n	8004464 <UART_SetConfig+0x1c4>
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d802      	bhi.n	800444e <UART_SetConfig+0x1ae>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <UART_SetConfig+0x1b8>
 800444c:	e010      	b.n	8004470 <UART_SetConfig+0x1d0>
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d005      	beq.n	800445e <UART_SetConfig+0x1be>
 8004452:	2bc0      	cmp	r3, #192	; 0xc0
 8004454:	d009      	beq.n	800446a <UART_SetConfig+0x1ca>
 8004456:	e00b      	b.n	8004470 <UART_SetConfig+0x1d0>
 8004458:	2300      	movs	r3, #0
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e038      	b.n	80044d0 <UART_SetConfig+0x230>
 800445e:	2302      	movs	r3, #2
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e035      	b.n	80044d0 <UART_SetConfig+0x230>
 8004464:	2304      	movs	r3, #4
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e032      	b.n	80044d0 <UART_SetConfig+0x230>
 800446a:	2308      	movs	r3, #8
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e02f      	b.n	80044d0 <UART_SetConfig+0x230>
 8004470:	2310      	movs	r3, #16
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	bf00      	nop
 8004476:	e02b      	b.n	80044d0 <UART_SetConfig+0x230>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	; (8004564 <UART_SetConfig+0x2c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d124      	bne.n	80044cc <UART_SetConfig+0x22c>
 8004482:	4b3a      	ldr	r3, [pc, #232]	; (800456c <UART_SetConfig+0x2cc>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d012      	beq.n	80044b8 <UART_SetConfig+0x218>
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d802      	bhi.n	800449e <UART_SetConfig+0x1fe>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <UART_SetConfig+0x20c>
 800449c:	e012      	b.n	80044c4 <UART_SetConfig+0x224>
 800449e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a2:	d006      	beq.n	80044b2 <UART_SetConfig+0x212>
 80044a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a8:	d009      	beq.n	80044be <UART_SetConfig+0x21e>
 80044aa:	e00b      	b.n	80044c4 <UART_SetConfig+0x224>
 80044ac:	2300      	movs	r3, #0
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e00e      	b.n	80044d0 <UART_SetConfig+0x230>
 80044b2:	2302      	movs	r3, #2
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x230>
 80044b8:	2304      	movs	r3, #4
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e008      	b.n	80044d0 <UART_SetConfig+0x230>
 80044be:	2308      	movs	r3, #8
 80044c0:	76fb      	strb	r3, [r7, #27]
 80044c2:	e005      	b.n	80044d0 <UART_SetConfig+0x230>
 80044c4:	2310      	movs	r3, #16
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	bf00      	nop
 80044ca:	e001      	b.n	80044d0 <UART_SetConfig+0x230>
 80044cc:	2310      	movs	r3, #16
 80044ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <UART_SetConfig+0x2c4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f040 8085 	bne.w	80045e6 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044dc:	7efb      	ldrb	r3, [r7, #27]
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d823      	bhi.n	800452a <UART_SetConfig+0x28a>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x248>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800451b 	.word	0x0800451b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7ff f9e0 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <UART_SetConfig+0x2dc>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7ff f943 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8102 	beq.w	8004740 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	d305      	bcc.n	8004558 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	d913      	bls.n	8004580 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	76bb      	strb	r3, [r7, #26]
 800455c:	e0f0      	b.n	8004740 <UART_SetConfig+0x4a0>
 800455e:	bf00      	nop
 8004560:	efff69f3 	.word	0xefff69f3
 8004564:	40008000 	.word	0x40008000
 8004568:	40013800 	.word	0x40013800
 800456c:	40021000 	.word	0x40021000
 8004570:	40004400 	.word	0x40004400
 8004574:	40004800 	.word	0x40004800
 8004578:	40004c00 	.word	0x40004c00
 800457c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	f04f 0400 	mov.w	r4, #0
 8004590:	0214      	lsls	r4, r2, #8
 8004592:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004596:	020b      	lsls	r3, r1, #8
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	0852      	lsrs	r2, r2, #1
 800459e:	4611      	mov	r1, r2
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	eb13 0b01 	adds.w	fp, r3, r1
 80045a8:	eb44 0c02 	adc.w	ip, r4, r2
 80045ac:	4658      	mov	r0, fp
 80045ae:	4661      	mov	r1, ip
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	461a      	mov	r2, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	f7fb fe0a 	bl	80001d4 <__aeabi_uldivmod>
 80045c0:	4603      	mov	r3, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045cc:	d308      	bcc.n	80045e0 <UART_SetConfig+0x340>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d4:	d204      	bcs.n	80045e0 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e0af      	b.n	8004740 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	76bb      	strb	r3, [r7, #26]
 80045e4:	e0ac      	b.n	8004740 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ee:	d15b      	bne.n	80046a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80045f0:	7efb      	ldrb	r3, [r7, #27]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d827      	bhi.n	8004646 <UART_SetConfig+0x3a6>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x35c>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	08004647 	.word	0x08004647
 800460c:	08004637 	.word	0x08004637
 8004610:	08004647 	.word	0x08004647
 8004614:	08004647 	.word	0x08004647
 8004618:	08004647 	.word	0x08004647
 800461c:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7ff f956 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8004624:	6178      	str	r0, [r7, #20]
        break;
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7ff f968 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 800462c:	6178      	str	r0, [r7, #20]
        break;
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b49      	ldr	r3, [pc, #292]	; (8004758 <UART_SetConfig+0x4b8>)
 8004632:	617b      	str	r3, [r7, #20]
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7ff f8b5 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800463a:	6178      	str	r0, [r7, #20]
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004642:	617b      	str	r3, [r7, #20]
        break;
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	76bb      	strb	r3, [r7, #26]
        break;
 800464e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d074      	beq.n	8004740 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	005a      	lsls	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b0f      	cmp	r3, #15
 8004672:	d916      	bls.n	80046a2 <UART_SetConfig+0x402>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467a:	d212      	bcs.n	80046a2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f023 030f 	bic.w	r3, r3, #15
 8004684:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	b29a      	uxth	r2, r3
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	4313      	orrs	r3, r2
 8004696:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	89fa      	ldrh	r2, [r7, #14]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	e04e      	b.n	8004740 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	76bb      	strb	r3, [r7, #26]
 80046a6:	e04b      	b.n	8004740 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a8:	7efb      	ldrb	r3, [r7, #27]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d827      	bhi.n	80046fe <UART_SetConfig+0x45e>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x414>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7ff f8fa 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 80046dc:	6178      	str	r0, [r7, #20]
        break;
 80046de:	e013      	b.n	8004708 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7ff f90c 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 80046e4:	6178      	str	r0, [r7, #20]
        break;
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <UART_SetConfig+0x4b8>)
 80046ea:	617b      	str	r3, [r7, #20]
        break;
 80046ec:	e00c      	b.n	8004708 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7ff f859 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 80046f2:	6178      	str	r0, [r7, #20]
        break;
 80046f4:	e008      	b.n	8004708 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fa:	617b      	str	r3, [r7, #20]
        break;
 80046fc:	e004      	b.n	8004708 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	76bb      	strb	r3, [r7, #26]
        break;
 8004706:	bf00      	nop
    }

    if (pclk != 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085a      	lsrs	r2, r3, #1
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d908      	bls.n	800473c <UART_SetConfig+0x49c>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d204      	bcs.n	800473c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	e001      	b.n	8004740 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800474c:	7ebb      	ldrb	r3, [r7, #26]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004758:	00f42400 	.word	0x00f42400

0800475c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01a      	beq.n	8004872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d10a      	bne.n	8004872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048ae:	f7fc faeb 	bl	8000e88 <HAL_GetTick>
 80048b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d10e      	bne.n	80048e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f82a 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e020      	b.n	8004922 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d10e      	bne.n	800490c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f814 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e00a      	b.n	8004922 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	e05d      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d059      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fc faa0 	bl	8000e88 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <UART_WaitOnFlagUntilTimeout+0x30>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11b      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004968:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e042      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02b      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d123      	bne.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e00f      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d092      	beq.n	800493c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a20:	b084      	sub	sp, #16
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	f107 0014 	add.w	r0, r7, #20
 8004a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	b004      	add	sp, #16
 8004a40:	4770      	bx	lr

08004a42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a52:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 0014 	add.w	r0, r7, #20
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	b004      	add	sp, #16
 8004b00:	4770      	bx	lr
	...

08004b04 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b09b      	sub	sp, #108	; 0x6c
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d81f      	bhi.n	8004b76 <USB_ActivateEndpoint+0x72>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <USB_ActivateEndpoint+0x38>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b7f 	.word	0x08004b7f
 8004b48:	08004b5b 	.word	0x08004b5b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b54:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b58:	e012      	b.n	8004b80 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b66:	e00b      	b.n	8004b80 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b74:	e004      	b.n	8004b80 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b7c:	e000      	b.n	8004b80 <USB_ActivateEndpoint+0x7c>
      break;
 8004b7e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	b21a      	sxth	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b21b      	sxth	r3, r3
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	7b1b      	ldrb	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 8149 	bne.w	8004e88 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8084 	beq.w	8004d08 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	00da      	lsls	r2, r3, #3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	88db      	ldrh	r3, [r3, #6]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	81fb      	strh	r3, [r7, #14]
 8004c42:	89fb      	ldrh	r3, [r7, #14]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <USB_ActivateEndpoint+0x180>
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	81bb      	strh	r3, [r7, #12]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	89bb      	ldrh	r3, [r7, #12]
 8004c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	78db      	ldrb	r3, [r3, #3]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d020      	beq.n	8004cce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca2:	813b      	strh	r3, [r7, #8]
 8004ca4:	893b      	ldrh	r3, [r7, #8]
 8004ca6:	f083 0320 	eor.w	r3, r3, #32
 8004caa:	813b      	strh	r3, [r7, #8]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	8013      	strh	r3, [r2, #0]
 8004ccc:	e27f      	b.n	80051ce <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce4:	817b      	strh	r3, [r7, #10]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	897b      	ldrh	r3, [r7, #10]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
 8004d06:	e262      	b.n	80051ce <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	4413      	add	r3, r2
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	00da      	lsls	r2, r3, #3
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	4413      	add	r3, r2
 8004d26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	88db      	ldrh	r3, [r3, #6]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	4413      	add	r3, r2
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	00da      	lsls	r2, r3, #3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d112      	bne.n	8004d8e <USB_ActivateEndpoint+0x28a>
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	801a      	strh	r2, [r3, #0]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e02f      	b.n	8004dee <USB_ActivateEndpoint+0x2ea>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b3e      	cmp	r3, #62	; 0x3e
 8004d94:	d813      	bhi.n	8004dbe <USB_ActivateEndpoint+0x2ba>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <USB_ActivateEndpoint+0x2ac>
 8004daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dac:	3301      	adds	r3, #1
 8004dae:	663b      	str	r3, [r7, #96]	; 0x60
 8004db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	029b      	lsls	r3, r3, #10
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e017      	b.n	8004dee <USB_ActivateEndpoint+0x2ea>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <USB_ActivateEndpoint+0x2d4>
 8004dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	029b      	lsls	r3, r3, #10
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	83fb      	strh	r3, [r7, #30]
 8004dfc:	8bfb      	ldrh	r3, [r7, #30]
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01b      	beq.n	8004e3e <USB_ActivateEndpoint+0x33a>
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	83bb      	strh	r3, [r7, #28]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	8bbb      	ldrh	r3, [r7, #28]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	837b      	strh	r3, [r7, #26]
 8004e56:	8b7b      	ldrh	r3, [r7, #26]
 8004e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e5c:	837b      	strh	r3, [r7, #26]
 8004e5e:	8b7b      	ldrh	r3, [r7, #26]
 8004e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e64:	837b      	strh	r3, [r7, #26]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8b7b      	ldrh	r3, [r7, #26]
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
 8004e86:	e1a2      	b.n	80051ce <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed4:	4413      	add	r3, r2
 8004ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00da      	lsls	r2, r3, #3
 8004ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	891b      	ldrh	r3, [r3, #8]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	653b      	str	r3, [r7, #80]	; 0x50
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f08:	4413      	add	r3, r2
 8004f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	00da      	lsls	r2, r3, #3
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	4413      	add	r3, r2
 8004f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f040 8091 	bne.w	8005058 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01b      	beq.n	8004f86 <USB_ActivateEndpoint+0x482>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <USB_ActivateEndpoint+0x4d2>
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ff6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800500a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501a:	b29b      	uxth	r3, r3
 800501c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005034:	867b      	strh	r3, [r7, #50]	; 0x32
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
 8005056:	e0ba      	b.n	80051ce <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005068:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800506c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01d      	beq.n	80050b0 <USB_ActivateEndpoint+0x5ac>
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01d      	beq.n	8005108 <USB_ActivateEndpoint+0x604>
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005100:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005104:	b29b      	uxth	r3, r3
 8005106:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	78db      	ldrb	r3, [r3, #3]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d024      	beq.n	800515a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800512a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800512e:	f083 0320 	eor.w	r3, r3, #32
 8005132:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005154:	b29b      	uxth	r3, r3
 8005156:	8013      	strh	r3, [r2, #0]
 8005158:	e01d      	b.n	8005196 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	376c      	adds	r7, #108	; 0x6c
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop

080051e0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b08d      	sub	sp, #52	; 0x34
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	7b1b      	ldrb	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 808e 	bne.w	8005310 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d044      	beq.n	8005286 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	81bb      	strh	r3, [r7, #12]
 800520a:	89bb      	ldrh	r3, [r7, #12]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <USB_DeactivateEndpoint+0x6c>
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	817b      	strh	r3, [r7, #10]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	897b      	ldrh	r3, [r7, #10]
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005244:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005262:	813b      	strh	r3, [r7, #8]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	893b      	ldrh	r3, [r7, #8]
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	e192      	b.n	80055ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	827b      	strh	r3, [r7, #18]
 8005294:	8a7b      	ldrh	r3, [r7, #18]
 8005296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <USB_DeactivateEndpoint+0xf6>
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	823b      	strh	r3, [r7, #16]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	8a3b      	ldrh	r3, [r7, #16]
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ec:	81fb      	strh	r3, [r7, #14]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e14d      	b.n	80055ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 80a5 	bne.w	8005464 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	843b      	strh	r3, [r7, #32]
 8005328:	8c3b      	ldrh	r3, [r7, #32]
 800532a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01b      	beq.n	800536a <USB_DeactivateEndpoint+0x18a>
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	83fb      	strh	r3, [r7, #30]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	83bb      	strh	r3, [r7, #28]
 8005378:	8bbb      	ldrh	r3, [r7, #28]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01b      	beq.n	80053ba <USB_DeactivateEndpoint+0x1da>
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	837b      	strh	r3, [r7, #26]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	8b7b      	ldrh	r3, [r7, #26]
 80053a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	833b      	strh	r3, [r7, #24]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	441a      	add	r2, r3
 80053dc:	8b3b      	ldrh	r3, [r7, #24]
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	82fb      	strh	r3, [r7, #22]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8afb      	ldrh	r3, [r7, #22]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005440:	82bb      	strh	r3, [r7, #20]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	8abb      	ldrh	r3, [r7, #20]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e0a3      	b.n	80055ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <USB_DeactivateEndpoint+0x2d4>
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <USB_DeactivateEndpoint+0x324>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	b29b      	uxth	r3, r3
 8005572:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	847b      	strh	r3, [r7, #34]	; 0x22
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3734      	adds	r7, #52	; 0x34
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b0c4      	sub	sp, #272	; 0x110
 80055be:	af00      	add	r7, sp, #0
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	6018      	str	r0, [r3, #0]
 80055c4:	463b      	mov	r3, r7
 80055c6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	f040 8566 	bne.w	80060a0 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d905      	bls.n	80055f0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055ee:	e004      	b.n	80055fa <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	7b1b      	ldrb	r3, [r3, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d12c      	bne.n	800565e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	88da      	ldrh	r2, [r3, #6]
 8005610:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005614:	b29b      	uxth	r3, r3
 8005616:	1d38      	adds	r0, r7, #4
 8005618:	6800      	ldr	r0, [r0, #0]
 800561a:	f001 fa58 	bl	8006ace <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	00da      	lsls	r2, r3, #3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4413      	add	r3, r2
 8005642:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005650:	b29a      	uxth	r2, r3
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	f000 bcec 	b.w	8006036 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f040 8356 	bne.w	8005d16 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	f240 82fa 	bls.w	8005c70 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	463b      	mov	r3, r7
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800569a:	1d3b      	adds	r3, r7, #4
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 815e 	beq.w	80059b4 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d164      	bne.n	80057d2 <USB_EPStartXfer+0x218>
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	4413      	add	r3, r2
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	00da      	lsls	r2, r3, #3
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	4413      	add	r3, r2
 800572c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
 8005732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005736:	2b00      	cmp	r3, #0
 8005738:	d112      	bne.n	8005760 <USB_EPStartXfer+0x1a6>
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005744:	b29a      	uxth	r2, r3
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005758:	b29a      	uxth	r2, r3
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	e054      	b.n	800580a <USB_EPStartXfer+0x250>
 8005760:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005764:	2b3e      	cmp	r3, #62	; 0x3e
 8005766:	d817      	bhi.n	8005798 <USB_EPStartXfer+0x1de>
 8005768:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <USB_EPStartXfer+0x1ce>
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005782:	3301      	adds	r3, #1
 8005784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578c:	b29b      	uxth	r3, r3
 800578e:	029b      	lsls	r3, r3, #10
 8005790:	b29a      	uxth	r2, r3
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e038      	b.n	800580a <USB_EPStartXfer+0x250>
 8005798:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <USB_EPStartXfer+0x1fe>
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	e01b      	b.n	800580a <USB_EPStartXfer+0x250>
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d116      	bne.n	800580a <USB_EPStartXfer+0x250>
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	4413      	add	r3, r2
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	00da      	lsls	r2, r3, #3
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005804:	b29a      	uxth	r2, r3
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800580a:	463b      	mov	r3, r7
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	895b      	ldrh	r3, [r3, #10]
 8005810:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6959      	ldr	r1, [r3, #20]
 800581a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800581e:	b29b      	uxth	r3, r3
 8005820:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005824:	1d38      	adds	r0, r7, #4
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	f001 f951 	bl	8006ace <USB_WritePMA>
            ep->xfer_buff += len;
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005836:	441a      	add	r2, r3
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	d90e      	bls.n	800586c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	621a      	str	r2, [r3, #32]
 800586a:	e008      	b.n	800587e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800587e:	463b      	mov	r3, r7
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d164      	bne.n	8005952 <USB_EPStartXfer+0x398>
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	00da      	lsls	r2, r3, #3
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <USB_EPStartXfer+0x326>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d8:	b29a      	uxth	r2, r3
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	e057      	b.n	8005990 <USB_EPStartXfer+0x3d6>
 80058e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058e4:	2b3e      	cmp	r3, #62	; 0x3e
 80058e6:	d817      	bhi.n	8005918 <USB_EPStartXfer+0x35e>
 80058e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <USB_EPStartXfer+0x34e>
 80058fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005902:	3301      	adds	r3, #1
 8005904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29a      	uxth	r2, r3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e03b      	b.n	8005990 <USB_EPStartXfer+0x3d6>
 8005918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_EPStartXfer+0x37e>
 800592e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005932:	3b01      	subs	r3, #1
 8005934:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005938:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594a:	b29a      	uxth	r2, r3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e01e      	b.n	8005990 <USB_EPStartXfer+0x3d6>
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d119      	bne.n	8005990 <USB_EPStartXfer+0x3d6>
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	1d3b      	adds	r3, r7, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	4413      	add	r3, r2
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	4413      	add	r3, r2
 8005980:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800598a:	b29a      	uxth	r2, r3
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	891b      	ldrh	r3, [r3, #8]
 8005996:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6959      	ldr	r1, [r3, #20]
 80059a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80059aa:	1d38      	adds	r0, r7, #4
 80059ac:	6800      	ldr	r0, [r0, #0]
 80059ae:	f001 f88e 	bl	8006ace <USB_WritePMA>
 80059b2:	e340      	b.n	8006036 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d164      	bne.n	8005a88 <USB_EPStartXfer+0x4ce>
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d2:	4413      	add	r3, r2
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	00da      	lsls	r2, r3, #3
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d112      	bne.n	8005a16 <USB_EPStartXfer+0x45c>
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e057      	b.n	8005ac6 <USB_EPStartXfer+0x50c>
 8005a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1c:	d817      	bhi.n	8005a4e <USB_EPStartXfer+0x494>
 8005a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <USB_EPStartXfer+0x484>
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e03b      	b.n	8005ac6 <USB_EPStartXfer+0x50c>
 8005a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <USB_EPStartXfer+0x4b4>
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e01e      	b.n	8005ac6 <USB_EPStartXfer+0x50c>
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d119      	bne.n	8005ac6 <USB_EPStartXfer+0x50c>
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	657b      	str	r3, [r7, #84]	; 0x54
 8005a98:	1d3b      	adds	r3, r7, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa6:	4413      	add	r3, r2
 8005aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	00da      	lsls	r2, r3, #3
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aba:	653b      	str	r3, [r7, #80]	; 0x50
 8005abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	891b      	ldrh	r3, [r3, #8]
 8005acc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ae0:	1d38      	adds	r0, r7, #4
 8005ae2:	6800      	ldr	r0, [r0, #0]
 8005ae4:	f000 fff3 	bl	8006ace <USB_WritePMA>
            ep->xfer_buff += len;
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005af2:	441a      	add	r2, r3
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d90e      	bls.n	8005b28 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	621a      	str	r2, [r3, #32]
 8005b26:	e008      	b.n	8005b3a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d164      	bne.n	8005c14 <USB_EPStartXfer+0x65a>
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b50:	1d3b      	adds	r3, r7, #4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	4413      	add	r3, r2
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	00da      	lsls	r2, r3, #3
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d112      	bne.n	8005ba2 <USB_EPStartXfer+0x5e8>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e054      	b.n	8005c4c <USB_EPStartXfer+0x692>
 8005ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba8:	d817      	bhi.n	8005bda <USB_EPStartXfer+0x620>
 8005baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <USB_EPStartXfer+0x610>
 8005bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e038      	b.n	8005c4c <USB_EPStartXfer+0x692>
 8005bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <USB_EPStartXfer+0x640>
 8005bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e01b      	b.n	8005c4c <USB_EPStartXfer+0x692>
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d116      	bne.n	8005c4c <USB_EPStartXfer+0x692>
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2c:	4413      	add	r3, r2
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c40:	643b      	str	r3, [r7, #64]	; 0x40
 8005c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	895b      	ldrh	r3, [r3, #10]
 8005c52:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6959      	ldr	r1, [r3, #20]
 8005c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c66:	1d38      	adds	r0, r7, #4
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	f000 ff30 	bl	8006ace <USB_WritePMA>
 8005c6e:	e1e2      	b.n	8006036 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd2:	4413      	add	r3, r2
 8005cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	00da      	lsls	r2, r3, #3
 8005cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	891b      	ldrh	r3, [r3, #8]
 8005cf8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6959      	ldr	r1, [r3, #20]
 8005d02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d0c:	1d38      	adds	r0, r7, #4
 8005d0e:	6800      	ldr	r0, [r0, #0]
 8005d10:	f000 fedd 	bl	8006ace <USB_WritePMA>
 8005d14:	e18f      	b.n	8006036 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 808f 	beq.w	8005e50 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d164      	bne.n	8005e0c <USB_EPStartXfer+0x852>
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	673b      	str	r3, [r7, #112]	; 0x70
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d56:	4413      	add	r3, r2
 8005d58:	673b      	str	r3, [r7, #112]	; 0x70
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	00da      	lsls	r2, r3, #3
 8005d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d112      	bne.n	8005d9a <USB_EPStartXfer+0x7e0>
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e054      	b.n	8005e44 <USB_EPStartXfer+0x88a>
 8005d9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005da0:	d817      	bhi.n	8005dd2 <USB_EPStartXfer+0x818>
 8005da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <USB_EPStartXfer+0x808>
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e038      	b.n	8005e44 <USB_EPStartXfer+0x88a>
 8005dd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ddc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <USB_EPStartXfer+0x838>
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	3b01      	subs	r3, #1
 8005dee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	029b      	lsls	r3, r3, #10
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e01b      	b.n	8005e44 <USB_EPStartXfer+0x88a>
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d116      	bne.n	8005e44 <USB_EPStartXfer+0x88a>
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e24:	4413      	add	r3, r2
 8005e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	00da      	lsls	r2, r3, #3
 8005e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e38:	677b      	str	r3, [r7, #116]	; 0x74
 8005e3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	895b      	ldrh	r3, [r3, #10]
 8005e4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e4e:	e097      	b.n	8005f80 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d168      	bne.n	8005f2c <USB_EPStartXfer+0x972>
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e72:	4413      	add	r3, r2
 8005e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d112      	bne.n	8005eba <USB_EPStartXfer+0x900>
 8005e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e05d      	b.n	8005f76 <USB_EPStartXfer+0x9bc>
 8005eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec0:	d817      	bhi.n	8005ef2 <USB_EPStartXfer+0x938>
 8005ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <USB_EPStartXfer+0x928>
 8005ed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005edc:	3301      	adds	r3, #1
 8005ede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ee2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e041      	b.n	8005f76 <USB_EPStartXfer+0x9bc>
 8005ef2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005efc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <USB_EPStartXfer+0x958>
 8005f08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	029b      	lsls	r3, r3, #10
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	e024      	b.n	8005f76 <USB_EPStartXfer+0x9bc>
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d11f      	bne.n	8005f76 <USB_EPStartXfer+0x9bc>
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f4e:	4413      	add	r3, r2
 8005f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	00da      	lsls	r2, r3, #3
 8005f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	891b      	ldrh	r3, [r3, #8]
 8005f7c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f80:	463b      	mov	r3, r7
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6959      	ldr	r1, [r3, #20]
 8005f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f90:	1d38      	adds	r0, r7, #4
 8005f92:	6800      	ldr	r0, [r0, #0]
 8005f94:	f000 fd9b 	bl	8006ace <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f98:	463b      	mov	r3, r7
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d122      	bne.n	8005fe8 <USB_EPStartXfer+0xa2e>
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]
 8005fe6:	e026      	b.n	8006036 <USB_EPStartXfer+0xa7c>
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d121      	bne.n	8006036 <USB_EPStartXfer+0xa7c>
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	463b      	mov	r3, r7
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	463b      	mov	r3, r7
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f107 020e 	add.w	r2, r7, #14
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006054:	8013      	strh	r3, [r2, #0]
 8006056:	f107 030e 	add.w	r3, r7, #14
 800605a:	f107 020e 	add.w	r2, r7, #14
 800605e:	8812      	ldrh	r2, [r2, #0]
 8006060:	f082 0210 	eor.w	r2, r2, #16
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	f107 030e 	add.w	r3, r7, #14
 800606a:	f107 020e 	add.w	r2, r7, #14
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	f082 0220 	eor.w	r2, r2, #32
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	1d3b      	adds	r3, r7, #4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	463b      	mov	r3, r7
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	f107 030e 	add.w	r3, r7, #14
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
 800609e:	e3b5      	b.n	800680c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	7b1b      	ldrb	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 8090 	bne.w	80061cc <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d90e      	bls.n	80060da <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80060bc:	463b      	mov	r3, r7
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	619a      	str	r2, [r3, #24]
 80060d8:	e008      	b.n	80060ec <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80060e4:	463b      	mov	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060f4:	1d3b      	adds	r3, r7, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006104:	4413      	add	r3, r2
 8006106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	00da      	lsls	r2, r3, #3
 8006112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006116:	4413      	add	r3, r2
 8006118:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800611c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006124:	2b00      	cmp	r3, #0
 8006126:	d116      	bne.n	8006156 <USB_EPStartXfer+0xb9c>
 8006128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e32c      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
 8006156:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800615a:	2b3e      	cmp	r3, #62	; 0x3e
 800615c:	d818      	bhi.n	8006190 <USB_EPStartXfer+0xbd6>
 800615e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006168:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <USB_EPStartXfer+0xbc4>
 8006174:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006178:	3301      	adds	r3, #1
 800617a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800617e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e30f      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
 8006190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800619a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_EPStartXfer+0xbf6>
 80061a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061aa:	3b01      	subs	r3, #1
 80061ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e2f1      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	78db      	ldrb	r3, [r3, #3]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	f040 818f 	bne.w	80064f6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d175      	bne.n	80062ce <USB_EPStartXfer+0xd14>
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061fa:	4413      	add	r3, r2
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00da      	lsls	r2, r3, #3
 8006208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800620c:	4413      	add	r3, r2
 800620e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d116      	bne.n	800624e <USB_EPStartXfer+0xc94>
 8006220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e065      	b.n	800631a <USB_EPStartXfer+0xd60>
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b3e      	cmp	r3, #62	; 0x3e
 8006256:	d81a      	bhi.n	800628e <USB_EPStartXfer+0xcd4>
 8006258:	463b      	mov	r3, r7
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <USB_EPStartXfer+0xcc2>
 8006272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800627c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e045      	b.n	800631a <USB_EPStartXfer+0xd60>
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <USB_EPStartXfer+0xcf8>
 80062a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062ac:	3b01      	subs	r3, #1
 80062ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e025      	b.n	800631a <USB_EPStartXfer+0xd60>
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d120      	bne.n	800631a <USB_EPStartXfer+0xd60>
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f0:	4413      	add	r3, r2
 80062f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f6:	463b      	mov	r3, r7
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00da      	lsls	r2, r3, #3
 80062fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006302:	4413      	add	r3, r2
 8006304:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006322:	463b      	mov	r3, r7
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d175      	bne.n	8006418 <USB_EPStartXfer+0xe5e>
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633c:	b29b      	uxth	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006344:	4413      	add	r3, r2
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634a:	463b      	mov	r3, r7
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	00da      	lsls	r2, r3, #3
 8006352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006356:	4413      	add	r3, r2
 8006358:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800635c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d116      	bne.n	8006398 <USB_EPStartXfer+0xdde>
 800636a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e061      	b.n	800645c <USB_EPStartXfer+0xea2>
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b3e      	cmp	r3, #62	; 0x3e
 80063a0:	d81a      	bhi.n	80063d8 <USB_EPStartXfer+0xe1e>
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0xe0c>
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	e041      	b.n	800645c <USB_EPStartXfer+0xea2>
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <USB_EPStartXfer+0xe42>
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	3b01      	subs	r3, #1
 80063f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006400:	b29b      	uxth	r3, r3
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	e021      	b.n	800645c <USB_EPStartXfer+0xea2>
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d11c      	bne.n	800645c <USB_EPStartXfer+0xea2>
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006432:	4413      	add	r3, r2
 8006434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006444:	4413      	add	r3, r2
 8006446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800644a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800645a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 81a4 	beq.w	80067b0 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800647c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <USB_EPStartXfer+0xeda>
 8006488:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10d      	bne.n	80064b0 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006494:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8187 	bne.w	80067b0 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 8180 	bne.w	80067b0 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
 80064f4:	e15c      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064f6:	463b      	mov	r3, r7
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	78db      	ldrb	r3, [r3, #3]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 8155 	bne.w	80067ac <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90e      	bls.n	8006530 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	619a      	str	r2, [r3, #24]
 800652e:	e008      	b.n	8006542 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d16f      	bne.n	800662c <USB_EPStartXfer+0x1072>
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	00da      	lsls	r2, r3, #3
 8006572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006576:	4413      	add	r3, r2
 8006578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800657c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006580:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006584:	2b00      	cmp	r3, #0
 8006586:	d116      	bne.n	80065b6 <USB_EPStartXfer+0xffc>
 8006588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e05f      	b.n	8006676 <USB_EPStartXfer+0x10bc>
 80065b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ba:	2b3e      	cmp	r3, #62	; 0x3e
 80065bc:	d818      	bhi.n	80065f0 <USB_EPStartXfer+0x1036>
 80065be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <USB_EPStartXfer+0x1024>
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	3301      	adds	r3, #1
 80065da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e042      	b.n	8006676 <USB_EPStartXfer+0x10bc>
 80065f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <USB_EPStartXfer+0x1056>
 8006606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660a:	3b01      	subs	r3, #1
 800660c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e024      	b.n	8006676 <USB_EPStartXfer+0x10bc>
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d11f      	bne.n	8006676 <USB_EPStartXfer+0x10bc>
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664e:	4413      	add	r3, r2
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006654:	463b      	mov	r3, r7
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	00da      	lsls	r2, r3, #3
 800665c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006660:	4413      	add	r3, r2
 8006662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800666a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	1d3b      	adds	r3, r7, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d16f      	bne.n	8006768 <USB_EPStartXfer+0x11ae>
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006698:	b29b      	uxth	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066a0:	4413      	add	r3, r2
 80066a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a6:	463b      	mov	r3, r7
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00da      	lsls	r2, r3, #3
 80066ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d116      	bne.n	80066f2 <USB_EPStartXfer+0x1138>
 80066c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e05e      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
 80066f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f6:	2b3e      	cmp	r3, #62	; 0x3e
 80066f8:	d818      	bhi.n	800672c <USB_EPStartXfer+0x1172>
 80066fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006704:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <USB_EPStartXfer+0x1160>
 8006710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006714:	3301      	adds	r3, #1
 8006716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671e:	b29b      	uxth	r3, r3
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e041      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
 800672c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006730:	095b      	lsrs	r3, r3, #5
 8006732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2b00      	cmp	r3, #0
 8006740:	d104      	bne.n	800674c <USB_EPStartXfer+0x1192>
 8006742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006746:	3b01      	subs	r3, #1
 8006748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800674c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006750:	b29b      	uxth	r3, r3
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	b29b      	uxth	r3, r3
 8006756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e023      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d11e      	bne.n	80067b0 <USB_EPStartXfer+0x11f6>
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006782:	4413      	add	r3, r2
 8006784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	00da      	lsls	r2, r3, #3
 8006790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006794:	4413      	add	r3, r2
 8006796:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800679a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e001      	b.n	80067b0 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e02e      	b.n	800680e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b0:	1d3b      	adds	r3, r7, #4
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	463b      	mov	r3, r7
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006840:	81bb      	strh	r3, [r7, #12]
 8006842:	89bb      	ldrh	r3, [r7, #12]
 8006844:	f083 0310 	eor.w	r3, r3, #16
 8006848:	81bb      	strh	r3, [r7, #12]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	89bb      	ldrh	r3, [r7, #12]
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]
 800686a:	e01f      	b.n	80068ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	81fb      	strh	r3, [r7, #14]
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800688a:	81fb      	strh	r3, [r7, #14]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	7b1b      	ldrb	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 809d 	bne.w	8006a08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04c      	beq.n	8006970 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	823b      	strh	r3, [r7, #16]
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01b      	beq.n	8006926 <USB_EPClearStall+0x6c>
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	81fb      	strh	r3, [r7, #14]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	441a      	add	r2, r3
 8006910:	89fb      	ldrh	r3, [r7, #14]
 8006912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800691e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006922:	b29b      	uxth	r3, r3
 8006924:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	78db      	ldrb	r3, [r3, #3]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d06c      	beq.n	8006a08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	81bb      	strh	r3, [r7, #12]
 8006946:	89bb      	ldrh	r3, [r7, #12]
 8006948:	f083 0320 	eor.w	r3, r3, #32
 800694c:	81bb      	strh	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]
 800696e:	e04b      	b.n	8006a08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	82fb      	strh	r3, [r7, #22]
 800697e:	8afb      	ldrh	r3, [r7, #22]
 8006980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01b      	beq.n	80069c0 <USB_EPClearStall+0x106>
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	82bb      	strh	r3, [r7, #20]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	8abb      	ldrh	r3, [r7, #20]
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	827b      	strh	r3, [r7, #18]
 80069d8:	8a7b      	ldrh	r3, [r7, #18]
 80069da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069de:	827b      	strh	r3, [r7, #18]
 80069e0:	8a7b      	ldrh	r3, [r7, #18]
 80069e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069e6:	827b      	strh	r3, [r7, #18]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	8a7b      	ldrh	r3, [r7, #18]
 80069f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d103      	bne.n	8006a30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2280      	movs	r2, #128	; 0x80
 8006a2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b08d      	sub	sp, #52	; 0x34
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	461a      	mov	r2, r3
 8006adc:	460b      	mov	r3, r1
 8006ade:	80fb      	strh	r3, [r7, #6]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ae4:	88bb      	ldrh	r3, [r7, #4]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b04:	e01b      	b.n	8006b3e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	3301      	adds	r3, #1
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	3302      	adds	r3, #2
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	3301      	adds	r3, #1
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e0      	bne.n	8006b06 <USB_WritePMA+0x38>
  }
}
 8006b44:	bf00      	nop
 8006b46:	3734      	adds	r7, #52	; 0x34
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b08b      	sub	sp, #44	; 0x2c
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	460b      	mov	r3, r1
 8006b60:	80fb      	strh	r3, [r7, #6]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b66:	88bb      	ldrh	r3, [r7, #4]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b80:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	e018      	b.n	8006bba <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	3302      	adds	r3, #2
 8006b94:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e3      	bne.n	8006b88 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bc0:	88bb      	ldrh	r3, [r7, #4]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	701a      	strb	r2, [r3, #0]
  }
}
 8006bdc:	bf00      	nop
 8006bde:	372c      	adds	r7, #44	; 0x2c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bf8:	f002 f968 	bl	8008ecc <malloc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e066      	b.n	8006ce0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7c1b      	ldrb	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d119      	bne.n	8006c56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c26:	2202      	movs	r2, #2
 8006c28:	2181      	movs	r1, #129	; 0x81
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 ff20 	bl	8008a70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 ff16 	bl	8008a70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c54:	e016      	b.n	8006c84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2181      	movs	r1, #129	; 0x81
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 ff07 	bl	8008a70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fefe 	bl	8008a70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c84:	2308      	movs	r3, #8
 8006c86:	2203      	movs	r2, #3
 8006c88:	2182      	movs	r1, #130	; 0x82
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fef0 	bl	8008a70 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7c1b      	ldrb	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 f84e 	bl	8008d68 <USBD_LL_PrepareReceive>
 8006ccc:	e007      	b.n	8006cde <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 f845 	bl	8008d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cf4:	2181      	movs	r1, #129	; 0x81
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fef8 	bl	8008aec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d02:	2101      	movs	r1, #1
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fef1 	bl	8008aec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d12:	2182      	movs	r1, #130	; 0x82
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fee9 	bl	8008aec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d44:	4618      	mov	r0, r3
 8006d46:	f002 f8c9 	bl	8008edc <free>
    pdev->pClassData = NULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d03a      	beq.n	8006dfc <USBD_CDC_Setup+0xa0>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	f040 8097 	bne.w	8006eba <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	88db      	ldrh	r3, [r3, #6]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d029      	beq.n	8006de8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b25b      	sxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da11      	bge.n	8006dc2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006daa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	88d2      	ldrh	r2, [r2, #6]
 8006db0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006db2:	6939      	ldr	r1, [r7, #16]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fa5d 	bl	800827a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dc0:	e082      	b.n	8006ec8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	785a      	ldrb	r2, [r3, #1]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dd8:	6939      	ldr	r1, [r7, #16]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fa76 	bl	80082d2 <USBD_CtlPrepareRx>
      break;
 8006de6:	e06f      	b.n	8006ec8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	7850      	ldrb	r0, [r2, #1]
 8006df4:	2200      	movs	r2, #0
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	4798      	blx	r3
      break;
 8006dfa:	e065      	b.n	8006ec8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b0b      	cmp	r3, #11
 8006e02:	d84f      	bhi.n	8006ea4 <USBD_CDC_Setup+0x148>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <USBD_CDC_Setup+0xb0>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006eb3 	.word	0x08006eb3
 8006e14:	08006ea5 	.word	0x08006ea5
 8006e18:	08006ea5 	.word	0x08006ea5
 8006e1c:	08006ea5 	.word	0x08006ea5
 8006e20:	08006ea5 	.word	0x08006ea5
 8006e24:	08006ea5 	.word	0x08006ea5
 8006e28:	08006ea5 	.word	0x08006ea5
 8006e2c:	08006ea5 	.word	0x08006ea5
 8006e30:	08006ea5 	.word	0x08006ea5
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e8d 	.word	0x08006e8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d107      	bne.n	8006e56 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fa13 	bl	800827a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e54:	e030      	b.n	8006eb8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f99d 	bl	8008198 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	75fb      	strb	r3, [r7, #23]
          break;
 8006e62:	e029      	b.n	8006eb8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d107      	bne.n	8006e7e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e6e:	f107 030f 	add.w	r3, r7, #15
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f9ff 	bl	800827a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7c:	e01c      	b.n	8006eb8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f989 	bl	8008198 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e86:	2303      	movs	r3, #3
 8006e88:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8a:	e015      	b.n	8006eb8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d00f      	beq.n	8006eb6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f97d 	bl	8008198 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ea2:	e008      	b.n	8006eb6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f976 	bl	8008198 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb0:	e002      	b.n	8006eb8 <USBD_CDC_Setup+0x15c>
          break;
 8006eb2:	bf00      	nop
 8006eb4:	e008      	b.n	8006ec8 <USBD_CDC_Setup+0x16c>
          break;
 8006eb6:	bf00      	nop
      }
      break;
 8006eb8:	e006      	b.n	8006ec8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f96b 	bl	8008198 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop

08006ed4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e04f      	b.n	8006f96 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d029      	beq.n	8006f68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3318      	adds	r3, #24
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	78f9      	ldrb	r1, [r7, #3]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4403      	add	r3, r0
 8006f34:	3338      	adds	r3, #56	; 0x38
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f3c:	fb03 f301 	mul.w	r3, r3, r1
 8006f40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d110      	bne.n	8006f68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	3318      	adds	r3, #24
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f5a:	78f9      	ldrb	r1, [r7, #3]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fec9 	bl	8008cf8 <USBD_LL_Transmit>
 8006f66:	e015      	b.n	8006f94 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e015      	b.n	8006fec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 ff07 	bl	8008dd8 <USBD_LL_GetRxDataSize>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007002:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <USBD_CDC_EP0_RxReady+0x46>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007014:	2bff      	cmp	r3, #255	; 0xff
 8007016:	d010      	beq.n	800703a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007026:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800702e:	b292      	uxth	r2, r2
 8007030:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2243      	movs	r2, #67	; 0x43
 8007050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007052:	4b03      	ldr	r3, [pc, #12]	; (8007060 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000094 	.word	0x20000094

08007064 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2243      	movs	r2, #67	; 0x43
 8007070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000050 	.word	0x20000050

08007084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2243      	movs	r2, #67	; 0x43
 8007090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	200000d8 	.word	0x200000d8

080070a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	220a      	movs	r2, #10
 80070b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	2000000c 	.word	0x2000000c

080070c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e004      	b.n	80070e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b087      	sub	sp, #28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007100:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007130:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007156:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	e016      	b.n	8007194 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7c1b      	ldrb	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007178:	2101      	movs	r1, #1
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fdf4 	bl	8008d68 <USBD_LL_PrepareReceive>
 8007180:	e007      	b.n	8007192 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fdeb 	bl	8008d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e01f      	b.n	80071f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 fbad 	bl	8008948 <USBD_LL_Init>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007210:	2303      	movs	r3, #3
 8007212:	e016      	b.n	8007242 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	f107 020e 	add.w	r2, r7, #14
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	4602      	mov	r2, r0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fbda 	bl	8008a0c <USBD_LL_Start>
 8007258:	4603      	mov	r3, r0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	4611      	mov	r1, r2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4611      	mov	r1, r2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
  }

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 ff16 	bl	8008124 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00e      	beq.n	800733a <USBD_LL_SetupStage+0x5a>
 800731c:	2b01      	cmp	r3, #1
 800731e:	d302      	bcc.n	8007326 <USBD_LL_SetupStage+0x46>
 8007320:	2b02      	cmp	r3, #2
 8007322:	d014      	beq.n	800734e <USBD_LL_SetupStage+0x6e>
 8007324:	e01d      	b.n	8007362 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9d6 	bl	80076e0 <USBD_StdDevReq>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e020      	b.n	800737c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa3a 	bl	80077bc <USBD_StdItfReq>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
      break;
 800734c:	e016      	b.n	800737c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa76 	bl	8007848 <USBD_StdEPReq>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e00c      	b.n	800737c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800736c:	b2db      	uxtb	r3, r3
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fbf1 	bl	8008b58 <USBD_LL_StallEP>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
      break;
 800737a:	bf00      	nop
  }

  return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	460b      	mov	r3, r1
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d137      	bne.n	800740a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d14a      	bne.n	8007442 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d913      	bls.n	80073e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	bf28      	it	cs
 80073d2:	4613      	movcs	r3, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 ff97 	bl	800830c <USBD_CtlContinueRx>
 80073de:	e030      	b.n	8007442 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d105      	bne.n	8007402 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 ff93 	bl	800832e <USBD_CtlSendStatus>
 8007408:	e01b      	b.n	8007442 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d013      	beq.n	800743e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800741c:	2b03      	cmp	r3, #3
 800741e:	d10e      	bne.n	800743e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	7afa      	ldrb	r2, [r7, #11]
 800742a:	4611      	mov	r1, r2
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	4798      	blx	r3
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	e002      	b.n	8007444 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800743e:	2303      	movs	r3, #3
 8007440:	e000      	b.n	8007444 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	460b      	mov	r3, r1
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d16a      	bne.n	8007536 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3314      	adds	r3, #20
 8007464:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746c:	2b02      	cmp	r3, #2
 800746e:	d155      	bne.n	800751c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d914      	bls.n	80074a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	1ad2      	subs	r2, r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	461a      	mov	r2, r3
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 ff0c 	bl	80082b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007498:	2300      	movs	r3, #0
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f001 fc62 	bl	8008d68 <USBD_LL_PrepareReceive>
 80074a4:	e03a      	b.n	800751c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d11c      	bne.n	80074ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d316      	bcc.n	80074ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d20f      	bcs.n	80074ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074cc:	2200      	movs	r2, #0
 80074ce:	2100      	movs	r1, #0
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 feed 	bl	80082b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 fc3f 	bl	8008d68 <USBD_LL_PrepareReceive>
 80074ea:	e017      	b.n	800751c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d105      	bne.n	800750e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800750e:	2180      	movs	r1, #128	; 0x80
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 fb21 	bl	8008b58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 ff1c 	bl	8008354 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d123      	bne.n	800756e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f7ff fe9b 	bl	8007262 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007534:	e01b      	b.n	800756e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d013      	beq.n	800756a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007548:	2b03      	cmp	r3, #3
 800754a:	d10e      	bne.n	800756a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	7afa      	ldrb	r2, [r7, #11]
 8007556:	4611      	mov	r1, r2
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	4798      	blx	r3
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	e002      	b.n	8007570 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800756a:	2303      	movs	r3, #3
 800756c:	e000      	b.n	8007570 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6852      	ldr	r2, [r2, #4]
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fa54 	bl	8008a70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2240      	movs	r2, #64	; 0x40
 80075d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	2200      	movs	r2, #0
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fa46 	bl	8008a70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2240      	movs	r2, #64	; 0x40
 80075ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2204      	movs	r2, #4
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	2b04      	cmp	r3, #4
 8007654:	d105      	bne.n	8007662 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767e:	2b03      	cmp	r3, #3
 8007680:	d10b      	bne.n	800769a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	3301      	adds	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076c2:	8a3b      	ldrh	r3, [r7, #16]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	b21a      	sxth	r2, r3
 80076c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	b21b      	sxth	r3, r3
 80076d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076d2:	89fb      	ldrh	r3, [r7, #14]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d004      	beq.n	8007704 <USBD_StdDevReq+0x24>
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d002      	beq.n	8007704 <USBD_StdDevReq+0x24>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <USBD_StdDevReq+0x38>
 8007702:	e050      	b.n	80077a6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]
    break;
 8007716:	e04b      	b.n	80077b0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b09      	cmp	r3, #9
 800771e:	d83c      	bhi.n	800779a <USBD_StdDevReq+0xba>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <USBD_StdDevReq+0x48>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	0800777d 	.word	0x0800777d
 800772c:	08007791 	.word	0x08007791
 8007730:	0800779b 	.word	0x0800779b
 8007734:	08007787 	.word	0x08007787
 8007738:	0800779b 	.word	0x0800779b
 800773c:	0800775b 	.word	0x0800775b
 8007740:	08007751 	.word	0x08007751
 8007744:	0800779b 	.word	0x0800779b
 8007748:	08007773 	.word	0x08007773
 800774c:	08007765 	.word	0x08007765
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9d0 	bl	8007af8 <USBD_GetDescriptor>
      break;
 8007758:	e024      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb5f 	bl	8007e20 <USBD_SetAddress>
      break;
 8007762:	e01f      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb9c 	bl	8007ea4 <USBD_SetConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e018      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fc39 	bl	8007fec <USBD_GetConfig>
      break;
 800777a:	e013      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fc68 	bl	8008054 <USBD_GetStatus>
      break;
 8007784:	e00e      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc96 	bl	80080ba <USBD_SetFeature>
      break;
 800778e:	e009      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fca5 	bl	80080e2 <USBD_ClrFeature>
      break;
 8007798:	e004      	b.n	80077a4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fcfb 	bl	8008198 <USBD_CtlError>
      break;
 80077a2:	bf00      	nop
    }
    break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fcf5 	bl	8008198 <USBD_CtlError>
    break;
 80077ae:	bf00      	nop
  }

  return ret;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop

080077bc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d003      	beq.n	80077de <USBD_StdItfReq+0x22>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d001      	beq.n	80077de <USBD_StdItfReq+0x22>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d12a      	bne.n	8007834 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	3b01      	subs	r3, #1
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d81d      	bhi.n	8007826 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d813      	bhi.n	800781c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	88db      	ldrh	r3, [r3, #6]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d110      	bne.n	8007830 <USBD_StdItfReq+0x74>
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fd8a 	bl	800832e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800781a:	e009      	b.n	8007830 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fcba 	bl	8008198 <USBD_CtlError>
      break;
 8007824:	e004      	b.n	8007830 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fcb5 	bl	8008198 <USBD_CtlError>
      break;
 800782e:	e000      	b.n	8007832 <USBD_StdItfReq+0x76>
      break;
 8007830:	bf00      	nop
    }
    break;
 8007832:	e004      	b.n	800783e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fcae 	bl	8008198 <USBD_CtlError>
    break;
 800783c:	bf00      	nop
  }

  return ret;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	889b      	ldrh	r3, [r3, #4]
 800785a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007864:	2b20      	cmp	r3, #32
 8007866:	d004      	beq.n	8007872 <USBD_StdEPReq+0x2a>
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d002      	beq.n	8007872 <USBD_StdEPReq+0x2a>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <USBD_StdEPReq+0x3e>
 8007870:	e137      	b.n	8007ae2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
    break;
 8007884:	e132      	b.n	8007aec <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d03e      	beq.n	800790c <USBD_StdEPReq+0xc4>
 800788e:	2b03      	cmp	r3, #3
 8007890:	d002      	beq.n	8007898 <USBD_StdEPReq+0x50>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d079      	beq.n	800798a <USBD_StdEPReq+0x142>
 8007896:	e11e      	b.n	8007ad6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d002      	beq.n	80078a8 <USBD_StdEPReq+0x60>
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d015      	beq.n	80078d2 <USBD_StdEPReq+0x8a>
 80078a6:	e02b      	b.n	8007900 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <USBD_StdEPReq+0x80>
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d009      	beq.n	80078c8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f94d 	bl	8008b58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078be:	2180      	movs	r1, #128	; 0x80
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f949 	bl	8008b58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078c6:	e020      	b.n	800790a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fc64 	bl	8008198 <USBD_CtlError>
        break;
 80078d0:	e01b      	b.n	800790a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	885b      	ldrh	r3, [r3, #2]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10e      	bne.n	80078f8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_StdEPReq+0xb0>
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d008      	beq.n	80078f8 <USBD_StdEPReq+0xb0>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	88db      	ldrh	r3, [r3, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f930 	bl	8008b58 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fd18 	bl	800832e <USBD_CtlSendStatus>

        break;
 80078fe:	e004      	b.n	800790a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fc48 	bl	8008198 <USBD_CtlError>
        break;
 8007908:	bf00      	nop
      }
      break;
 800790a:	e0e9      	b.n	8007ae0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	2b02      	cmp	r3, #2
 8007914:	d002      	beq.n	800791c <USBD_StdEPReq+0xd4>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d015      	beq.n	8007946 <USBD_StdEPReq+0xfe>
 800791a:	e02f      	b.n	800797c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <USBD_StdEPReq+0xf4>
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b80      	cmp	r3, #128	; 0x80
 8007926:	d009      	beq.n	800793c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f913 	bl	8008b58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f90f 	bl	8008b58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800793a:	e025      	b.n	8007988 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fc2a 	bl	8008198 <USBD_CtlError>
        break;
 8007944:	e020      	b.n	8007988 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d11b      	bne.n	8007986 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f931 	bl	8008bc4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fce3 	bl	800832e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800797a:	e004      	b.n	8007986 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc0a 	bl	8008198 <USBD_CtlError>
        break;
 8007984:	e000      	b.n	8007988 <USBD_StdEPReq+0x140>
        break;
 8007986:	bf00      	nop
      }
      break;
 8007988:	e0aa      	b.n	8007ae0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	2b02      	cmp	r3, #2
 8007992:	d002      	beq.n	800799a <USBD_StdEPReq+0x152>
 8007994:	2b03      	cmp	r3, #3
 8007996:	d032      	beq.n	80079fe <USBD_StdEPReq+0x1b6>
 8007998:	e097      	b.n	8007aca <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <USBD_StdEPReq+0x168>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d004      	beq.n	80079b0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbf5 	bl	8008198 <USBD_CtlError>
          break;
 80079ae:	e091      	b.n	8007ad4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da0b      	bge.n	80079d0 <USBD_StdEPReq+0x188>
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	3310      	adds	r3, #16
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	3304      	adds	r3, #4
 80079ce:	e00b      	b.n	80079e8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	3304      	adds	r3, #4
 80079e8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2202      	movs	r2, #2
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc3f 	bl	800827a <USBD_CtlSendData>
        break;
 80079fc:	e06a      	b.n	8007ad4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da11      	bge.n	8007a2a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	f003 020f 	and.w	r2, r3, #15
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d117      	bne.n	8007a50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fbb8 	bl	8008198 <USBD_CtlError>
            break;
 8007a28:	e054      	b.n	8007ad4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fba5 	bl	8008198 <USBD_CtlError>
            break;
 8007a4e:	e041      	b.n	8007ad4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da0b      	bge.n	8007a70 <USBD_StdEPReq+0x228>
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	3310      	adds	r3, #16
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	e00b      	b.n	8007a88 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	3304      	adds	r3, #4
 8007a88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <USBD_StdEPReq+0x24e>
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d103      	bne.n	8007a9e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e00e      	b.n	8007abc <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f8c4 	bl	8008c30 <USBD_LL_IsStallEP>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e002      	b.n	8007abc <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fbd9 	bl	800827a <USBD_CtlSendData>
          break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb63 	bl	8008198 <USBD_CtlError>
        break;
 8007ad2:	bf00      	nop
      }
      break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb5d 	bl	8008198 <USBD_CtlError>
      break;
 8007ade:	bf00      	nop
    }
    break;
 8007ae0:	e004      	b.n	8007aec <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fb57 	bl	8008198 <USBD_CtlError>
    break;
 8007aea:	bf00      	nop
  }

  return ret;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b0e      	cmp	r3, #14
 8007b1a:	f200 8152 	bhi.w	8007dc2 <USBD_GetDescriptor+0x2ca>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <USBD_GetDescriptor+0x2c>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b95 	.word	0x08007b95
 8007b28:	08007bad 	.word	0x08007bad
 8007b2c:	08007bed 	.word	0x08007bed
 8007b30:	08007dc3 	.word	0x08007dc3
 8007b34:	08007dc3 	.word	0x08007dc3
 8007b38:	08007d63 	.word	0x08007d63
 8007b3c:	08007d8f 	.word	0x08007d8f
 8007b40:	08007dc3 	.word	0x08007dc3
 8007b44:	08007dc3 	.word	0x08007dc3
 8007b48:	08007dc3 	.word	0x08007dc3
 8007b4c:	08007dc3 	.word	0x08007dc3
 8007b50:	08007dc3 	.word	0x08007dc3
 8007b54:	08007dc3 	.word	0x08007dc3
 8007b58:	08007dc3 	.word	0x08007dc3
 8007b5c:	08007b61 	.word	0x08007b61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b82:	e126      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fb06 	bl	8008198 <USBD_CtlError>
      err++;
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	72fb      	strb	r3, [r7, #11]
    break;
 8007b92:	e11e      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7c12      	ldrb	r2, [r2, #16]
 8007ba0:	f107 0108 	add.w	r1, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
    break;
 8007baa:	e112      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7c1b      	ldrb	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10d      	bne.n	8007bd0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bce:	e100      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	f107 0208 	add.w	r2, r7, #8
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	2202      	movs	r2, #2
 8007be8:	701a      	strb	r2, [r3, #0]
    break;
 8007bea:	e0f2      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	885b      	ldrh	r3, [r3, #2]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	f200 80ac 	bhi.w	8007d50 <USBD_GetDescriptor+0x258>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USBD_GetDescriptor+0x108>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c81 	.word	0x08007c81
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007ce9 	.word	0x08007ce9
 8007c14:	08007d1d 	.word	0x08007d1d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3a:	e091      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 faaa 	bl	8008198 <USBD_CtlError>
        err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4a:	e089      	b.n	8007d60 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c6e:	e077      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa90 	bl	8008198 <USBD_CtlError>
        err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c7e:	e06f      	b.n	8007d60 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca2:	e05d      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa76 	bl	8008198 <USBD_CtlError>
        err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb2:	e055      	b.n	8007d60 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cd6:	e043      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa5c 	bl	8008198 <USBD_CtlError>
        err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce6:	e03b      	b.n	8007d60 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0a:	e029      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa42 	bl	8008198 <USBD_CtlError>
        err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1a:	e021      	b.n	8007d60 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3e:	e00f      	b.n	8007d60 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa28 	bl	8008198 <USBD_CtlError>
        err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4e:	e007      	b.n	8007d60 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa20 	bl	8008198 <USBD_CtlError>
      err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d5e:	bf00      	nop
    }
    break;
 8007d60:	e037      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d7c:	e029      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa09 	bl	8008198 <USBD_CtlError>
      err++;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d8c:	e021      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7c1b      	ldrb	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10d      	bne.n	8007db2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	f107 0208 	add.w	r2, r7, #8
 8007da2:	4610      	mov	r0, r2
 8007da4:	4798      	blx	r3
 8007da6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	2207      	movs	r2, #7
 8007dae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007db0:	e00f      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9ef 	bl	8008198 <USBD_CtlError>
      err++;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	72fb      	strb	r3, [r7, #11]
    break;
 8007dc0:	e007      	b.n	8007dd2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9e7 	bl	8008198 <USBD_CtlError>
    err++;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	72fb      	strb	r3, [r7, #11]
    break;
 8007dd0:	bf00      	nop
  }

  if (err != 0U)
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11e      	bne.n	8007e16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d016      	beq.n	8007e0e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007de0:	893b      	ldrh	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	88da      	ldrh	r2, [r3, #6]
 8007dea:	893b      	ldrh	r3, [r7, #8]
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bf28      	it	cs
 8007df0:	4613      	movcs	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007df6:	893b      	ldrh	r3, [r7, #8]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa3c 	bl	800827a <USBD_CtlSendData>
 8007e02:	e009      	b.n	8007e18 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9c6 	bl	8008198 <USBD_CtlError>
 8007e0c:	e004      	b.n	8007e18 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa8d 	bl	800832e <USBD_CtlSendStatus>
 8007e14:	e000      	b.n	8007e18 <USBD_GetDescriptor+0x320>
    return;
 8007e16:	bf00      	nop
    }
  }
}
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop

08007e20 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	889b      	ldrh	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d130      	bne.n	8007e94 <USBD_SetAddress+0x74>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d12c      	bne.n	8007e94 <USBD_SetAddress+0x74>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e40:	d828      	bhi.n	8007e94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d104      	bne.n	8007e62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f99c 	bl	8008198 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e60:	e01c      	b.n	8007e9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7bfa      	ldrb	r2, [r7, #15]
 8007e66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 ff0c 	bl	8008c8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa5a 	bl	800832e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e88:	e008      	b.n	8007e9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	e003      	b.n	8007e9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f97e 	bl	8008198 <USBD_CtlError>
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	4b4b      	ldr	r3, [pc, #300]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ebc:	4b4a      	ldr	r3, [pc, #296]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d905      	bls.n	8007ed0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f966 	bl	8008198 <USBD_CtlError>
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e087      	b.n	8007fe0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d002      	beq.n	8007ee0 <USBD_SetConfig+0x3c>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d025      	beq.n	8007f2a <USBD_SetConfig+0x86>
 8007ede:	e071      	b.n	8007fc4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ee0:	4b41      	ldr	r3, [pc, #260]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01c      	beq.n	8007f22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ee8:	4b3f      	ldr	r3, [pc, #252]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff f9bd 	bl	8007278 <USBD_SetClassConfig>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f944 	bl	8008198 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f10:	e065      	b.n	8007fde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa0b 	bl	800832e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f20:	e05d      	b.n	8007fde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa03 	bl	800832e <USBD_CtlSendStatus>
    break;
 8007f28:	e059      	b.n	8007fde <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d112      	bne.n	8007f58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f3a:	4b2b      	ldr	r3, [pc, #172]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f44:	4b28      	ldr	r3, [pc, #160]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff f9b0 	bl	80072b0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9ec 	bl	800832e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f56:	e042      	b.n	8007fde <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f58:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d02a      	beq.n	8007fbc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff f99e 	bl	80072b0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff f977 	bl	8007278 <USBD_SetClassConfig>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00f      	beq.n	8007fb4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f8fe 	bl	8008198 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff f983 	bl	80072b0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fb2:	e014      	b.n	8007fde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9ba 	bl	800832e <USBD_CtlSendStatus>
    break;
 8007fba:	e010      	b.n	8007fde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9b6 	bl	800832e <USBD_CtlSendStatus>
    break;
 8007fc2:	e00c      	b.n	8007fde <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8e6 	bl	8008198 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <USBD_SetConfig+0x144>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff f96c 	bl	80072b0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	73fb      	strb	r3, [r7, #15]
    break;
 8007fdc:	bf00      	nop
  }

  return ret;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000214 	.word	0x20000214

08007fec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	88db      	ldrh	r3, [r3, #6]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d004      	beq.n	8008008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8c9 	bl	8008198 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008006:	e021      	b.n	800804c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	2b01      	cmp	r3, #1
 8008010:	db17      	blt.n	8008042 <USBD_GetConfig+0x56>
 8008012:	2b02      	cmp	r3, #2
 8008014:	dd02      	ble.n	800801c <USBD_GetConfig+0x30>
 8008016:	2b03      	cmp	r3, #3
 8008018:	d00b      	beq.n	8008032 <USBD_GetConfig+0x46>
 800801a:	e012      	b.n	8008042 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3308      	adds	r3, #8
 8008026:	2201      	movs	r2, #1
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f925 	bl	800827a <USBD_CtlSendData>
      break;
 8008030:	e00c      	b.n	800804c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3304      	adds	r3, #4
 8008036:	2201      	movs	r2, #1
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f91d 	bl	800827a <USBD_CtlSendData>
      break;
 8008040:	e004      	b.n	800804c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8a7 	bl	8008198 <USBD_CtlError>
      break;
 800804a:	bf00      	nop
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	3b01      	subs	r3, #1
 8008066:	2b02      	cmp	r3, #2
 8008068:	d81e      	bhi.n	80080a8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	88db      	ldrh	r3, [r3, #6]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d004      	beq.n	800807c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f88f 	bl	8008198 <USBD_CtlError>
      break;
 800807a:	e01a      	b.n	80080b2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f043 0202 	orr.w	r2, r3, #2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	330c      	adds	r3, #12
 800809c:	2202      	movs	r2, #2
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f8ea 	bl	800827a <USBD_CtlSendData>
    break;
 80080a6:	e004      	b.n	80080b2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f874 	bl	8008198 <USBD_CtlError>
    break;
 80080b0:	bf00      	nop
  }
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d106      	bne.n	80080da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f92a 	bl	800832e <USBD_CtlSendStatus>
  }
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d80b      	bhi.n	8008110 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10c      	bne.n	800811a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f910 	bl	800832e <USBD_CtlSendStatus>
      }
      break;
 800810e:	e004      	b.n	800811a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f840 	bl	8008198 <USBD_CtlError>
      break;
 8008118:	e000      	b.n	800811c <USBD_ClrFeature+0x3a>
      break;
 800811a:	bf00      	nop
  }
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff faa8 	bl	80076a4 <SWAPBYTE>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fa9b 	bl	80076a4 <SWAPBYTE>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fa8e 	bl	80076a4 <SWAPBYTE>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	80da      	strh	r2, [r3, #6]
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fcd7 	bl	8008b58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081aa:	2100      	movs	r1, #0
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fcd3 	bl	8008b58 <USBD_LL_StallEP>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d036      	beq.n	800823e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081d4:	6938      	ldr	r0, [r7, #16]
 80081d6:	f000 f836 	bl	8008246 <USBD_GetLen>
 80081da:	4603      	mov	r3, r0
 80081dc:	3301      	adds	r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	7812      	ldrb	r2, [r2, #0]
 80081f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	3301      	adds	r3, #1
 80081f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	4413      	add	r3, r2
 8008200:	2203      	movs	r2, #3
 8008202:	701a      	strb	r2, [r3, #0]
  idx++;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	3301      	adds	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800820a:	e013      	b.n	8008234 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	7812      	ldrb	r2, [r2, #0]
 8008216:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
    idx++;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	3301      	adds	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
    idx++;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	3301      	adds	r3, #1
 8008232:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e7      	bne.n	800820c <USBD_GetString+0x52>
 800823c:	e000      	b.n	8008240 <USBD_GetString+0x86>
    return;
 800823e:	bf00      	nop
  }
}
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008256:	e005      	b.n	8008264 <USBD_GetLen+0x1e>
  {
    len++;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	3301      	adds	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3301      	adds	r3, #1
 8008262:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f5      	bne.n	8008258 <USBD_GetLen+0x12>
  }

  return len;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2202      	movs	r2, #2
 800828a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fd29 	bl	8008cf8 <USBD_LL_Transmit>

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fd18 	bl	8008cf8 <USBD_LL_Transmit>

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2203      	movs	r2, #3
 80082e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	2100      	movs	r1, #0
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 fd33 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fd22 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800833e:	2300      	movs	r3, #0
 8008340:	2200      	movs	r2, #0
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fcd7 	bl	8008cf8 <USBD_LL_Transmit>

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2205      	movs	r2, #5
 8008360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008364:	2300      	movs	r3, #0
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fcfc 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008380:	2200      	movs	r2, #0
 8008382:	4912      	ldr	r1, [pc, #72]	; (80083cc <MX_USB_DEVICE_Init+0x50>)
 8008384:	4812      	ldr	r0, [pc, #72]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008386:	f7fe ff09 	bl	800719c <USBD_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008390:	f7f8 facc 	bl	800092c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008394:	490f      	ldr	r1, [pc, #60]	; (80083d4 <MX_USB_DEVICE_Init+0x58>)
 8008396:	480e      	ldr	r0, [pc, #56]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008398:	f7fe ff30 	bl	80071fc <USBD_RegisterClass>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083a2:	f7f8 fac3 	bl	800092c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083a6:	490c      	ldr	r1, [pc, #48]	; (80083d8 <MX_USB_DEVICE_Init+0x5c>)
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe fe8b 	bl	80070c4 <USBD_CDC_RegisterInterface>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083b4:	f7f8 faba 	bl	800092c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083ba:	f7fe ff46 	bl	800724a <USBD_Start>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083c4:	f7f8 fab2 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c8:	bf00      	nop
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000130 	.word	0x20000130
 80083d0:	200003b8 	.word	0x200003b8
 80083d4:	20000018 	.word	0x20000018
 80083d8:	2000011c 	.word	0x2000011c

080083dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e0:	2200      	movs	r2, #0
 80083e2:	4905      	ldr	r1, [pc, #20]	; (80083f8 <CDC_Init_FS+0x1c>)
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <CDC_Init_FS+0x20>)
 80083e6:	f7fe fe82 	bl	80070ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x24>)
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <CDC_Init_FS+0x20>)
 80083ee:	f7fe fe97 	bl	8007120 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000e88 	.word	0x20000e88
 80083fc:	200003b8 	.word	0x200003b8
 8008400:	20000688 	.word	0x20000688

08008404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800840a:	4618      	mov	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
 8008420:	4613      	mov	r3, r2
 8008422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b23      	cmp	r3, #35	; 0x23
 8008428:	d84a      	bhi.n	80084c0 <CDC_Control_FS+0xac>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <CDC_Control_FS+0x1c>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	080084c1 	.word	0x080084c1
 8008434:	080084c1 	.word	0x080084c1
 8008438:	080084c1 	.word	0x080084c1
 800843c:	080084c1 	.word	0x080084c1
 8008440:	080084c1 	.word	0x080084c1
 8008444:	080084c1 	.word	0x080084c1
 8008448:	080084c1 	.word	0x080084c1
 800844c:	080084c1 	.word	0x080084c1
 8008450:	080084c1 	.word	0x080084c1
 8008454:	080084c1 	.word	0x080084c1
 8008458:	080084c1 	.word	0x080084c1
 800845c:	080084c1 	.word	0x080084c1
 8008460:	080084c1 	.word	0x080084c1
 8008464:	080084c1 	.word	0x080084c1
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084c1 	.word	0x080084c1
 8008470:	080084c1 	.word	0x080084c1
 8008474:	080084c1 	.word	0x080084c1
 8008478:	080084c1 	.word	0x080084c1
 800847c:	080084c1 	.word	0x080084c1
 8008480:	080084c1 	.word	0x080084c1
 8008484:	080084c1 	.word	0x080084c1
 8008488:	080084c1 	.word	0x080084c1
 800848c:	080084c1 	.word	0x080084c1
 8008490:	080084c1 	.word	0x080084c1
 8008494:	080084c1 	.word	0x080084c1
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c1 	.word	0x080084c1
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084c1 	.word	0x080084c1
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c1 	.word	0x080084c1
 80084b8:	080084c1 	.word	0x080084c1
 80084bc:	080084c1 	.word	0x080084c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c0:	bf00      	nop
  }

  return (USBD_OK);
 80084c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4805      	ldr	r0, [pc, #20]	; (80084f4 <CDC_Receive_FS+0x24>)
 80084de:	f7fe fe1f 	bl	8007120 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084e2:	4804      	ldr	r0, [pc, #16]	; (80084f4 <CDC_Receive_FS+0x24>)
 80084e4:	f7fe fe30 	bl	8007148 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200003b8 	.word	0x200003b8

080084f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800850a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
	...

0800851c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	6039      	str	r1, [r7, #0]
 8008526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2212      	movs	r2, #18
 800852c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000150 	.word	0x20000150

08008540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2204      	movs	r2, #4
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008552:	4b03      	ldr	r3, [pc, #12]	; (8008560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000170 	.word	0x20000170

08008564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d105      	bne.n	8008582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4907      	ldr	r1, [pc, #28]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
 800857a:	4808      	ldr	r0, [pc, #32]	; (800859c <USBD_FS_ProductStrDescriptor+0x38>)
 800857c:	f7ff fe1d 	bl	80081ba <USBD_GetString>
 8008580:	e004      	b.n	800858c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4904      	ldr	r1, [pc, #16]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
 8008586:	4805      	ldr	r0, [pc, #20]	; (800859c <USBD_FS_ProductStrDescriptor+0x38>)
 8008588:	f7ff fe17 	bl	80081ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20001688 	.word	0x20001688
 800859c:	08009088 	.word	0x08009088

080085a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	4904      	ldr	r1, [pc, #16]	; (80085c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085b0:	4804      	ldr	r0, [pc, #16]	; (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085b2:	f7ff fe02 	bl	80081ba <USBD_GetString>
  return USBD_StrDesc;
 80085b6:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20001688 	.word	0x20001688
 80085c4:	08009098 	.word	0x08009098

080085c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	221a      	movs	r2, #26
 80085d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085da:	f000 f855 	bl	8008688 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085de:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000174 	.word	0x20000174

080085ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	4907      	ldr	r1, [pc, #28]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008602:	4808      	ldr	r0, [pc, #32]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008604:	f7ff fdd9 	bl	80081ba <USBD_GetString>
 8008608:	e004      	b.n	8008614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4904      	ldr	r1, [pc, #16]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800860e:	4805      	ldr	r0, [pc, #20]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008610:	f7ff fdd3 	bl	80081ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20001688 	.word	0x20001688
 8008624:	080090ac 	.word	0x080090ac

08008628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4907      	ldr	r1, [pc, #28]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800863e:	4808      	ldr	r0, [pc, #32]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008640:	f7ff fdbb 	bl	80081ba <USBD_GetString>
 8008644:	e004      	b.n	8008650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4904      	ldr	r1, [pc, #16]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800864c:	f7ff fdb5 	bl	80081ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20001688 	.word	0x20001688
 8008660:	080090b8 	.word	0x080090b8

08008664 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	220c      	movs	r2, #12
 8008674:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008676:	4b03      	ldr	r3, [pc, #12]	; (8008684 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20000164 	.word	0x20000164

08008688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <Get_SerialNum+0x44>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008694:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <Get_SerialNum+0x48>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <Get_SerialNum+0x4c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ae:	2208      	movs	r2, #8
 80086b0:	4909      	ldr	r1, [pc, #36]	; (80086d8 <Get_SerialNum+0x50>)
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f814 	bl	80086e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086b8:	2204      	movs	r2, #4
 80086ba:	4908      	ldr	r1, [pc, #32]	; (80086dc <Get_SerialNum+0x54>)
 80086bc:	68b8      	ldr	r0, [r7, #8]
 80086be:	f000 f80f 	bl	80086e0 <IntToUnicode>
  }
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	1fff7590 	.word	0x1fff7590
 80086d0:	1fff7594 	.word	0x1fff7594
 80086d4:	1fff7598 	.word	0x1fff7598
 80086d8:	20000176 	.word	0x20000176
 80086dc:	20000186 	.word	0x20000186

080086e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e027      	b.n	8008748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0f1b      	lsrs	r3, r3, #28
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	d80b      	bhi.n	8008718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	b2da      	uxtb	r2, r3
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4619      	mov	r1, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	440b      	add	r3, r1
 8008710:	3230      	adds	r2, #48	; 0x30
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e00a      	b.n	800872e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	0f1b      	lsrs	r3, r3, #28
 800871c:	b2da      	uxtb	r2, r3
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4619      	mov	r1, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	440b      	add	r3, r1
 8008728:	3237      	adds	r2, #55	; 0x37
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	3301      	adds	r3, #1
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	3301      	adds	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]
 8008748:	7dfa      	ldrb	r2, [r7, #23]
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3d3      	bcc.n	80086f8 <IntToUnicode+0x18>
  }
}
 8008750:	bf00      	nop
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	605a      	str	r2, [r3, #4]
 800876e:	609a      	str	r2, [r3, #8]
 8008770:	60da      	str	r2, [r3, #12]
 8008772:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <HAL_PCD_MspInit+0x90>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d131      	bne.n	80087e2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800877e:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 800878c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008796:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800879a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879c:	2302      	movs	r3, #2
 800879e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087a4:	2303      	movs	r3, #3
 80087a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80087a8:	230a      	movs	r3, #10
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ac:	f107 0314 	add.w	r3, r7, #20
 80087b0:	4619      	mov	r1, r3
 80087b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087b6:	f7f8 fc85 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 80087bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087be:	4a0c      	ldr	r2, [pc, #48]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 80087c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087c4:	6593      	str	r3, [r2, #88]	; 0x58
 80087c6:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <HAL_PCD_MspInit+0x94>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80087d2:	2200      	movs	r2, #0
 80087d4:	2100      	movs	r1, #0
 80087d6:	2043      	movs	r0, #67	; 0x43
 80087d8:	f7f8 fc3d 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80087dc:	2043      	movs	r0, #67	; 0x43
 80087de:	f7f8 fc56 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087e2:	bf00      	nop
 80087e4:	3728      	adds	r7, #40	; 0x28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40006800 	.word	0x40006800
 80087f0:	40021000 	.word	0x40021000

080087f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe fd68 	bl	80072e0 <USBD_LL_SetupStage>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	440b      	add	r3, r1
 8008838:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fda0 	bl	8007386 <USBD_LL_DataOutStage>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	440b      	add	r3, r1
 800886e:	333c      	adds	r3, #60	; 0x3c
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	4619      	mov	r1, r3
 8008876:	f7fe fde9 	bl	800744c <USBD_LL_DataInStage>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe feed 	bl	8007670 <USBD_LL_SOF>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d001      	beq.n	80088b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088b2:	f7f8 f83b 	bl	800092c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088bc:	7bfa      	ldrb	r2, [r7, #15]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fe9a 	bl	80075fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fe53 	bl	8007578 <USBD_LL_Reset>
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fe95 	bl	800761a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <HAL_PCD_SuspendCallback+0x30>)
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	4a03      	ldr	r2, [pc, #12]	; (800890c <HAL_PCD_SuspendCallback+0x30>)
 80088fe:	f043 0306 	orr.w	r3, r3, #6
 8008902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	e000ed00 	.word	0xe000ed00

08008910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008920:	4b08      	ldr	r3, [pc, #32]	; (8008944 <HAL_PCD_ResumeCallback+0x34>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	4a07      	ldr	r2, [pc, #28]	; (8008944 <HAL_PCD_ResumeCallback+0x34>)
 8008926:	f023 0306 	bic.w	r3, r3, #6
 800892a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800892c:	f000 fa9e 	bl	8008e6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fe84 	bl	8007644 <USBD_LL_Resume>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008950:	f7fa f954 	bl	8002bfc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008954:	4a2b      	ldr	r2, [pc, #172]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008960:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008964:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008966:	4a28      	ldr	r2, [pc, #160]	; (8008a08 <USBD_LL_Init+0xc0>)
 8008968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800896a:	4b26      	ldr	r3, [pc, #152]	; (8008a04 <USBD_LL_Init+0xbc>)
 800896c:	2208      	movs	r2, #8
 800896e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008970:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008972:	2202      	movs	r2, #2
 8008974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008976:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008978:	2202      	movs	r2, #2
 800897a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800897c:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <USBD_LL_Init+0xbc>)
 800897e:	2200      	movs	r2, #0
 8008980:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008982:	4b20      	ldr	r3, [pc, #128]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008984:	2200      	movs	r2, #0
 8008986:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008988:	4b1e      	ldr	r3, [pc, #120]	; (8008a04 <USBD_LL_Init+0xbc>)
 800898a:	2200      	movs	r2, #0
 800898c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008990:	2200      	movs	r2, #0
 8008992:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008994:	481b      	ldr	r0, [pc, #108]	; (8008a04 <USBD_LL_Init+0xbc>)
 8008996:	f7f8 fd27 	bl	80013e8 <HAL_PCD_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80089a0:	f7f7 ffc4 	bl	800092c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089aa:	2318      	movs	r3, #24
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	f7fa f842 	bl	8002a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ba:	2358      	movs	r3, #88	; 0x58
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	f7fa f83a 	bl	8002a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ca:	23c0      	movs	r3, #192	; 0xc0
 80089cc:	2200      	movs	r2, #0
 80089ce:	2181      	movs	r1, #129	; 0x81
 80089d0:	f7fa f832 	bl	8002a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80089de:	2200      	movs	r2, #0
 80089e0:	2101      	movs	r1, #1
 80089e2:	f7fa f829 	bl	8002a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089f0:	2200      	movs	r2, #0
 80089f2:	2182      	movs	r1, #130	; 0x82
 80089f4:	f7fa f820 	bl	8002a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20001888 	.word	0x20001888
 8008a08:	40006800 	.word	0x40006800

08008a0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f8 fdf2 	bl	800160c <HAL_PCD_Start>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d816      	bhi.n	8008a60 <USBD_LL_Start+0x54>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <USBD_LL_Start+0x2c>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a4f 	.word	0x08008a4f
 8008a40:	08008a55 	.word	0x08008a55
 8008a44:	08008a5b 	.word	0x08008a5b
    case HAL_OK :
      usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4c:	e00b      	b.n	8008a66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	73fb      	strb	r3, [r7, #15]
    break;
 8008a52:	e008      	b.n	8008a66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a54:	2301      	movs	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]
    break;
 8008a58:	e005      	b.n	8008a66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5e:	e002      	b.n	8008a66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
    break;
 8008a64:	bf00      	nop
  }
  return usb_status;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	4608      	mov	r0, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	70fb      	strb	r3, [r7, #3]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70bb      	strb	r3, [r7, #2]
 8008a86:	4613      	mov	r3, r2
 8008a88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a98:	78bb      	ldrb	r3, [r7, #2]
 8008a9a:	883a      	ldrh	r2, [r7, #0]
 8008a9c:	78f9      	ldrb	r1, [r7, #3]
 8008a9e:	f7f8 ff4a 	bl	8001936 <HAL_PCD_EP_Open>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d817      	bhi.n	8008adc <USBD_LL_OpenEP+0x6c>
 8008aac:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <USBD_LL_OpenEP+0x44>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008ac5 	.word	0x08008ac5
 8008ab8:	08008acb 	.word	0x08008acb
 8008abc:	08008ad1 	.word	0x08008ad1
 8008ac0:	08008ad7 	.word	0x08008ad7
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac8:	e00b      	b.n	8008ae2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aca:	2303      	movs	r3, #3
 8008acc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ace:	e008      	b.n	8008ae2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e005      	b.n	8008ae2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e002      	b.n	8008ae2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	bf00      	nop
  }
  return usb_status;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f8 ff79 	bl	8001a02 <HAL_PCD_EP_Close>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d816      	bhi.n	8008b48 <USBD_LL_CloseEP+0x5c>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <USBD_LL_CloseEP+0x34>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008b37 	.word	0x08008b37
 8008b28:	08008b3d 	.word	0x08008b3d
 8008b2c:	08008b43 	.word	0x08008b43
    case HAL_OK :
      usb_status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e00b      	b.n	8008b4e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e008      	b.n	8008b4e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	e005      	b.n	8008b4e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	73fb      	strb	r3, [r7, #15]
    break;
 8008b46:	e002      	b.n	8008b4e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	bf00      	nop
  }
  return usb_status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7f9 f823 	bl	8001bc2 <HAL_PCD_EP_SetStall>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d816      	bhi.n	8008bb4 <USBD_LL_StallEP+0x5c>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <USBD_LL_StallEP+0x34>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008ba3 	.word	0x08008ba3
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008baf 	.word	0x08008baf
    case HAL_OK :
      usb_status = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba0:	e00b      	b.n	8008bba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba6:	e008      	b.n	8008bba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bac:	e005      	b.n	8008bba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb2:	e002      	b.n	8008bba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb8:	bf00      	nop
  }
  return usb_status;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7f9 f84d 	bl	8001c82 <HAL_PCD_EP_ClrStall>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d816      	bhi.n	8008c20 <USBD_LL_ClearStallEP+0x5c>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <USBD_LL_ClearStallEP+0x34>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c09 	.word	0x08008c09
 8008bfc:	08008c0f 	.word	0x08008c0f
 8008c00:	08008c15 	.word	0x08008c15
 8008c04:	08008c1b 	.word	0x08008c1b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0c:	e00b      	b.n	8008c26 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	73fb      	strb	r3, [r7, #15]
    break;
 8008c12:	e008      	b.n	8008c26 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
    break;
 8008c18:	e005      	b.n	8008c26 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1e:	e002      	b.n	8008c26 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	bf00      	nop
  }
  return usb_status;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da0c      	bge.n	8008c66 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c52:	68f9      	ldr	r1, [r7, #12]
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	440b      	add	r3, r1
 8008c60:	3302      	adds	r3, #2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	e00b      	b.n	8008c7e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6c:	68f9      	ldr	r1, [r7, #12]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	440b      	add	r3, r1
 8008c78:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f8 fe1e 	bl	80018ec <HAL_PCD_SetAddress>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d816      	bhi.n	8008ce8 <USBD_LL_SetUSBAddress+0x5c>
 8008cba:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <USBD_LL_SetUSBAddress+0x34>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008cd7 	.word	0x08008cd7
 8008cc8:	08008cdd 	.word	0x08008cdd
 8008ccc:	08008ce3 	.word	0x08008ce3
    case HAL_OK :
      usb_status = USBD_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e00b      	b.n	8008cee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e008      	b.n	8008cee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	e005      	b.n	8008cee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce6:	e002      	b.n	8008cee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	73fb      	strb	r3, [r7, #15]
    break;
 8008cec:	bf00      	nop
  }
  return usb_status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	607a      	str	r2, [r7, #4]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	460b      	mov	r3, r1
 8008d06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d16:	7af9      	ldrb	r1, [r7, #11]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	f7f8 ff0e 	bl	8001b3c <HAL_PCD_EP_Transmit>
 8008d20:	4603      	mov	r3, r0
 8008d22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d24:	7dbb      	ldrb	r3, [r7, #22]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d816      	bhi.n	8008d58 <USBD_LL_Transmit+0x60>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBD_LL_Transmit+0x38>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d47 	.word	0x08008d47
 8008d38:	08008d4d 	.word	0x08008d4d
 8008d3c:	08008d53 	.word	0x08008d53
    case HAL_OK :
      usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75fb      	strb	r3, [r7, #23]
    break;
 8008d44:	e00b      	b.n	8008d5e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d46:	2303      	movs	r3, #3
 8008d48:	75fb      	strb	r3, [r7, #23]
    break;
 8008d4a:	e008      	b.n	8008d5e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d50:	e005      	b.n	8008d5e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	75fb      	strb	r3, [r7, #23]
    break;
 8008d56:	e002      	b.n	8008d5e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d5c:	bf00      	nop
  }
  return usb_status;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	460b      	mov	r3, r1
 8008d76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d86:	7af9      	ldrb	r1, [r7, #11]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	f7f8 fe81 	bl	8001a92 <HAL_PCD_EP_Receive>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d94:	7dbb      	ldrb	r3, [r7, #22]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d816      	bhi.n	8008dc8 <USBD_LL_PrepareReceive+0x60>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <USBD_LL_PrepareReceive+0x38>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008db7 	.word	0x08008db7
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008dc3 	.word	0x08008dc3
    case HAL_OK :
      usb_status = USBD_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	75fb      	strb	r3, [r7, #23]
    break;
 8008db4:	e00b      	b.n	8008dce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008db6:	2303      	movs	r3, #3
 8008db8:	75fb      	strb	r3, [r7, #23]
    break;
 8008dba:	e008      	b.n	8008dce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
    break;
 8008dc0:	e005      	b.n	8008dce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	75fb      	strb	r3, [r7, #23]
    break;
 8008dc6:	e002      	b.n	8008dce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	75fb      	strb	r3, [r7, #23]
    break;
 8008dcc:	bf00      	nop
  }
  return usb_status;
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7f8 fe8c 	bl	8001b0c <HAL_PCD_EP_GetRxCount>
 8008df4:	4603      	mov	r3, r0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_PCDEx_LPM_Callback+0x18>
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d013      	beq.n	8008e3e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e16:	e023      	b.n	8008e60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d007      	beq.n	8008e30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e20:	f000 f824 	bl	8008e6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e24:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	4a0f      	ldr	r2, [pc, #60]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e2a:	f023 0306 	bic.w	r3, r3, #6
 8008e2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fc04 	bl	8007644 <USBD_LL_Resume>
    break;
 8008e3c:	e010      	b.n	8008e60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fbe8 	bl	800761a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e58:	f043 0306 	orr.w	r3, r3, #6
 8008e5c:	6113      	str	r3, [r2, #16]
    break;
 8008e5e:	bf00      	nop
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	e000ed00 	.word	0xe000ed00

08008e6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e70:	f7f7 fb44 	bl	80004fc <SystemClock_Config>
}
 8008e74:	bf00      	nop
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <__errno>:
 8008e78:	4b01      	ldr	r3, [pc, #4]	; (8008e80 <__errno+0x8>)
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000190 	.word	0x20000190

08008e84 <__libc_init_array>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0d      	ldr	r6, [pc, #52]	; (8008ebc <__libc_init_array+0x38>)
 8008e88:	4c0d      	ldr	r4, [pc, #52]	; (8008ec0 <__libc_init_array+0x3c>)
 8008e8a:	1ba4      	subs	r4, r4, r6
 8008e8c:	10a4      	asrs	r4, r4, #2
 8008e8e:	2500      	movs	r5, #0
 8008e90:	42a5      	cmp	r5, r4
 8008e92:	d109      	bne.n	8008ea8 <__libc_init_array+0x24>
 8008e94:	4e0b      	ldr	r6, [pc, #44]	; (8008ec4 <__libc_init_array+0x40>)
 8008e96:	4c0c      	ldr	r4, [pc, #48]	; (8008ec8 <__libc_init_array+0x44>)
 8008e98:	f000 f8ea 	bl	8009070 <_init>
 8008e9c:	1ba4      	subs	r4, r4, r6
 8008e9e:	10a4      	asrs	r4, r4, #2
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	42a5      	cmp	r5, r4
 8008ea4:	d105      	bne.n	8008eb2 <__libc_init_array+0x2e>
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eac:	4798      	blx	r3
 8008eae:	3501      	adds	r5, #1
 8008eb0:	e7ee      	b.n	8008e90 <__libc_init_array+0xc>
 8008eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb6:	4798      	blx	r3
 8008eb8:	3501      	adds	r5, #1
 8008eba:	e7f2      	b.n	8008ea2 <__libc_init_array+0x1e>
 8008ebc:	08009118 	.word	0x08009118
 8008ec0:	08009118 	.word	0x08009118
 8008ec4:	08009118 	.word	0x08009118
 8008ec8:	0800911c 	.word	0x0800911c

08008ecc <malloc>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <malloc+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f000 b861 	b.w	8008f98 <_malloc_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000190 	.word	0x20000190

08008edc <free>:
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <free+0xc>)
 8008ede:	4601      	mov	r1, r0
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f000 b80b 	b.w	8008efc <_free_r>
 8008ee6:	bf00      	nop
 8008ee8:	20000190 	.word	0x20000190

08008eec <memset>:
 8008eec:	4402      	add	r2, r0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memset+0xa>
 8008ef4:	4770      	bx	lr
 8008ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8008efa:	e7f9      	b.n	8008ef0 <memset+0x4>

08008efc <_free_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4605      	mov	r5, r0
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d045      	beq.n	8008f90 <_free_r+0x94>
 8008f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f08:	1f0c      	subs	r4, r1, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfb8      	it	lt
 8008f0e:	18e4      	addlt	r4, r4, r3
 8008f10:	f000 f8ac 	bl	800906c <__malloc_lock>
 8008f14:	4a1f      	ldr	r2, [pc, #124]	; (8008f94 <_free_r+0x98>)
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	b933      	cbnz	r3, 8008f2a <_free_r+0x2e>
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	6014      	str	r4, [r2, #0]
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f26:	f000 b8a2 	b.w	800906e <__malloc_unlock>
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	d90c      	bls.n	8008f48 <_free_r+0x4c>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	1862      	adds	r2, r4, r1
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bf04      	itt	eq
 8008f36:	681a      	ldreq	r2, [r3, #0]
 8008f38:	685b      	ldreq	r3, [r3, #4]
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	bf04      	itt	eq
 8008f3e:	1852      	addeq	r2, r2, r1
 8008f40:	6022      	streq	r2, [r4, #0]
 8008f42:	6004      	str	r4, [r0, #0]
 8008f44:	e7ec      	b.n	8008f20 <_free_r+0x24>
 8008f46:	4613      	mov	r3, r2
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	b10a      	cbz	r2, 8008f50 <_free_r+0x54>
 8008f4c:	42a2      	cmp	r2, r4
 8008f4e:	d9fa      	bls.n	8008f46 <_free_r+0x4a>
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	1858      	adds	r0, r3, r1
 8008f54:	42a0      	cmp	r0, r4
 8008f56:	d10b      	bne.n	8008f70 <_free_r+0x74>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	4401      	add	r1, r0
 8008f5c:	1858      	adds	r0, r3, r1
 8008f5e:	4282      	cmp	r2, r0
 8008f60:	6019      	str	r1, [r3, #0]
 8008f62:	d1dd      	bne.n	8008f20 <_free_r+0x24>
 8008f64:	6810      	ldr	r0, [r2, #0]
 8008f66:	6852      	ldr	r2, [r2, #4]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	4401      	add	r1, r0
 8008f6c:	6019      	str	r1, [r3, #0]
 8008f6e:	e7d7      	b.n	8008f20 <_free_r+0x24>
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x7c>
 8008f72:	230c      	movs	r3, #12
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	e7d3      	b.n	8008f20 <_free_r+0x24>
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	1821      	adds	r1, r4, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	bf04      	itt	eq
 8008f80:	6811      	ldreq	r1, [r2, #0]
 8008f82:	6852      	ldreq	r2, [r2, #4]
 8008f84:	6062      	str	r2, [r4, #4]
 8008f86:	bf04      	itt	eq
 8008f88:	1809      	addeq	r1, r1, r0
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	605c      	str	r4, [r3, #4]
 8008f8e:	e7c7      	b.n	8008f20 <_free_r+0x24>
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	20000218 	.word	0x20000218

08008f98 <_malloc_r>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	1ccd      	adds	r5, r1, #3
 8008f9c:	f025 0503 	bic.w	r5, r5, #3
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	2d0c      	cmp	r5, #12
 8008fa4:	bf38      	it	cc
 8008fa6:	250c      	movcc	r5, #12
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	4606      	mov	r6, r0
 8008fac:	db01      	blt.n	8008fb2 <_malloc_r+0x1a>
 8008fae:	42a9      	cmp	r1, r5
 8008fb0:	d903      	bls.n	8008fba <_malloc_r+0x22>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	f000 f857 	bl	800906c <__malloc_lock>
 8008fbe:	4a21      	ldr	r2, [pc, #132]	; (8009044 <_malloc_r+0xac>)
 8008fc0:	6814      	ldr	r4, [r2, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	b991      	cbnz	r1, 8008fec <_malloc_r+0x54>
 8008fc6:	4c20      	ldr	r4, [pc, #128]	; (8009048 <_malloc_r+0xb0>)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	b91b      	cbnz	r3, 8008fd4 <_malloc_r+0x3c>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f83d 	bl	800904c <_sbrk_r>
 8008fd2:	6020      	str	r0, [r4, #0]
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f838 	bl	800904c <_sbrk_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d124      	bne.n	800902a <_malloc_r+0x92>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f842 	bl	800906e <__malloc_unlock>
 8008fea:	e7e4      	b.n	8008fb6 <_malloc_r+0x1e>
 8008fec:	680b      	ldr	r3, [r1, #0]
 8008fee:	1b5b      	subs	r3, r3, r5
 8008ff0:	d418      	bmi.n	8009024 <_malloc_r+0x8c>
 8008ff2:	2b0b      	cmp	r3, #11
 8008ff4:	d90f      	bls.n	8009016 <_malloc_r+0x7e>
 8008ff6:	600b      	str	r3, [r1, #0]
 8008ff8:	50cd      	str	r5, [r1, r3]
 8008ffa:	18cc      	adds	r4, r1, r3
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f836 	bl	800906e <__malloc_unlock>
 8009002:	f104 000b 	add.w	r0, r4, #11
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	f020 0007 	bic.w	r0, r0, #7
 800900c:	1ac3      	subs	r3, r0, r3
 800900e:	d0d3      	beq.n	8008fb8 <_malloc_r+0x20>
 8009010:	425a      	negs	r2, r3
 8009012:	50e2      	str	r2, [r4, r3]
 8009014:	e7d0      	b.n	8008fb8 <_malloc_r+0x20>
 8009016:	428c      	cmp	r4, r1
 8009018:	684b      	ldr	r3, [r1, #4]
 800901a:	bf16      	itet	ne
 800901c:	6063      	strne	r3, [r4, #4]
 800901e:	6013      	streq	r3, [r2, #0]
 8009020:	460c      	movne	r4, r1
 8009022:	e7eb      	b.n	8008ffc <_malloc_r+0x64>
 8009024:	460c      	mov	r4, r1
 8009026:	6849      	ldr	r1, [r1, #4]
 8009028:	e7cc      	b.n	8008fc4 <_malloc_r+0x2c>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d005      	beq.n	8009040 <_malloc_r+0xa8>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f808 	bl	800904c <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d0cf      	beq.n	8008fe0 <_malloc_r+0x48>
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	e7db      	b.n	8008ffc <_malloc_r+0x64>
 8009044:	20000218 	.word	0x20000218
 8009048:	2000021c 	.word	0x2000021c

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4c06      	ldr	r4, [pc, #24]	; (8009068 <_sbrk_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4605      	mov	r5, r0
 8009054:	4608      	mov	r0, r1
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f7f7 fe18 	bl	8000c8c <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20001b7c 	.word	0x20001b7c

0800906c <__malloc_lock>:
 800906c:	4770      	bx	lr

0800906e <__malloc_unlock>:
 800906e:	4770      	bx	lr

08009070 <_init>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	bf00      	nop
 8009074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009076:	bc08      	pop	{r3}
 8009078:	469e      	mov	lr, r3
 800907a:	4770      	bx	lr

0800907c <_fini>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr
