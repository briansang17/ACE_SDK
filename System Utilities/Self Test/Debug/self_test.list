
self_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a148  0800a148  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a150  0800a150  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001f4  0800a34c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800a34c  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c03e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037a7  00000000  00000000  0003c262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003fa10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00040d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002604e  00000000  00000000  00041f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123cc  00000000  00000000  00067f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8bc8  00000000  00000000  0007a332  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  00152f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a098 	.word	0x0800a098

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	0800a098 	.word	0x0800a098

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fd4c 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f87b 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9e7 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004e6:	f000 f977 	bl	80007d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f9b3 	bl	8000854 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 ff59 	bl	80093a4 <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 80004f2:	f000 f907 	bl	8000704 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80004f6:	f000 f931 	bl	800075c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //start up LED sequence
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 80004fa:	4b34      	ldr	r3, [pc, #208]	; (80005cc <main+0xf8>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a33      	ldr	r2, [pc, #204]	; (80005cc <main+0xf8>)
 8000500:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000504:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000506:	20fa      	movs	r0, #250	; 0xfa
 8000508:	f000 fdaa 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0xf8>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <main+0xf8>)
 8000512:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000516:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f000 fda1 	bl	8001060 <HAL_Delay>
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <main+0xf8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <main+0xf8>)
 8000524:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000528:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800052a:	20fa      	movs	r0, #250	; 0xfa
 800052c:	f000 fd98 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0xf8>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <main+0xf8>)
 8000536:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 800053a:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800053c:	20fa      	movs	r0, #250	; 0xfa
 800053e:	f000 fd8f 	bl	8001060 <HAL_Delay>


  char test_phrase[] = "Testing...";
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <main+0xfc>)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	c303      	stmia	r3!, {r0, r1}
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	3302      	adds	r3, #2
 800054e:	0c12      	lsrs	r2, r2, #16
 8000550:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *) &test_phrase, sizeof test_phrase, HAL_MAX_DELAY);
 8000552:	1d39      	adds	r1, r7, #4
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	220b      	movs	r2, #11
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <main+0x100>)
 800055c:	f004 fe20 	bl	80051a0 <HAL_UART_Transmit>

  uint8_t test = query();
 8000560:	f000 fa5c 	bl	8000a1c <query>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]


  GPIOB->ODR |= (LED1_Pin); //mask LED1
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <main+0xf8>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a17      	ldr	r2, [pc, #92]	; (80005cc <main+0xf8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000574:	20fa      	movs	r0, #250	; 0xfa
 8000576:	f000 fd73 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //swap to LED2
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0xf8>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a13      	ldr	r2, [pc, #76]	; (80005cc <main+0xf8>)
 8000580:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000584:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000586:	20fa      	movs	r0, #250	; 0xfa
 8000588:	f000 fd6a 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED1
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xf8>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <main+0xf8>)
 8000592:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000596:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f000 fd61 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED2
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0xf8>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0xf8>)
 80005a4:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 80005a8:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 80005aa:	20fa      	movs	r0, #250	; 0xfa
 80005ac:	f000 fd58 	bl	8001060 <HAL_Delay>
  GPIOB->ODR ^= (LED2_Pin); //end sequence
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <main+0xf8>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <main+0xf8>)
 80005b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005ba:	6153      	str	r3, [r2, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  report(test);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fa88 	bl	8000ad4 <report>
	  HAL_Delay(250);
 80005c4:	20fa      	movs	r0, #250	; 0xfa
 80005c6:	f000 fd4b 	bl	8001060 <HAL_Delay>
	  report(test);
 80005ca:	e7f7      	b.n	80005bc <main+0xe8>
 80005cc:	48000400 	.word	0x48000400
 80005d0:	0800a0b0 	.word	0x0800a0b0
 80005d4:	200002e8 	.word	0x200002e8

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b0      	sub	sp, #192	; 0xc0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 fc94 	bl	8009f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2268      	movs	r2, #104	; 0x68
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fc86 	bl	8009f14 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000608:	f002 fba0 	bl	8002d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <SystemClock_Config+0x128>)
 800060e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000612:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <SystemClock_Config+0x128>)
 8000614:	f023 0318 	bic.w	r3, r3, #24
 8000618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800061c:	2314      	movs	r3, #20
 800061e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fcb6 	bl	8002fd8 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 fa3a 	bl	8000aea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f003 f8c1 	bl	8003818 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800069c:	f000 fa25 	bl	8000aea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80006a0:	f242 0301 	movw	r3, #8193	; 0x2001
 80006a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006b8:	2318      	movs	r3, #24
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006cc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 faa5 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80006dc:	f000 fa05 	bl	8000aea <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f002 fb50 	bl	8002d88 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80006ee:	f000 f9fc 	bl	8000aea <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f2:	f003 fcff 	bl	80040f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f6:	bf00      	nop
 80006f8:	37c0      	adds	r7, #192	; 0xc0
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_QUADSPI_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000716:	2201      	movs	r2, #1
 8000718:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000722:	2201      	movs	r2, #1
 8000724:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000740:	f002 fb88 	bl	8002e54 <HAL_QSPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f9ce 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000368 	.word	0x20000368
 8000758:	a0001000 	.word	0xa0001000

0800075c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_SPI2_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000776:	f44f 7240 	mov.w	r2, #768	; 0x300
 800077a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI2_Init+0x74>)
 800078a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007bc:	f003 fd9a 	bl	80042f4 <HAL_SPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f990 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000220 	.word	0x20000220
 80007d4:	40003800 	.word	0x40003800

080007d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x74>)
 80007f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x74>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x74>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x74>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0x74>)
 8000838:	f003 fd5c 	bl	80042f4 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f952 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000284 	.word	0x20000284
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f004 fc34 	bl	8005104 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f922 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002e8 	.word	0x200002e8
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a4e      	ldr	r2, [pc, #312]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a48      	ldr	r2, [pc, #288]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x154>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a42      	ldr	r2, [pc, #264]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a3c      	ldr	r2, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x154>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a36      	ldr	r2, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2110      	movs	r1, #16
 8000946:	4831      	ldr	r0, [pc, #196]	; (8000a0c <MX_GPIO_Init+0x158>)
 8000948:	f000 fe38 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|ADS_START_Pin|ADS_RST_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x15c>)
 8000954:	f000 fe32 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_PWDN_GPIO_Port, ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	482b      	ldr	r0, [pc, #172]	; (8000a0c <MX_GPIO_Init+0x158>)
 8000960:	f000 fe2c 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APWR_EN_GPIO_Port, APWR_EN_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2104      	movs	r1, #4
 8000968:	482a      	ldr	r0, [pc, #168]	; (8000a14 <MX_GPIO_Init+0x160>)
 800096a:	f000 fe27 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AFE_CS_GPIO_Port, AFE_CS_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	4827      	ldr	r0, [pc, #156]	; (8000a10 <MX_GPIO_Init+0x15c>)
 8000974:	f000 fe22 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADXL_CS_Pin ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin|ADS_PWDN_Pin;
 8000978:	f241 0310 	movw	r3, #4112	; 0x1010
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <MX_GPIO_Init+0x158>)
 8000992:	f000 fc99 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin AFE_CS_Pin ADS_START_Pin
                           ADS_RST_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|AFE_CS_Pin|ADS_START_Pin
 8000996:	f246 3340 	movw	r3, #25408	; 0x6340
 800099a:	617b      	str	r3, [r7, #20]
                          |ADS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_GPIO_Init+0x15c>)
 80009b0:	f000 fc8a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : APWR_EN_Pin */
  GPIO_InitStruct.Pin = APWR_EN_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x160>)
 80009cc:	f000 fc7c 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x15c>)
 80009e4:	f000 fc70 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80009e8:	2308      	movs	r3, #8
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_GPIO_Init+0x164>)
 80009fc:	f000 fc64 	bl	80012c8 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000800 	.word	0x48000800
 8000a10:	48000400 	.word	0x48000400
 8000a14:	48000c00 	.word	0x48000c00
 8000a18:	48001c00 	.word	0x48001c00

08000a1c <query>:

/* USER CODE BEGIN 4 */
static uint8_t query(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
			uint8_t mem_pass : 1;
			uint8_t apwr_pass : 1;
		} bits;
	} report_bit_field;

	report_bit_field.report = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	733b      	strb	r3, [r7, #12]

	//query ADXL372

	uint8_t ad_tx = (PRODUCT_R << 1) | 0x01;
 8000a26:	2307      	movs	r3, #7
 8000a28:	72fb      	strb	r3, [r7, #11]
	uint8_t ad_token;

	HAL_GPIO_TogglePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin);
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <query+0xa4>)
 8000a2e:	f000 fddd 	bl	80015ec <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(&hspi2, &ad_tx, 1, HAL_MAX_DELAY);
 8000a32:	f107 010b 	add.w	r1, r7, #11
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4821      	ldr	r0, [pc, #132]	; (8000ac4 <query+0xa8>)
 8000a3e:	f003 fcfc 	bl	800443a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &ad_token, 1, HAL_MAX_DELAY);
 8000a42:	f107 010a 	add.w	r1, r7, #10
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <query+0xa8>)
 8000a4e:	f003 fe62 	bl	8004716 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin);
 8000a52:	2110      	movs	r1, #16
 8000a54:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <query+0xa4>)
 8000a56:	f000 fdc9 	bl	80015ec <HAL_GPIO_TogglePin>

	report_bit_field.bits.accel_pass = (DEVID_PRODUCT == ad_token);
 8000a5a:	7abb      	ldrb	r3, [r7, #10]
 8000a5c:	2bfa      	cmp	r3, #250	; 0xfa
 8000a5e:	bf0c      	ite	eq
 8000a60:	2301      	moveq	r3, #1
 8000a62:	2300      	movne	r3, #0
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	7b3b      	ldrb	r3, [r7, #12]
 8000a68:	f362 1304 	bfi	r3, r2, #4, #1
 8000a6c:	733b      	strb	r3, [r7, #12]

	//query ADS1299

	uint8_t af_tx[] = {0b00100001, 0b00000001}; //read reg 0x00 of 1 byte length
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <query+0xac>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	813b      	strh	r3, [r7, #8]
	uint8_t af_rx;

	HAL_GPIO_TogglePin(AFE_CS_GPIO_Port, AFE_CS_Pin);
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <query+0xb0>)
 8000a78:	f000 fdb8 	bl	80015ec <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&af_tx, sizeof af_tx, HAL_MAX_DELAY);
 8000a7c:	f107 0108 	add.w	r1, r7, #8
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2202      	movs	r2, #2
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <query+0xb4>)
 8000a88:	f003 fcd7 	bl	800443a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &af_rx, 1, HAL_MAX_DELAY);
 8000a8c:	1df9      	adds	r1, r7, #7
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	2201      	movs	r2, #1
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <query+0xb4>)
 8000a96:	f003 fe3e 	bl	8004716 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(AFE_CS_GPIO_Port, AFE_CS_Pin);
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <query+0xb0>)
 8000a9e:	f000 fda5 	bl	80015ec <HAL_GPIO_TogglePin>

	report_bit_field.bits.afe_pass = (0x96 == af_rx);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b96      	cmp	r3, #150	; 0x96
 8000aa6:	bf0c      	ite	eq
 8000aa8:	2301      	moveq	r3, #1
 8000aaa:	2300      	movne	r3, #0
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	7b3b      	ldrb	r3, [r7, #12]
 8000ab0:	f362 1345 	bfi	r3, r2, #5, #1
 8000ab4:	733b      	strb	r3, [r7, #12]

	//query MX25R64



	return report_bit_field.report;
 8000ab6:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	20000220 	.word	0x20000220
 8000ac8:	0800a0bc 	.word	0x0800a0bc
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	20000284 	.word	0x20000284

08000ad4 <report>:

static void report(uint8_t test_reg) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	//send uart

	//send USB

	//blink pattern
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x6>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <HAL_QSPI_MspInit+0xb4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d144      	bne.n	8000be8 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b62:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6513      	str	r3, [r2, #80]	; 0x50
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_QSPI_MspInit+0xb8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000ba6:	23cc      	movs	r3, #204	; 0xcc
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f000 fb80 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_QSPI_MspInit+0xbc>)
 8000be4:	f000 fb70 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	a0001000 	.word	0xa0001000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <HAL_SPI_MspInit+0x14c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d145      	bne.n	8000caa <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c1e:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a3e      	ldr	r2, [pc, #248]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230c      	movs	r3, #12
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c76:	2305      	movs	r3, #5
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4833      	ldr	r0, [pc, #204]	; (8000d50 <HAL_SPI_MspInit+0x154>)
 8000c82:	f000 fb21 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	482c      	ldr	r0, [pc, #176]	; (8000d54 <HAL_SPI_MspInit+0x158>)
 8000ca4:	f000 fb10 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ca8:	e049      	b.n	8000d3e <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <HAL_SPI_MspInit+0x15c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d144      	bne.n	8000d3e <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	4a24      	ldr	r2, [pc, #144]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <HAL_SPI_MspInit+0x154>)
 8000d1a:	f000 fad5 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d1e:	2330      	movs	r3, #48	; 0x30
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_SPI_MspInit+0x158>)
 8000d3a:	f000 fac5 	bl	80012c8 <HAL_GPIO_Init>
}
 8000d3e:	bf00      	nop
 8000d40:	3738      	adds	r7, #56	; 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40003800 	.word	0x40003800
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000800 	.word	0x48000800
 8000d54:	48000400 	.word	0x48000400
 8000d58:	40003c00 	.word	0x40003c00

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0x80>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d129      	bne.n	8000dd2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f000 fa7b 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40021000 	.word	0x40021000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f8f6 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <USB_IRQHandler+0x10>)
 8000e3e:	f000 fd23 	bl	8001888 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20001888 	.word	0x20001888

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f009 f810 	bl	8009ea0 <__errno>
 8000e80:	4602      	mov	r2, r0
 8000e82:	230c      	movs	r3, #12
 8000e84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20028000 	.word	0x20028000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000210 	.word	0x20000210
 8000eb4:	20001b80 	.word	0x20001b80

08000eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <SystemInit+0x64>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <SystemInit+0x64>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <SystemInit+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <SystemInit+0x68>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <SystemInit+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <SystemInit+0x68>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <SystemInit+0x68>)
 8000ee4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ee8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SystemInit+0x68>)
 8000ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <SystemInit+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <SystemInit+0x68>)
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <SystemInit+0x68>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SystemInit+0x64>)
 8000f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	40021000 	.word	0x40021000

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ffc6 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f38:	480a      	ldr	r0, [pc, #40]	; (8000f64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
	ldr	r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f48:	f842 3b04 	str.w	r3, [r2], #4

08000f4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LoopForever+0x16>)
	cmp	r2, r3
 8000f4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f008 ffab 	bl	8009eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fabd 	bl	80004d4 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f5c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000f60:	0800a158 	.word	0x0800a158
	ldr	r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f68:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000f6c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000f70:	20001b80 	.word	0x20001b80

08000f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f95f 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f80e 	bl	8000fa8 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fdac 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_InitTick+0x6c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_InitTick+0x70>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_InitTick+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f96b 	bl	80012ae <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10f      	bne.n	8000ffe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d809      	bhi.n	8000ff8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f935 	bl	800125a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_InitTick+0x74>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e004      	b.n	8001008 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	200003b4 	.word	0x200003b4

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200003b4 	.word	0x200003b4

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	e154      	b.n	8001582 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8146 	beq.w	800157c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00b      	beq.n	8001310 <HAL_GPIO_Init+0x48>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001304:	2b11      	cmp	r3, #17
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0xea>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d123      	bne.n	80013fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	6939      	ldr	r1, [r7, #16]
 80013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0203 	and.w	r2, r3, #3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80a0 	beq.w	800157c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <HAL_GPIO_Init+0x2d8>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_GPIO_Init+0x2d8>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6613      	str	r3, [r2, #96]	; 0x60
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <HAL_GPIO_Init+0x2d8>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001454:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x2dc>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800147e:	d019      	beq.n	80014b4 <HAL_GPIO_Init+0x1ec>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <HAL_GPIO_Init+0x2e0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d013      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_GPIO_Init+0x2e4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d00d      	beq.n	80014ac <HAL_GPIO_Init+0x1e4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <HAL_GPIO_Init+0x2e8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d007      	beq.n	80014a8 <HAL_GPIO_Init+0x1e0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_GPIO_Init+0x2ec>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_GPIO_Init+0x1dc>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e008      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a4:	2307      	movs	r3, #7
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a8:	2303      	movs	r3, #3
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b4:	2300      	movs	r3, #0
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c6:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_GPIO_Init+0x2dc>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014d4:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014f8:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	f47f aea3 	bne.w	80012d8 <HAL_GPIO_Init+0x10>
  }
}
 8001592:	bf00      	nop
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000c00 	.word	0x48000c00
 80015b4:	48001000 	.word	0x48001000
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43d9      	mvns	r1, r3
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	400b      	ands	r3, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af06      	add	r7, sp, #24
 8001626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e104      	b.n	800183c <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f008 f89c 	bl	8009784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fa1d 	bl	8005a98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	687e      	ldr	r6, [r7, #4]
 8001666:	466d      	mov	r5, sp
 8001668:	f106 0410 	add.w	r4, r6, #16
 800166c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	1d33      	adds	r3, r6, #4
 8001676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f004 f9e5 	bl	8005a48 <USB_CoreInit>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0d5      	b.n	800183c <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fa19 	bl	8005ace <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e04c      	b.n	800173c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3301      	adds	r3, #1
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	b298      	uxth	r0, r3
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3336      	adds	r3, #54	; 0x36
 80016e0:	4602      	mov	r2, r0
 80016e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3303      	adds	r3, #3
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3338      	adds	r3, #56	; 0x38
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	333c      	adds	r3, #60	; 0x3c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3340      	adds	r3, #64	; 0x40
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3ad      	bcc.n	80016a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e044      	b.n	80017d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3301      	adds	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3b5      	bcc.n	800174c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	687e      	ldr	r6, [r7, #4]
 80017e8:	466d      	mov	r5, sp
 80017ea:	f106 0410 	add.w	r4, r6, #16
 80017ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	602b      	str	r3, [r5, #0]
 80017f6:	1d33      	adds	r3, r6, #4
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f004 f974 	bl	8005ae8 <USB_DevInit>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e014      	b.n	800183c <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 fa63 	bl	8002cf6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f92d 	bl	8007a94 <USB_DevDisconnect>

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_Start+0x16>
 8001856:	2302      	movs	r3, #2
 8001858:	e012      	b.n	8001880 <HAL_PCD_Start+0x3c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f8ff 	bl	8005a6a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f006 f8f8 	bl	8007a66 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f006 f912 	bl	8007abe <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a4:	d102      	bne.n	80018ac <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fb5b 	bl	8001f62 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 f904 	bl	8007abe <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c0:	d112      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 fff3 	bl	80098c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018e0:	2100      	movs	r1, #0
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f91e 	bl	8001b24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f006 f8e6 	bl	8007abe <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018fc:	d10b      	bne.n	8001916 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f006 f8cf 	bl	8007abe <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192a:	d10b      	bne.n	8001944 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f006 f8b8 	bl	8007abe <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001958:	d133      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0204 	bic.w	r2, r2, #4
 800196c:	b292      	uxth	r2, r2
 800196e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0208 	bic.w	r2, r2, #8
 8001984:	b292      	uxth	r2, r2
 8001986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800199c:	2100      	movs	r1, #0
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f008 fa42 	bl	8009e28 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f007 ffc7 	bl	8009938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019bc:	b292      	uxth	r2, r2
 80019be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 f879 	bl	8007abe <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d6:	d126      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0208 	orr.w	r2, r2, #8
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a02:	b292      	uxth	r2, r2
 8001a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0204 	orr.w	r2, r2, #4
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f007 ff6f 	bl	8009904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f006 f847 	bl	8007abe <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	2b80      	cmp	r3, #128	; 0x80
 8001a38:	d13f      	bne.n	8001aba <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d12b      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0204 	orr.w	r2, r2, #4
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0208 	orr.w	r2, r2, #8
 8001a86:	b292      	uxth	r2, r2
 8001a88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f008 f9bb 	bl	8009e28 <HAL_PCDEx_LPM_Callback>
 8001ab2:	e002      	b.n	8001aba <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 ff25 	bl	8009904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f005 fffd 	bl	8007abe <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ace:	d10e      	bne.n	8001aee <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f007 fede 	bl	80098aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 ffe3 	bl	8007abe <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b02:	d10b      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b16:	b292      	uxth	r2, r2
 8001b18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_PCD_SetAddress+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e013      	b.n	8001b66 <HAL_PCD_SetAddress+0x42>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 ff71 	bl	8007a3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	4608      	mov	r0, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	70fb      	strb	r3, [r7, #3]
 8001b80:	460b      	mov	r3, r1
 8001b82:	803b      	strh	r3, [r7, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0e      	bge.n	8001bb2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	705a      	strb	r2, [r3, #1]
 8001bb0:	e00e      	b.n	8001bd0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0207 	and.w	r2, r3, #7
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bdc:	883a      	ldrh	r2, [r7, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	78ba      	ldrb	r2, [r7, #2]
 8001be6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bfa:	78bb      	ldrb	r3, [r7, #2]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d102      	bne.n	8001c06 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_EP_Open+0xa6>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e00e      	b.n	8001c32 <HAL_PCD_EP_Open+0xc4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 ff82 	bl	8005b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da0e      	bge.n	8001c6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	705a      	strb	r2, [r3, #1]
 8001c6a:	e00e      	b.n	8001c8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_Close+0x6a>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_Close+0x88>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 faa8 	bl	8006208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	f003 0207 	and.w	r2, r3, #7
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fc5b 	bl	80065e2 <USB_EPStartXfer>
 8001d2c:	e005      	b.n	8001d3a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 fc54 	bl	80065e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fc00 	bl	80065e2 <USB_EPStartXfer>
 8001de2:	e005      	b.n	8001df0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fbf9 	bl	80065e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 0207 	and.w	r2, r3, #7
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d901      	bls.n	8001e18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e04c      	b.n	8001eb2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da0e      	bge.n	8001e3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
 8001e3c:	e00c      	b.n	8001e58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_EP_SetStall+0x7e>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e01c      	b.n	8001eb2 <HAL_PCD_EP_SetStall+0xb8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f005 fcda 	bl	8007840 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f005 fe1b 	bl	8007ade <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	f003 020f 	and.w	r2, r3, #15
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d901      	bls.n	8001ed8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e040      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da0e      	bge.n	8001efe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
 8001efc:	e00e      	b.n	8001f1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 0207 	and.w	r2, r3, #7
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_EP_ClrStall+0x82>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0xa0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fcc9 	bl	80078e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08e      	sub	sp, #56	; 0x38
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f6a:	e2d1      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8152 	bne.w	8002230 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d150      	bne.n	8002038 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	81fb      	strh	r3, [r7, #14]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3328      	adds	r3, #40	; 0x28
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f007 fc3c 	bl	8009876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8282 	beq.w	8002510 <PCD_EP_ISR_Handler+0x5ae>
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 827d 	bne.w	8002510 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002036:	e26b      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002048:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	2b00      	cmp	r3, #0
 8002050:	d032      	beq.n	80020b8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4413      	add	r3, r2
 800206c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800208c:	b29b      	uxth	r3, r3
 800208e:	f005 fd73 	bl	8007b78 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29a      	uxth	r2, r3
 800209a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800209e:	4013      	ands	r3, r2
 80020a0:	823b      	strh	r3, [r7, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	8a3a      	ldrh	r2, [r7, #16]
 80020a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ac:	b292      	uxth	r2, r2
 80020ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f007 fbb3 	bl	800981c <HAL_PCD_SetupStageCallback>
 80020b6:	e22b      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f280 8227 	bge.w	8002510 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020ce:	4013      	ands	r3, r2
 80020d0:	83bb      	strh	r3, [r7, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	8bba      	ldrh	r2, [r7, #28]
 80020d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020dc:	b292      	uxth	r2, r2
 80020de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1e2>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002128:	b29b      	uxth	r3, r3
 800212a:	f005 fd25 	bl	8007b78 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	441a      	add	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800213c:	2100      	movs	r1, #0
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f007 fb7e 	bl	8009840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <PCD_EP_ISR_Handler+0x230>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002176:	b29a      	uxth	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29a      	uxth	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e02f      	b.n	80021f2 <PCD_EP_ISR_Handler+0x290>
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b3e      	cmp	r3, #62	; 0x3e
 8002198:	d813      	bhi.n	80021c2 <PCD_EP_ISR_Handler+0x260>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <PCD_EP_ISR_Handler+0x252>
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	3301      	adds	r3, #1
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e017      	b.n	80021f2 <PCD_EP_ISR_Handler+0x290>
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <PCD_EP_ISR_Handler+0x27a>
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	3b01      	subs	r3, #1
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	b29b      	uxth	r3, r3
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002202:	827b      	strh	r3, [r7, #18]
 8002204:	8a7b      	ldrh	r3, [r7, #18]
 8002206:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800220a:	827b      	strh	r3, [r7, #18]
 800220c:	8a7b      	ldrh	r3, [r7, #18]
 800220e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002212:	827b      	strh	r3, [r7, #18]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]
 800222e:	e16f      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002242:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002246:	2b00      	cmp	r3, #0
 8002248:	f280 80e4 	bge.w	8002414 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29a      	uxth	r2, r3
 800225e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002262:	4013      	ands	r3, r2
 8002264:	853b      	strh	r3, [r7, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800227a:	b292      	uxth	r2, r2
 800227c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800227e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	7b1b      	ldrb	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d120      	bne.n	80022de <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80022c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8083 	beq.w	80023d0 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	88da      	ldrh	r2, [r3, #6]
 80022d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022d8:	f005 fc4e 	bl	8007b78 <USB_ReadPMA>
 80022dc:	e078      	b.n	80023d0 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	78db      	ldrb	r3, [r3, #3]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d108      	bne.n	80022f8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022e8:	461a      	mov	r2, r3
 80022ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f91d 	bl	800252c <HAL_PCD_EP_DB_Receive>
 80022f2:	4603      	mov	r3, r0
 80022f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022f6:	e06b      	b.n	80023d0 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	847b      	strh	r3, [r7, #34]	; 0x22
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002334:	b29b      	uxth	r3, r3
 8002336:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01f      	beq.n	8002392 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002376:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237a:	2b00      	cmp	r3, #0
 800237c:	d028      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	6959      	ldr	r1, [r3, #20]
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	891a      	ldrh	r2, [r3, #8]
 800238a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238c:	f005 fbf4 	bl	8007b78 <USB_ReadPMA>
 8002390:	e01e      	b.n	80023d0 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	6959      	ldr	r1, [r3, #20]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	895a      	ldrh	r2, [r3, #10]
 80023ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023cc:	f005 fbd4 	bl	8007b78 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d6:	441a      	add	r2, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023e2:	441a      	add	r2, r3
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <PCD_EP_ISR_Handler+0x498>
 80023f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d206      	bcs.n	8002408 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f007 fa1d 	bl	8009840 <HAL_PCD_DataOutStageCallback>
 8002406:	e005      	b.n	8002414 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240e:	4618      	mov	r0, r3
 8002410:	f004 f8e7 	bl	80065e2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002414:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d078      	beq.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800241e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244c:	843b      	strh	r3, [r7, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	441a      	add	r2, r3
 800245c:	8c3b      	ldrh	r3, [r7, #32]
 800245e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002466:	b29b      	uxth	r3, r3
 8002468:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	78db      	ldrb	r3, [r3, #3]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d108      	bne.n	8002484 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002476:	2b02      	cmp	r3, #2
 8002478:	d144      	bne.n	8002504 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800247a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d13f      	bne.n	8002504 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4413      	add	r3, r2
 800249e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	8bfb      	ldrh	r3, [r7, #30]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d906      	bls.n	80024c2 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	8bfb      	ldrh	r3, [r7, #30]
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	e002      	b.n	80024c8 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f007 f9cd 	bl	8009876 <HAL_PCD_DataInStageCallback>
 80024dc:	e018      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	8bfb      	ldrh	r3, [r7, #30]
 80024e4:	441a      	add	r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	8bfb      	ldrh	r3, [r7, #30]
 80024f0:	441a      	add	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 f870 	bl	80065e2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002502:	e005      	b.n	8002510 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002504:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002506:	461a      	mov	r2, r3
 8002508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f917 	bl	800273e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002518:	b29b      	uxth	r3, r3
 800251a:	b21b      	sxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f6ff ad25 	blt.w	8001f6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3738      	adds	r7, #56	; 0x38
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d07c      	beq.n	800263e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	4413      	add	r3, r2
 800255e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	8b7b      	ldrh	r3, [r7, #26]
 8002570:	429a      	cmp	r2, r3
 8002572:	d306      	bcc.n	8002582 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	8b7b      	ldrh	r3, [r7, #26]
 800257a:	1ad2      	subs	r2, r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	619a      	str	r2, [r3, #24]
 8002580:	e002      	b.n	8002588 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d123      	bne.n	80025d8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	833b      	strh	r3, [r7, #24]
 80025ac:	8b3b      	ldrh	r3, [r7, #24]
 80025ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b2:	833b      	strh	r3, [r7, #24]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	8b3b      	ldrh	r3, [r7, #24]
 80025c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01f      	beq.n	8002622 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	82fb      	strh	r3, [r7, #22]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	8afb      	ldrh	r3, [r7, #22]
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002622:	8b7b      	ldrh	r3, [r7, #26]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8085 	beq.w	8002734 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	891a      	ldrh	r2, [r3, #8]
 8002636:	8b7b      	ldrh	r3, [r7, #26]
 8002638:	f005 fa9e 	bl	8007b78 <USB_ReadPMA>
 800263c:	e07a      	b.n	8002734 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	429a      	cmp	r2, r3
 800266c:	d306      	bcc.n	800267c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e002      	b.n	8002682 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d123      	bne.n	80026d2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a4:	83fb      	strh	r3, [r7, #30]
 80026a6:	8bfb      	ldrh	r3, [r7, #30]
 80026a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ac:	83fb      	strh	r3, [r7, #30]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	8bfb      	ldrh	r3, [r7, #30]
 80026be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11f      	bne.n	800271c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	83bb      	strh	r3, [r7, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	8bbb      	ldrh	r3, [r7, #28]
 8002708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002714:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002718:	b29b      	uxth	r3, r3
 800271a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800271c:	8b7b      	ldrh	r3, [r7, #26]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6959      	ldr	r1, [r3, #20]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	895a      	ldrh	r2, [r3, #10]
 800272e:	8b7b      	ldrh	r3, [r7, #26]
 8002730:	f005 fa22 	bl	8007b78 <USB_ReadPMA>
    }
  }

  return count;
 8002734:	8b7b      	ldrh	r3, [r7, #26]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b092      	sub	sp, #72	; 0x48
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	4613      	mov	r3, r2
 800274a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8130 	beq.w	80029b8 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002784:	429a      	cmp	r2, r3
 8002786:	d906      	bls.n	8002796 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	619a      	str	r2, [r3, #24]
 8002794:	e002      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d12c      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f007 f863 	bl	8009876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 822d 	beq.w	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	827b      	strh	r3, [r7, #18]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	8a7b      	ldrh	r3, [r7, #18]
 80027e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	8013      	strh	r3, [r2, #0]
 80027fc:	e20b      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01f      	beq.n	8002848 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	b29b      	uxth	r3, r3
 8002846:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284e:	2b01      	cmp	r3, #1
 8002850:	f040 81e1 	bne.w	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800285a:	441a      	add	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002866:	441a      	add	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d309      	bcc.n	800288c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	1ad2      	subs	r2, r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	621a      	str	r2, [r3, #32]
 800288a:	e014      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a0:	e009      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d155      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x22c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290a:	b29a      	uxth	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e047      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x264>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	2b3e      	cmp	r3, #62	; 0x3e
 8002916:	d811      	bhi.n	800293c <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	3301      	adds	r3, #1
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	b29b      	uxth	r3, r3
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	b29a      	uxth	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e032      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x264>
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x214>
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	b29b      	uxth	r3, r3
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	b29b      	uxth	r3, r3
 800295a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002962:	b29a      	uxth	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e01b      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x264>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d117      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x264>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	4413      	add	r3, r2
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	00da      	lsls	r2, r3, #3
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	4413      	add	r3, r2
 8002994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	b29a      	uxth	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6959      	ldr	r1, [r3, #20]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	891a      	ldrh	r2, [r3, #8]
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f005 f8a0 	bl	8007af6 <USB_WritePMA>
 80029b6:	e12e      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029dc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d306      	bcc.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	e002      	b.n	80029fc <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12c      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f006 ff33 	bl	8009876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80fd 	bne.w	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8013      	strh	r3, [r2, #0]
 8002a5c:	e0db      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11f      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f040 80b1 	bne.w	8002c16 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aba:	441a      	add	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac6:	441a      	add	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d309      	bcc.n	8002aec <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	1ad2      	subs	r2, r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	621a      	str	r2, [r3, #32]
 8002aea:	e014      	b.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002af4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b00:	e009      	b.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d155      	bne.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x492>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	4413      	add	r3, r2
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	00da      	lsls	r2, r3, #3
 8002b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d112      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	e044      	b.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b7c:	d811      	bhi.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x464>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	3301      	adds	r3, #1
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	e02f      	b.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	e018      	b.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d114      	bne.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	4413      	add	r3, r2
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	00da      	lsls	r2, r3, #3
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6959      	ldr	r1, [r3, #20]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	895a      	ldrh	r2, [r3, #10]
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f004 ff70 	bl	8007af6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c30:	823b      	strh	r3, [r7, #16]
 8002c32:	8a3b      	ldrh	r3, [r7, #16]
 8002c34:	f083 0310 	eor.w	r3, r3, #16
 8002c38:	823b      	strh	r3, [r7, #16]
 8002c3a:	8a3b      	ldrh	r3, [r7, #16]
 8002c3c:	f083 0320 	eor.w	r3, r3, #32
 8002c40:	823b      	strh	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	8a3b      	ldrh	r3, [r7, #16]
 8002c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3748      	adds	r7, #72	; 0x48
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e009      	b.n	8002cba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ca6:	897a      	ldrh	r2, [r7, #10]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	80da      	strh	r2, [r3, #6]
 8002cce:	e00b      	b.n	8002ce8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40007000 	.word	0x40007000

08002d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d130      	bne.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d038      	beq.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2232      	movs	r2, #50	; 0x32
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dcc:	e002      	b.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de0:	d102      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f2      	bne.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d110      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00f      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d007      	beq.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	431bde83 	.word	0x431bde83

08002e34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e42:	6053      	str	r3, [r2, #4]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7fe f8f4 	bl	8001048 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e069      	b.n	8002f40 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd fe5b 	bl	8000b3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e86:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f85e 	bl	8002f4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f856 	bl	8002f68 <QSPI_WaitFlagStateUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d137      	bne.n	8002f36 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6852      	ldr	r2, [r2, #4]
 8002ed8:	0611      	lsls	r1, r2, #24
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69d2      	ldr	r2, [r2, #28]
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a12      	ldr	r2, [r2, #32]
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_QSPI_Init+0xf4>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6912      	ldr	r2, [r2, #16]
 8002f02:	0411      	lsls	r1, r2, #16
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6952      	ldr	r2, [r2, #20]
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6992      	ldr	r2, [r2, #24]
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	ffe0f8fe 	.word	0xffe0f8fe

08002f4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f78:	e01a      	b.n	8002fb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d016      	beq.n	8002fb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe f861 	bl	8001048 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e00e      	b.n	8002fce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1d6      	bne.n	8002f7a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f000 bc11 	b.w	800380e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fec:	4ba0      	ldr	r3, [pc, #640]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80e4 	beq.w	80031d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_RCC_OscConfig+0x4c>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	f040 808b 	bne.w	8003132 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b01      	cmp	r3, #1
 8003020:	f040 8087 	bne.w	8003132 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x64>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e3e8      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	4b8b      	ldr	r3, [pc, #556]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_RCC_OscConfig+0x7e>
 800304c:	4b88      	ldr	r3, [pc, #544]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003054:	e005      	b.n	8003062 <HAL_RCC_OscConfig+0x8a>
 8003056:	4b86      	ldr	r3, [pc, #536]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003062:	4293      	cmp	r3, r2
 8003064:	d223      	bcs.n	80030ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd78 	bl	8003b60 <RCC_SetFlashLatencyFromMSIRange>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e3c9      	b.n	800380e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800307a:	4b7d      	ldr	r3, [pc, #500]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7c      	ldr	r2, [pc, #496]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003080:	f043 0308 	orr.w	r3, r3, #8
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b7a      	ldr	r3, [pc, #488]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4977      	ldr	r1, [pc, #476]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003098:	4b75      	ldr	r3, [pc, #468]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	4972      	ldr	r1, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
 80030ac:	e025      	b.n	80030fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ae:	4b70      	ldr	r3, [pc, #448]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6f      	ldr	r2, [pc, #444]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	496a      	ldr	r1, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4965      	ldr	r1, [pc, #404]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd38 	bl	8003b60 <RCC_SetFlashLatencyFromMSIRange>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e389      	b.n	800380e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030fa:	f000 fc6f 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 80030fe:	4601      	mov	r1, r0
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	4a5a      	ldr	r2, [pc, #360]	; (8003274 <HAL_RCC_OscConfig+0x29c>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	fa21 f303 	lsr.w	r3, r1, r3
 8003116:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_RCC_OscConfig+0x2a0>)
 8003118:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800311a:	4b58      	ldr	r3, [pc, #352]	; (800327c <HAL_RCC_OscConfig+0x2a4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd ff42 	bl	8000fa8 <HAL_InitTick>
 8003124:	4603      	mov	r3, r0
 8003126:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d052      	beq.n	80031d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	e36d      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d032      	beq.n	80031a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4c      	ldr	r2, [pc, #304]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003146:	f7fd ff7f 	bl	8001048 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800314e:	f7fd ff7b 	bl	8001048 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e356      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003160:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3f      	ldr	r2, [pc, #252]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003172:	f043 0308 	orr.w	r3, r3, #8
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	493a      	ldr	r1, [pc, #232]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4935      	ldr	r1, [pc, #212]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
 800319e:	e01a      	b.n	80031d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031a0:	4b33      	ldr	r3, [pc, #204]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a32      	ldr	r2, [pc, #200]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ac:	f7fd ff4c 	bl	8001048 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b4:	f7fd ff48 	bl	8001048 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e323      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1dc>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d073      	beq.n	80032ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x21c>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d10e      	bne.n	800320c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d10b      	bne.n	800320c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d063      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2f0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d15f      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e300      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x24c>
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0x288>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x270>
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x288>
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_RCC_OscConfig+0x298>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fd feee 	bl	8001048 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326e:	e010      	b.n	8003292 <HAL_RCC_OscConfig+0x2ba>
 8003270:	40021000 	.word	0x40021000
 8003274:	0800a100 	.word	0x0800a100
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7fd fee2 	bl	8001048 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e2bd      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003292:	4baf      	ldr	r3, [pc, #700]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x2a8>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fd fed2 	bl	8001048 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fd fece 	bl	8001048 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e2a9      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ba:	4ba5      	ldr	r3, [pc, #660]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2d0>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d060      	beq.n	8003398 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_OscConfig+0x310>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d119      	bne.n	8003316 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d116      	bne.n	8003316 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e8:	4b99      	ldr	r3, [pc, #612]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_OscConfig+0x328>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e286      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b93      	ldr	r3, [pc, #588]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	4990      	ldr	r1, [pc, #576]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003314:	e040      	b.n	8003398 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d023      	beq.n	8003366 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331e:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd fe8d 	bl	8001048 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fd fe89 	bl	8001048 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e264      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003344:	4b82      	ldr	r3, [pc, #520]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	497c      	ldr	r1, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
 8003364:	e018      	b.n	8003398 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a79      	ldr	r2, [pc, #484]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd fe69 	bl	8001048 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337a:	f7fd fe65 	bl	8001048 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e240      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800338c:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03c      	beq.n	800341e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	4a67      	ldr	r2, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fe44 	bl	8001048 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fd fe40 	bl	8001048 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e21b      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d6:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80033d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ef      	beq.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
 80033e4:	e01b      	b.n	800341e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe27 	bl	8001048 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fd fe23 	bl	8001048 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1fe      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003410:	4b4f      	ldr	r3, [pc, #316]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ef      	bne.n	80033fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a6 	beq.w	8003578 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342c:	2300      	movs	r3, #0
 800342e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003430:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a43      	ldr	r2, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003458:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <HAL_RCC_OscConfig+0x57c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d118      	bne.n	8003496 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x57c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <HAL_RCC_OscConfig+0x57c>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003470:	f7fd fdea 	bl	8001048 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fd fde6 	bl	8001048 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1c1      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348a:	4b32      	ldr	r3, [pc, #200]	; (8003554 <HAL_RCC_OscConfig+0x57c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4d8>
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ae:	e024      	b.n	80034fa <HAL_RCC_OscConfig+0x522>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d110      	bne.n	80034da <HAL_RCC_OscConfig+0x502>
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	e00f      	b.n	80034fa <HAL_RCC_OscConfig+0x522>
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	4a17      	ldr	r2, [pc, #92]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fd fda1 	bl	8001048 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd fd9d 	bl	8001048 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e176      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x578>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ed      	beq.n	800350a <HAL_RCC_OscConfig+0x532>
 800352e:	e01a      	b.n	8003566 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd fd8a 	bl	8001048 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003536:	e00f      	b.n	8003558 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fd fd86 	bl	8001048 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d906      	bls.n	8003558 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e15f      	b.n	800380e <HAL_RCC_OscConfig+0x836>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003558:	4baa      	ldr	r3, [pc, #680]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e8      	bne.n	8003538 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003566:	7ffb      	ldrb	r3, [r7, #31]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356c:	4ba5      	ldr	r3, [pc, #660]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	4aa4      	ldr	r2, [pc, #656]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03c      	beq.n	80035fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800358c:	4b9d      	ldr	r3, [pc, #628]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800358e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003592:	4a9c      	ldr	r2, [pc, #624]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fd fd54 	bl	8001048 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a4:	f7fd fd50 	bl	8001048 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e12b      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b6:	4b93      	ldr	r3, [pc, #588]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80035b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ef      	beq.n	80035a4 <HAL_RCC_OscConfig+0x5cc>
 80035c4:	e01b      	b.n	80035fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035c6:	4b8f      	ldr	r3, [pc, #572]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035cc:	4a8d      	ldr	r2, [pc, #564]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fd fd37 	bl	8001048 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035de:	f7fd fd33 	bl	8001048 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e10e      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f0:	4b84      	ldr	r3, [pc, #528]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80035f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1ef      	bne.n	80035de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8102 	beq.w	800380c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b02      	cmp	r3, #2
 800360e:	f040 80c5 	bne.w	800379c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003612:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	429a      	cmp	r2, r3
 8003624:	d12c      	bne.n	8003680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	3b01      	subs	r3, #1
 8003632:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d123      	bne.n	8003680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d11b      	bne.n	8003680 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d113      	bne.n	8003680 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d109      	bne.n	8003680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d067      	beq.n	8003750 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d062      	beq.n	800374c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003686:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0bb      	b.n	800380e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800369c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a2:	f7fd fcd1 	bl	8001048 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fccd 	bl	8001048 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e0a8      	b.n	800380e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <HAL_RCC_OscConfig+0x830>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036d8:	3a01      	subs	r2, #1
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	4311      	orrs	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e2:	0212      	lsls	r2, r2, #8
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0552      	lsls	r2, r2, #21
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036f6:	0852      	lsrs	r2, r2, #1
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0652      	lsls	r2, r2, #25
 80036fc:	4311      	orrs	r1, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003702:	06d2      	lsls	r2, r2, #27
 8003704:	430a      	orrs	r2, r1
 8003706:	493f      	ldr	r1, [pc, #252]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800370c:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003724:	f7fd fc90 	bl	8001048 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fc8c 	bl	8001048 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e067      	b.n	800380e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374a:	e05f      	b.n	800380c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e05e      	b.n	800380e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800375c:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a25      	ldr	r2, [pc, #148]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fd fc68 	bl	8001048 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fc64 	bl	8001048 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e03f      	b.n	800380e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x7a4>
 800379a:	e037      	b.n	800380c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d02d      	beq.n	80037fe <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fc37 	bl	8001048 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd fc33 	bl	8001048 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e00e      	b.n	800380e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_RCC_OscConfig+0x82c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x806>
 80037fc:	e006      	b.n	800380c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e005      	b.n	800380e <HAL_RCC_OscConfig+0x836>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0c8      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4961      	ldr	r1, [pc, #388]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b0      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d04c      	beq.n	8003902 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003870:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e09e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d107      	bne.n	8003898 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d115      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e092      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e086      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e07e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	493f      	ldr	r1, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d2:	f7fd fbb9 	bl	8001048 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038da:	f7fd fbb5 	bl	8001048 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e066      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 020c 	and.w	r2, r3, #12
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	429a      	cmp	r2, r3
 8003900:	d1eb      	bne.n	80038da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	492c      	ldr	r1, [pc, #176]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d210      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4924      	ldr	r1, [pc, #144]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e036      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4918      	ldr	r1, [pc, #96]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4910      	ldr	r1, [pc, #64]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398e:	f000 f825 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003992:	4601      	mov	r1, r0
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	5cd3      	ldrb	r3, [r2, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	fa21 f303 	lsr.w	r3, r1, r3
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd faf8 	bl	8000fa8 <HAL_InitTick>
 80039b8:	4603      	mov	r3, r0
 80039ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	0800a100 	.word	0x0800a100
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x34>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d11e      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a1c:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a38:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e004      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d133      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d002      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0xaa>
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a82:	617b      	str	r3, [r7, #20]
      break;
 8003a84:	e005      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a88:	617b      	str	r3, [r7, #20]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	617b      	str	r3, [r7, #20]
      break;
 8003a90:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	fb02 f203 	mul.w	r2, r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0e5b      	lsrs	r3, r3, #25
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3724      	adds	r7, #36	; 0x24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	0800a118 	.word	0x0800a118
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200

08003af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000000 	.word	0x20000000

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b0c:	f7ff fff0 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b10:	4601      	mov	r1, r0
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	0800a110 	.word	0x0800a110

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b38:	f7ff ffda 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0adb      	lsrs	r3, r3, #11
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	0800a110 	.word	0x0800a110

08003b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b78:	f7ff f8f8 	bl	8002d6c <HAL_PWREx_GetVoltageRange>
 8003b7c:	6178      	str	r0, [r7, #20]
 8003b7e:	e014      	b.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b98:	f7ff f8e8 	bl	8002d6c <HAL_PWREx_GetVoltageRange>
 8003b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb0:	d10b      	bne.n	8003bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d919      	bls.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2ba0      	cmp	r3, #160	; 0xa0
 8003bbc:	d902      	bls.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e013      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	e010      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d902      	bls.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e00a      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d102      	bne.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bdc:	2302      	movs	r3, #2
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e004      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d101      	bne.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be8:	2301      	movs	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 0207 	bic.w	r2, r3, #7
 8003bf4:	4909      	ldr	r1, [pc, #36]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d001      	beq.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40022000 	.word	0x40022000

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c28:	2300      	movs	r3, #0
 8003c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c44:	d005      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5e:	e00c      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa54 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c70:	e003      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	74fb      	strb	r3, [r7, #19]
      break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c80:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	494e      	ldr	r1, [pc, #312]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c96:	e001      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 809e 	beq.w	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a39      	ldr	r2, [pc, #228]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cec:	f7fd f9ac 	bl	8001048 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fd f9a8 	bl	8001048 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	74fb      	strb	r3, [r7, #19]
        break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d08:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d15a      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01e      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d019      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd f968 	bl	8001048 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fd f964 	bl	8001048 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d902      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	74fb      	strb	r3, [r7, #19]
            break;
 8003d92:	e006      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ec      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db6:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd4:	7c7b      	ldrb	r3, [r7, #17]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b9e      	ldr	r3, [pc, #632]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	4a9d      	ldr	r2, [pc, #628]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df2:	4b98      	ldr	r3, [pc, #608]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 0203 	bic.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4994      	ldr	r1, [pc, #592]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e14:	4b8f      	ldr	r3, [pc, #572]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 020c 	bic.w	r2, r3, #12
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	498c      	ldr	r1, [pc, #560]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e36:	4b87      	ldr	r3, [pc, #540]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	4983      	ldr	r1, [pc, #524]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e58:	4b7e      	ldr	r3, [pc, #504]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	497b      	ldr	r1, [pc, #492]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e7a:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4972      	ldr	r1, [pc, #456]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9c:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	496a      	ldr	r1, [pc, #424]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ebe:	4b65      	ldr	r3, [pc, #404]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ecc:	4961      	ldr	r1, [pc, #388]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	4959      	ldr	r1, [pc, #356]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4950      	ldr	r1, [pc, #320]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	4948      	ldr	r1, [pc, #288]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f46:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	493f      	ldr	r1, [pc, #252]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d028      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f68:	4b3a      	ldr	r3, [pc, #232]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	4937      	ldr	r1, [pc, #220]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f86:	d106      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f92:	60d3      	str	r3, [r2, #12]
 8003f94:	e011      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8b4 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d028      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	491f      	ldr	r1, [pc, #124]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff0:	60d3      	str	r3, [r2, #12]
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f885 	bl	8004114 <RCCEx_PLLSAI1_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	4908      	ldr	r1, [pc, #32]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004042:	d109      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a02      	ldr	r2, [pc, #8]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
 8004050:	e014      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f853 	bl	8004114 <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01c      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	4916      	ldr	r1, [pc, #88]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f830 	bl	8004114 <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	4904      	ldr	r1, [pc, #16]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
       ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004146:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
       ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d044      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e041      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d00c      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x6e>
 8004168:	2b03      	cmp	r3, #3
 800416a:	d013      	beq.n	8004194 <RCCEx_PLLSAI1_Config+0x80>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d120      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004170:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11d      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e01a      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004182:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	2b00      	cmp	r3, #0
 800418c:	d116      	bne.n	80041bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e013      	b.n	80041bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004194:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10f      	bne.n	80041c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b0:	e006      	b.n	80041c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      break;
 80041b6:	e004      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10d      	bne.n	80041e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	430b      	orrs	r3, r1
 80041de:	4944      	ldr	r1, [pc, #272]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d17c      	bne.n	80042e4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fc ff27 	bl	8001048 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041fc:	e009      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041fe:	f7fc ff23 	bl	8001048 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d902      	bls.n	8004212 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	73fb      	strb	r3, [r7, #15]
        break;
 8004210:	e005      	b.n	800421e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d15f      	bne.n	80042e4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004232:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6892      	ldr	r2, [r2, #8]
 800423a:	0211      	lsls	r1, r2, #8
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68d2      	ldr	r2, [r2, #12]
 8004240:	06d2      	lsls	r2, r2, #27
 8004242:	430a      	orrs	r2, r1
 8004244:	492a      	ldr	r1, [pc, #168]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]
 800424a:	e027      	b.n	800429c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d112      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004252:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800425a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	0211      	lsls	r1, r2, #8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6912      	ldr	r2, [r2, #16]
 8004268:	0852      	lsrs	r2, r2, #1
 800426a:	3a01      	subs	r2, #1
 800426c:	0552      	lsls	r2, r2, #21
 800426e:	430a      	orrs	r2, r1
 8004270:	491f      	ldr	r1, [pc, #124]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
 8004276:	e011      	b.n	800429c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004280:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	0211      	lsls	r1, r2, #8
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6952      	ldr	r2, [r2, #20]
 800428e:	0852      	lsrs	r2, r2, #1
 8004290:	3a01      	subs	r2, #1
 8004292:	0652      	lsls	r2, r2, #25
 8004294:	430a      	orrs	r2, r1
 8004296:	4916      	ldr	r1, [pc, #88]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fc fece 	bl	8001048 <HAL_GetTick>
 80042ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ae:	e009      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b0:	f7fc feca 	bl	8001048 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d902      	bls.n	80042c4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	73fb      	strb	r3, [r7, #15]
          break;
 80042c2:	e005      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	4904      	ldr	r1, [pc, #16]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e095      	b.n	8004432 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d009      	beq.n	800432c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
 800431e:	e005      	b.n	800432c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fc58 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800436c:	d902      	bls.n	8004374 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e002      	b.n	800437a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004378:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004382:	d007      	beq.n	8004394 <HAL_SPI_Init+0xa0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	ea42 0103 	orr.w	r1, r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	f003 0204 	and.w	r2, r3, #4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_SPI_Transmit+0x22>
 8004458:	2302      	movs	r3, #2
 800445a:	e158      	b.n	800470e <HAL_SPI_Transmit+0x2d4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004464:	f7fc fdf0 	bl	8001048 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800447e:	e13d      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x52>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004490:	e134      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d10f      	bne.n	80044fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d007      	beq.n	800451c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004524:	d94b      	bls.n	80045be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0xfa>
 800452e:	8afb      	ldrh	r3, [r7, #22]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d13e      	bne.n	80045b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004558:	e02b      	b.n	80045b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d112      	bne.n	800458e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458c:	e011      	b.n	80045b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458e:	f7fc fd5b 	bl	8001048 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_Transmit+0x16c>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_Transmit+0x172>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045b0:	e0a4      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ce      	bne.n	800455a <HAL_SPI_Transmit+0x120>
 80045bc:	e07c      	b.n	80046b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Transmit+0x192>
 80045c6:	8afb      	ldrh	r3, [r7, #22]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d170      	bne.n	80046ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d912      	bls.n	80045fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b02      	subs	r3, #2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fa:	e058      	b.n	80046ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004622:	e044      	b.n	80046ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d12b      	bne.n	800468a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d912      	bls.n	8004662 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b02      	subs	r3, #2
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004660:	e025      	b.n	80046ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004688:	e011      	b.n	80046ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468a:	f7fc fcdd 	bl	8001048 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d803      	bhi.n	80046a2 <HAL_SPI_Transmit+0x268>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d102      	bne.n	80046a8 <HAL_SPI_Transmit+0x26e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ac:	e026      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1b5      	bne.n	8004624 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fcdb 	bl	8005078 <SPI_EndRxTxTransaction>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e000      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80046fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af02      	add	r7, sp, #8
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d112      	bne.n	800475a <HAL_SPI_Receive+0x44>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10e      	bne.n	800475a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f910 	bl	8004976 <HAL_SPI_TransmitReceive>
 8004756:	4603      	mov	r3, r0
 8004758:	e109      	b.n	800496e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_SPI_Receive+0x52>
 8004764:	2302      	movs	r3, #2
 8004766:	e102      	b.n	800496e <HAL_SPI_Receive+0x258>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004770:	f7fc fc6a 	bl	8001048 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004786:	e0e9      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Receive+0x7e>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004798:	e0e0      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2204      	movs	r2, #4
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d908      	bls.n	80047f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	e007      	b.n	8004808 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d10f      	bne.n	8004832 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004858:	d867      	bhi.n	800492a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800485a:	e030      	b.n	80048be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d117      	bne.n	800489a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f103 020c 	add.w	r2, r3, #12
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004898:	e011      	b.n	80048be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489a:	f7fc fbd5 	bl	8001048 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d803      	bhi.n	80048b2 <HAL_SPI_Receive+0x19c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Receive+0x1a2>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048bc:	e04e      	b.n	800495c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c8      	bne.n	800485c <HAL_SPI_Receive+0x146>
 80048ca:	e034      	b.n	8004936 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d115      	bne.n	8004906 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	b292      	uxth	r2, r2
 80048e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004904:	e011      	b.n	800492a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004906:	f7fc fb9f 	bl	8001048 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d803      	bhi.n	800491e <HAL_SPI_Receive+0x208>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d102      	bne.n	8004924 <HAL_SPI_Receive+0x20e>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004928:	e018      	b.n	800495c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ca      	bne.n	80048cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fb44 	bl	8004fc8 <SPI_EndRxTransaction>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
 8004958:	e000      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

error :
 800495a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004984:	2301      	movs	r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_SPI_TransmitReceive+0x26>
 8004998:	2302      	movs	r3, #2
 800499a:	e1fb      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x41e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a4:	f7fc fb50 	bl	8001048 <HAL_GetTick>
 80049a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049c0:	7efb      	ldrb	r3, [r7, #27]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00e      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
 80049d6:	7efb      	ldrb	r3, [r7, #27]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d003      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049e2:	e1cd      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049fc:	e1c0      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d802      	bhi.n	8004a5c <HAL_SPI_TransmitReceive+0xe6>
 8004a56:	8a3b      	ldrh	r3, [r7, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d908      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	e007      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa4:	d97c      	bls.n	8004ba0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x13e>
 8004aae:	8a7b      	ldrh	r3, [r7, #18]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d169      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	1c9a      	adds	r2, r3, #2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad8:	e056      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d11b      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d113      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11c      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x1f2>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	b292      	uxth	r2, r2
 8004b46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b64:	2301      	movs	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b68:	f7fc fa6e 	bl	8001048 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d807      	bhi.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d003      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b86:	e0fb      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1a3      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x164>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d19d      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x164>
 8004b9e:	e0df      	b.n	8004d60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x23a>
 8004ba8:	8a7b      	ldrh	r3, [r7, #18]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 80cb 	bne.w	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d912      	bls.n	8004be0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b02      	subs	r3, #2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bde:	e0b2      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c06:	e09e      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d134      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02f      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d12c      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d912      	bls.n	8004c56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c54:	e012      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d148      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x3aa>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d042      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d923      	bls.n	8004cee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d81f      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	e016      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f103 020c 	add.w	r2, r3, #12
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d20:	f7fc f992 	bl	8001048 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d803      	bhi.n	8004d38 <HAL_SPI_TransmitReceive+0x3c2>
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x3c8>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d44:	e01c      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af5b 	bne.w	8004c08 <HAL_SPI_TransmitReceive+0x292>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f47f af54 	bne.w	8004c08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f987 	bl	8005078 <SPI_EndRxTxTransaction>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d7c:	e000      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dac:	f7fc f94c 	bl	8001048 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dbc:	f7fc f944 	bl	8001048 <HAL_GetTick>
 8004dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	015b      	lsls	r3, r3, #5
 8004dc8:	0d1b      	lsrs	r3, r3, #20
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd2:	e054      	b.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d050      	beq.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ddc:	f7fc f934 	bl	8001048 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d902      	bls.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d13d      	bne.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d111      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e14:	d004      	beq.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d107      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d10f      	bne.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e017      	b.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d19b      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000000 	.word	0x20000000

08004eac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eba:	f7fc f8c5 	bl	8001048 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eca:	f7fc f8bd 	bl	8001048 <HAL_GetTick>
 8004ece:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ed0:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00da      	lsls	r2, r3, #3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	0d1b      	lsrs	r3, r3, #20
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ee8:	e05f      	b.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ef0:	d106      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d050      	beq.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f08:	f7fc f89e 	bl	8001048 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d902      	bls.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0x72>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d13d      	bne.n	8004f9a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f36:	d111      	bne.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d004      	beq.n	8004f4c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4a:	d107      	bne.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f64:	d10f      	bne.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e010      	b.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d197      	bne.n	8004eea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000000 	.word	0x20000000

08004fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fdc:	d111      	bne.n	8005002 <SPI_EndRxTransaction+0x3a>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d004      	beq.n	8004ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d107      	bne.n	8005002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2200      	movs	r2, #0
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff fec5 	bl	8004d9c <SPI_WaitFlagStateUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e023      	b.n	8005070 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005030:	d11d      	bne.n	800506e <SPI_EndRxTransaction+0xa6>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503a:	d004      	beq.n	8005046 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005044:	d113      	bne.n	800506e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ff2a 	bl	8004eac <SPI_WaitFifoStateUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e000      	b.n	8005070 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff0b 	bl	8004eac <SPI_WaitFifoStateUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e027      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2180      	movs	r1, #128	; 0x80
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fe70 	bl	8004d9c <SPI_WaitFlagStateUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e014      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fee4 	bl	8004eac <SPI_WaitFifoStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e000      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e040      	b.n	8005198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fb fe18 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8c0 	bl	80052c8 <UART_SetConfig>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e022      	b.n	8005198 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb12 	bl	8005784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800516e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800517e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb99 	bl	80058c8 <UART_CheckIdleState>
 8005196:	4603      	mov	r3, r0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	f040 8081 	bne.w	80052bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_UART_Transmit+0x26>
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e079      	b.n	80052be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x38>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e072      	b.n	80052be <HAL_UART_Transmit+0x11e>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2221      	movs	r2, #33	; 0x21
 80051ea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051ec:	f7fb ff2c 	bl	8001048 <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520a:	d108      	bne.n	800521e <HAL_UART_Transmit+0x7e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e003      	b.n	8005226 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800522e:	e02d      	b.n	800528c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fb89 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e039      	b.n	80052be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525c:	b292      	uxth	r2, r2
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3302      	adds	r3, #2
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e008      	b.n	800527a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b292      	uxth	r2, r2
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1cb      	bne.n	8005230 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fb55 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e005      	b.n	80052be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052cc:	b088      	sub	sp, #32
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4ba4      	ldr	r3, [pc, #656]	; (8005588 <UART_SetConfig+0x2c0>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	69f9      	ldr	r1, [r7, #28]
 80052fe:	430b      	orrs	r3, r1
 8005300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a9a      	ldr	r2, [pc, #616]	; (800558c <UART_SetConfig+0x2c4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a91      	ldr	r2, [pc, #580]	; (8005590 <UART_SetConfig+0x2c8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d121      	bne.n	8005394 <UART_SetConfig+0xcc>
 8005350:	4b90      	ldr	r3, [pc, #576]	; (8005594 <UART_SetConfig+0x2cc>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b03      	cmp	r3, #3
 800535c:	d816      	bhi.n	800538c <UART_SetConfig+0xc4>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x9c>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005375 	.word	0x08005375
 8005368:	08005381 	.word	0x08005381
 800536c:	0800537b 	.word	0x0800537b
 8005370:	08005387 	.word	0x08005387
 8005374:	2301      	movs	r3, #1
 8005376:	76fb      	strb	r3, [r7, #27]
 8005378:	e0be      	b.n	80054f8 <UART_SetConfig+0x230>
 800537a:	2302      	movs	r3, #2
 800537c:	76fb      	strb	r3, [r7, #27]
 800537e:	e0bb      	b.n	80054f8 <UART_SetConfig+0x230>
 8005380:	2304      	movs	r3, #4
 8005382:	76fb      	strb	r3, [r7, #27]
 8005384:	e0b8      	b.n	80054f8 <UART_SetConfig+0x230>
 8005386:	2308      	movs	r3, #8
 8005388:	76fb      	strb	r3, [r7, #27]
 800538a:	e0b5      	b.n	80054f8 <UART_SetConfig+0x230>
 800538c:	2310      	movs	r3, #16
 800538e:	76fb      	strb	r3, [r7, #27]
 8005390:	bf00      	nop
 8005392:	e0b1      	b.n	80054f8 <UART_SetConfig+0x230>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7f      	ldr	r2, [pc, #508]	; (8005598 <UART_SetConfig+0x2d0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d134      	bne.n	8005408 <UART_SetConfig+0x140>
 800539e:	4b7d      	ldr	r3, [pc, #500]	; (8005594 <UART_SetConfig+0x2cc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	d829      	bhi.n	8005400 <UART_SetConfig+0x138>
 80053ac:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0xec>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	08005401 	.word	0x08005401
 80053bc:	08005401 	.word	0x08005401
 80053c0:	08005401 	.word	0x08005401
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	08005401 	.word	0x08005401
 80053cc:	08005401 	.word	0x08005401
 80053d0:	08005401 	.word	0x08005401
 80053d4:	080053ef 	.word	0x080053ef
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005401 	.word	0x08005401
 80053e4:	080053fb 	.word	0x080053fb
 80053e8:	2300      	movs	r3, #0
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e084      	b.n	80054f8 <UART_SetConfig+0x230>
 80053ee:	2302      	movs	r3, #2
 80053f0:	76fb      	strb	r3, [r7, #27]
 80053f2:	e081      	b.n	80054f8 <UART_SetConfig+0x230>
 80053f4:	2304      	movs	r3, #4
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e07e      	b.n	80054f8 <UART_SetConfig+0x230>
 80053fa:	2308      	movs	r3, #8
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e07b      	b.n	80054f8 <UART_SetConfig+0x230>
 8005400:	2310      	movs	r3, #16
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	bf00      	nop
 8005406:	e077      	b.n	80054f8 <UART_SetConfig+0x230>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a63      	ldr	r2, [pc, #396]	; (800559c <UART_SetConfig+0x2d4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d120      	bne.n	8005454 <UART_SetConfig+0x18c>
 8005412:	4b60      	ldr	r3, [pc, #384]	; (8005594 <UART_SetConfig+0x2cc>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800541c:	2b10      	cmp	r3, #16
 800541e:	d00f      	beq.n	8005440 <UART_SetConfig+0x178>
 8005420:	2b10      	cmp	r3, #16
 8005422:	d802      	bhi.n	800542a <UART_SetConfig+0x162>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <UART_SetConfig+0x16c>
 8005428:	e010      	b.n	800544c <UART_SetConfig+0x184>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d005      	beq.n	800543a <UART_SetConfig+0x172>
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d009      	beq.n	8005446 <UART_SetConfig+0x17e>
 8005432:	e00b      	b.n	800544c <UART_SetConfig+0x184>
 8005434:	2300      	movs	r3, #0
 8005436:	76fb      	strb	r3, [r7, #27]
 8005438:	e05e      	b.n	80054f8 <UART_SetConfig+0x230>
 800543a:	2302      	movs	r3, #2
 800543c:	76fb      	strb	r3, [r7, #27]
 800543e:	e05b      	b.n	80054f8 <UART_SetConfig+0x230>
 8005440:	2304      	movs	r3, #4
 8005442:	76fb      	strb	r3, [r7, #27]
 8005444:	e058      	b.n	80054f8 <UART_SetConfig+0x230>
 8005446:	2308      	movs	r3, #8
 8005448:	76fb      	strb	r3, [r7, #27]
 800544a:	e055      	b.n	80054f8 <UART_SetConfig+0x230>
 800544c:	2310      	movs	r3, #16
 800544e:	76fb      	strb	r3, [r7, #27]
 8005450:	bf00      	nop
 8005452:	e051      	b.n	80054f8 <UART_SetConfig+0x230>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a51      	ldr	r2, [pc, #324]	; (80055a0 <UART_SetConfig+0x2d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d120      	bne.n	80054a0 <UART_SetConfig+0x1d8>
 800545e:	4b4d      	ldr	r3, [pc, #308]	; (8005594 <UART_SetConfig+0x2cc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d00f      	beq.n	800548c <UART_SetConfig+0x1c4>
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d802      	bhi.n	8005476 <UART_SetConfig+0x1ae>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <UART_SetConfig+0x1b8>
 8005474:	e010      	b.n	8005498 <UART_SetConfig+0x1d0>
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d005      	beq.n	8005486 <UART_SetConfig+0x1be>
 800547a:	2bc0      	cmp	r3, #192	; 0xc0
 800547c:	d009      	beq.n	8005492 <UART_SetConfig+0x1ca>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x1d0>
 8005480:	2300      	movs	r3, #0
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e038      	b.n	80054f8 <UART_SetConfig+0x230>
 8005486:	2302      	movs	r3, #2
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e035      	b.n	80054f8 <UART_SetConfig+0x230>
 800548c:	2304      	movs	r3, #4
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e032      	b.n	80054f8 <UART_SetConfig+0x230>
 8005492:	2308      	movs	r3, #8
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e02f      	b.n	80054f8 <UART_SetConfig+0x230>
 8005498:	2310      	movs	r3, #16
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	bf00      	nop
 800549e:	e02b      	b.n	80054f8 <UART_SetConfig+0x230>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a39      	ldr	r2, [pc, #228]	; (800558c <UART_SetConfig+0x2c4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d124      	bne.n	80054f4 <UART_SetConfig+0x22c>
 80054aa:	4b3a      	ldr	r3, [pc, #232]	; (8005594 <UART_SetConfig+0x2cc>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d012      	beq.n	80054e0 <UART_SetConfig+0x218>
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d802      	bhi.n	80054c6 <UART_SetConfig+0x1fe>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <UART_SetConfig+0x20c>
 80054c4:	e012      	b.n	80054ec <UART_SetConfig+0x224>
 80054c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ca:	d006      	beq.n	80054da <UART_SetConfig+0x212>
 80054cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d0:	d009      	beq.n	80054e6 <UART_SetConfig+0x21e>
 80054d2:	e00b      	b.n	80054ec <UART_SetConfig+0x224>
 80054d4:	2300      	movs	r3, #0
 80054d6:	76fb      	strb	r3, [r7, #27]
 80054d8:	e00e      	b.n	80054f8 <UART_SetConfig+0x230>
 80054da:	2302      	movs	r3, #2
 80054dc:	76fb      	strb	r3, [r7, #27]
 80054de:	e00b      	b.n	80054f8 <UART_SetConfig+0x230>
 80054e0:	2304      	movs	r3, #4
 80054e2:	76fb      	strb	r3, [r7, #27]
 80054e4:	e008      	b.n	80054f8 <UART_SetConfig+0x230>
 80054e6:	2308      	movs	r3, #8
 80054e8:	76fb      	strb	r3, [r7, #27]
 80054ea:	e005      	b.n	80054f8 <UART_SetConfig+0x230>
 80054ec:	2310      	movs	r3, #16
 80054ee:	76fb      	strb	r3, [r7, #27]
 80054f0:	bf00      	nop
 80054f2:	e001      	b.n	80054f8 <UART_SetConfig+0x230>
 80054f4:	2310      	movs	r3, #16
 80054f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a23      	ldr	r2, [pc, #140]	; (800558c <UART_SetConfig+0x2c4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	f040 8085 	bne.w	800560e <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005504:	7efb      	ldrb	r3, [r7, #27]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d823      	bhi.n	8005552 <UART_SetConfig+0x28a>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x248>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005535 	.word	0x08005535
 8005514:	08005553 	.word	0x08005553
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005553 	.word	0x08005553
 8005520:	08005543 	.word	0x08005543
 8005524:	08005553 	.word	0x08005553
 8005528:	08005553 	.word	0x08005553
 800552c:	08005553 	.word	0x08005553
 8005530:	0800554b 	.word	0x0800554b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fe fae8 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8005538:	6178      	str	r0, [r7, #20]
        break;
 800553a:	e00f      	b.n	800555c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <UART_SetConfig+0x2dc>)
 800553e:	617b      	str	r3, [r7, #20]
        break;
 8005540:	e00c      	b.n	800555c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005542:	f7fe fa4b 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8005546:	6178      	str	r0, [r7, #20]
        break;
 8005548:	e008      	b.n	800555c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554e:	617b      	str	r3, [r7, #20]
        break;
 8005550:	e004      	b.n	800555c <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	76bb      	strb	r3, [r7, #26]
        break;
 800555a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8102 	beq.w	8005768 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d305      	bcc.n	8005580 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	429a      	cmp	r2, r3
 800557e:	d913      	bls.n	80055a8 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	76bb      	strb	r3, [r7, #26]
 8005584:	e0f0      	b.n	8005768 <UART_SetConfig+0x4a0>
 8005586:	bf00      	nop
 8005588:	efff69f3 	.word	0xefff69f3
 800558c:	40008000 	.word	0x40008000
 8005590:	40013800 	.word	0x40013800
 8005594:	40021000 	.word	0x40021000
 8005598:	40004400 	.word	0x40004400
 800559c:	40004800 	.word	0x40004800
 80055a0:	40004c00 	.word	0x40004c00
 80055a4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4619      	mov	r1, r3
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	0214      	lsls	r4, r2, #8
 80055ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055be:	020b      	lsls	r3, r1, #8
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	0852      	lsrs	r2, r2, #1
 80055c6:	4611      	mov	r1, r2
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	eb13 0b01 	adds.w	fp, r3, r1
 80055d0:	eb44 0c02 	adc.w	ip, r4, r2
 80055d4:	4658      	mov	r0, fp
 80055d6:	4661      	mov	r1, ip
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	461a      	mov	r2, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	f7fa fdf6 	bl	80001d4 <__aeabi_uldivmod>
 80055e8:	4603      	mov	r3, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d308      	bcc.n	8005608 <UART_SetConfig+0x340>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fc:	d204      	bcs.n	8005608 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e0af      	b.n	8005768 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	76bb      	strb	r3, [r7, #26]
 800560c:	e0ac      	b.n	8005768 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005616:	d15b      	bne.n	80056d0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005618:	7efb      	ldrb	r3, [r7, #27]
 800561a:	2b08      	cmp	r3, #8
 800561c:	d827      	bhi.n	800566e <UART_SetConfig+0x3a6>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x35c>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fe fa5e 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 800564c:	6178      	str	r0, [r7, #20]
        break;
 800564e:	e013      	b.n	8005678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fe fa70 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8005654:	6178      	str	r0, [r7, #20]
        break;
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <UART_SetConfig+0x4b8>)
 800565a:	617b      	str	r3, [r7, #20]
        break;
 800565c:	e00c      	b.n	8005678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe f9bd 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8005662:	6178      	str	r0, [r7, #20]
        break;
 8005664:	e008      	b.n	8005678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566a:	617b      	str	r3, [r7, #20]
        break;
 800566c:	e004      	b.n	8005678 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	76bb      	strb	r3, [r7, #26]
        break;
 8005676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d074      	beq.n	8005768 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	005a      	lsls	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	441a      	add	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	b29b      	uxth	r3, r3
 8005694:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d916      	bls.n	80056ca <UART_SetConfig+0x402>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d212      	bcs.n	80056ca <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f023 030f 	bic.w	r3, r3, #15
 80056ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	89fb      	ldrh	r3, [r7, #14]
 80056bc:	4313      	orrs	r3, r2
 80056be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	89fa      	ldrh	r2, [r7, #14]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e04e      	b.n	8005768 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	76bb      	strb	r3, [r7, #26]
 80056ce:	e04b      	b.n	8005768 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d0:	7efb      	ldrb	r3, [r7, #27]
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d827      	bhi.n	8005726 <UART_SetConfig+0x45e>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x414>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005701 	.word	0x08005701
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005711 	.word	0x08005711
 80056e8:	08005727 	.word	0x08005727
 80056ec:	08005717 	.word	0x08005717
 80056f0:	08005727 	.word	0x08005727
 80056f4:	08005727 	.word	0x08005727
 80056f8:	08005727 	.word	0x08005727
 80056fc:	0800571f 	.word	0x0800571f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fe fa02 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8005704:	6178      	str	r0, [r7, #20]
        break;
 8005706:	e013      	b.n	8005730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7fe fa14 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 800570c:	6178      	str	r0, [r7, #20]
        break;
 800570e:	e00f      	b.n	8005730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <UART_SetConfig+0x4b8>)
 8005712:	617b      	str	r3, [r7, #20]
        break;
 8005714:	e00c      	b.n	8005730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005716:	f7fe f961 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800571a:	6178      	str	r0, [r7, #20]
        break;
 800571c:	e008      	b.n	8005730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005722:	617b      	str	r3, [r7, #20]
        break;
 8005724:	e004      	b.n	8005730 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	76bb      	strb	r3, [r7, #26]
        break;
 800572e:	bf00      	nop
    }

    if (pclk != 0U)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085a      	lsrs	r2, r3, #1
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	b29b      	uxth	r3, r3
 800574a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b0f      	cmp	r3, #15
 8005750:	d908      	bls.n	8005764 <UART_SetConfig+0x49c>
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d204      	bcs.n	8005764 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e001      	b.n	8005768 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005774:	7ebb      	ldrb	r3, [r7, #26]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005780:	00f42400 	.word	0x00f42400

08005784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01a      	beq.n	800589a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005882:	d10a      	bne.n	800589a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80058d6:	f7fb fbb7 	bl	8001048 <HAL_GetTick>
 80058da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d10e      	bne.n	8005908 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f82a 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e020      	b.n	800594a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d10e      	bne.n	8005934 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f814 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e00a      	b.n	800594a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4613      	mov	r3, r2
 8005960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	e05d      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d059      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596c:	f7fb fb6c 	bl	8001048 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <UART_WaitOnFlagUntilTimeout+0x30>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11b      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005990:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e042      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02b      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	d123      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e00f      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d092      	beq.n	8005964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a48:	b084      	sub	sp, #16
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	f107 0014 	add.w	r0, r7, #20
 8005a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	b004      	add	sp, #16
 8005a68:	4770      	bx	lr

08005a6a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a7a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aa0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005aa4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ae8:	b084      	sub	sp, #16
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	f107 0014 	add.w	r0, r7, #20
 8005af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	b004      	add	sp, #16
 8005b28:	4770      	bx	lr
	...

08005b2c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b09b      	sub	sp, #108	; 0x6c
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d81f      	bhi.n	8005b9e <USB_ActivateEndpoint+0x72>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <USB_ActivateEndpoint+0x38>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b75 	.word	0x08005b75
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005ba7 	.word	0x08005ba7
 8005b70:	08005b83 	.word	0x08005b83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b80:	e012      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b8e:	e00b      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b9c:	e004      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005ba4:	e000      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>
      break;
 8005ba6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 8149 	bne.w	8005eb0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8084 	beq.w	8005d30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	00da      	lsls	r2, r3, #3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	88db      	ldrh	r3, [r3, #6]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	81fb      	strh	r3, [r7, #14]
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <USB_ActivateEndpoint+0x180>
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	81bb      	strh	r3, [r7, #12]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	89bb      	ldrh	r3, [r7, #12]
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d020      	beq.n	8005cf6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	813b      	strh	r3, [r7, #8]
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	f083 0320 	eor.w	r3, r3, #32
 8005cd2:	813b      	strh	r3, [r7, #8]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	893b      	ldrh	r3, [r7, #8]
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	e27f      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	897b      	ldrh	r3, [r7, #10]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e262      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	4413      	add	r3, r2
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00da      	lsls	r2, r3, #3
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	88db      	ldrh	r3, [r3, #6]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	4413      	add	r3, r2
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	00da      	lsls	r2, r3, #3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d112      	bne.n	8005db6 <USB_ActivateEndpoint+0x28a>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e02f      	b.n	8005e16 <USB_ActivateEndpoint+0x2ea>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d813      	bhi.n	8005de6 <USB_ActivateEndpoint+0x2ba>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <USB_ActivateEndpoint+0x2ac>
 8005dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e017      	b.n	8005e16 <USB_ActivateEndpoint+0x2ea>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	663b      	str	r3, [r7, #96]	; 0x60
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <USB_ActivateEndpoint+0x2d4>
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	83fb      	strh	r3, [r7, #30]
 8005e24:	8bfb      	ldrh	r3, [r7, #30]
 8005e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01b      	beq.n	8005e66 <USB_ActivateEndpoint+0x33a>
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e44:	83bb      	strh	r3, [r7, #28]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8bbb      	ldrh	r3, [r7, #28]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	837b      	strh	r3, [r7, #26]
 8005e7e:	8b7b      	ldrh	r3, [r7, #26]
 8005e80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e84:	837b      	strh	r3, [r7, #26]
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e8c:	837b      	strh	r3, [r7, #26]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8b7b      	ldrh	r3, [r7, #26]
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]
 8005eae:	e1a2      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005efc:	4413      	add	r3, r2
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00da      	lsls	r2, r3, #3
 8005f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	891b      	ldrh	r3, [r3, #8]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	653b      	str	r3, [r7, #80]	; 0x50
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	4413      	add	r3, r2
 8005f32:	653b      	str	r3, [r7, #80]	; 0x50
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00da      	lsls	r2, r3, #3
 8005f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	895b      	ldrh	r3, [r3, #10]
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8091 	bne.w	8006080 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <USB_ActivateEndpoint+0x482>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01b      	beq.n	8005ffe <USB_ActivateEndpoint+0x4d2>
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006016:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006018:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800601c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800601e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006024:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	867b      	strh	r3, [r7, #50]	; 0x32
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e0ba      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01d      	beq.n	80060d8 <USB_ActivateEndpoint+0x5ac>
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01d      	beq.n	8006130 <USB_ActivateEndpoint+0x604>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d024      	beq.n	8006182 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006156:	f083 0320 	eor.w	r3, r3, #32
 800615a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
 8006180:	e01d      	b.n	80061be <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80061f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	376c      	adds	r7, #108	; 0x6c
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006208:	b480      	push	{r7}
 800620a:	b08d      	sub	sp, #52	; 0x34
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 808e 	bne.w	8006338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d044      	beq.n	80062ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	81bb      	strh	r3, [r7, #12]
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <USB_DeactivateEndpoint+0x6c>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628a:	813b      	strh	r3, [r7, #8]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	893b      	ldrh	r3, [r7, #8]
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e192      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	827b      	strh	r3, [r7, #18]
 80062bc:	8a7b      	ldrh	r3, [r7, #18]
 80062be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01b      	beq.n	80062fe <USB_DeactivateEndpoint+0xf6>
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062dc:	823b      	strh	r3, [r7, #16]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	8a3b      	ldrh	r3, [r7, #16]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006314:	81fb      	strh	r3, [r7, #14]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]
 8006336:	e14d      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 80a5 	bne.w	800648c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	843b      	strh	r3, [r7, #32]
 8006350:	8c3b      	ldrh	r3, [r7, #32]
 8006352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <USB_DeactivateEndpoint+0x18a>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	83fb      	strh	r3, [r7, #30]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	83bb      	strh	r3, [r7, #28]
 80063a0:	8bbb      	ldrh	r3, [r7, #28]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01b      	beq.n	80063e2 <USB_DeactivateEndpoint+0x1da>
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c0:	837b      	strh	r3, [r7, #26]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8b7b      	ldrh	r3, [r7, #26]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	833b      	strh	r3, [r7, #24]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8b3b      	ldrh	r3, [r7, #24]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006430:	82fb      	strh	r3, [r7, #22]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8afb      	ldrh	r3, [r7, #22]
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	82bb      	strh	r3, [r7, #20]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8abb      	ldrh	r3, [r7, #20]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e0a3      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800649a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <USB_DeactivateEndpoint+0x2d4>
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <USB_DeactivateEndpoint+0x324>
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	853b      	strh	r3, [r7, #40]	; 0x28
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3734      	adds	r7, #52	; 0x34
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b0c4      	sub	sp, #272	; 0x110
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	6018      	str	r0, [r3, #0]
 80065ec:	463b      	mov	r3, r7
 80065ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	f040 8566 	bne.w	80070c8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065fc:	463b      	mov	r3, r7
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	d905      	bls.n	8006618 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006616:	e004      	b.n	8006622 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d12c      	bne.n	8006686 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6959      	ldr	r1, [r3, #20]
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	88da      	ldrh	r2, [r3, #6]
 8006638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663c:	b29b      	uxth	r3, r3
 800663e:	1d38      	adds	r0, r7, #4
 8006640:	6800      	ldr	r0, [r0, #0]
 8006642:	f001 fa58 	bl	8007af6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	4413      	add	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800666e:	f107 0310 	add.w	r3, r7, #16
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006678:	b29a      	uxth	r2, r3
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f000 bcec 	b.w	800705e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	78db      	ldrb	r3, [r3, #3]
 800668c:	2b02      	cmp	r3, #2
 800668e:	f040 8356 	bne.w	8006d3e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	f240 82fa 	bls.w	8006c98 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	1ad2      	subs	r2, r2, r3
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006704:	1d3b      	adds	r3, r7, #4
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 815e 	beq.w	80069dc <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d164      	bne.n	80067fa <USB_EPStartXfer+0x218>
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	4413      	add	r3, r2
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	4413      	add	r3, r2
 8006754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800675e:	2b00      	cmp	r3, #0
 8006760:	d112      	bne.n	8006788 <USB_EPStartXfer+0x1a6>
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676c:	b29a      	uxth	r2, r3
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e054      	b.n	8006832 <USB_EPStartXfer+0x250>
 8006788:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d817      	bhi.n	80067c0 <USB_EPStartXfer+0x1de>
 8006790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800679a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <USB_EPStartXfer+0x1ce>
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067aa:	3301      	adds	r3, #1
 80067ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e038      	b.n	8006832 <USB_EPStartXfer+0x250>
 80067c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0x1fe>
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e01b      	b.n	8006832 <USB_EPStartXfer+0x250>
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d116      	bne.n	8006832 <USB_EPStartXfer+0x250>
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	4413      	add	r3, r2
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	00da      	lsls	r2, r3, #3
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	4413      	add	r3, r2
 8006822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
 8006828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682c:	b29a      	uxth	r2, r3
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	895b      	ldrh	r3, [r3, #10]
 8006838:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6959      	ldr	r1, [r3, #20]
 8006842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006846:	b29b      	uxth	r3, r3
 8006848:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800684c:	1d38      	adds	r0, r7, #4
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	f001 f951 	bl	8007af6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685e:	441a      	add	r2, r3
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d90e      	bls.n	8006894 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006876:	463b      	mov	r3, r7
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	621a      	str	r2, [r3, #32]
 8006892:	e008      	b.n	80068a6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d164      	bne.n	800697a <USB_EPStartXfer+0x398>
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00da      	lsls	r2, r3, #3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d112      	bne.n	8006908 <USB_EPStartXfer+0x326>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006900:	b29a      	uxth	r2, r3
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e057      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690c:	2b3e      	cmp	r3, #62	; 0x3e
 800690e:	d817      	bhi.n	8006940 <USB_EPStartXfer+0x35e>
 8006910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800691a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <USB_EPStartXfer+0x34e>
 8006926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800692a:	3301      	adds	r3, #1
 800692c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006930:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29a      	uxth	r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e03b      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006940:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800694a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USB_EPStartXfer+0x37e>
 8006956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800695a:	3b01      	subs	r3, #1
 800695c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e01e      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	4413      	add	r3, r2
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	891b      	ldrh	r3, [r3, #8]
 80069be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6959      	ldr	r1, [r3, #20]
 80069c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069d2:	1d38      	adds	r0, r7, #4
 80069d4:	6800      	ldr	r0, [r0, #0]
 80069d6:	f001 f88e 	bl	8007af6 <USB_WritePMA>
 80069da:	e340      	b.n	800705e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d164      	bne.n	8006ab0 <USB_EPStartXfer+0x4ce>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fa:	4413      	add	r3, r2
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00da      	lsls	r2, r3, #3
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d112      	bne.n	8006a3e <USB_EPStartXfer+0x45c>
 8006a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e057      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a42:	2b3e      	cmp	r3, #62	; 0x3e
 8006a44:	d817      	bhi.n	8006a76 <USB_EPStartXfer+0x494>
 8006a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <USB_EPStartXfer+0x484>
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e03b      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <USB_EPStartXfer+0x4b4>
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a90:	3b01      	subs	r3, #1
 8006a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e01e      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d119      	bne.n	8006aee <USB_EPStartXfer+0x50c>
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ace:	4413      	add	r3, r2
 8006ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	891b      	ldrh	r3, [r3, #8]
 8006af4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6959      	ldr	r1, [r3, #20]
 8006afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b08:	1d38      	adds	r0, r7, #4
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	f000 fff3 	bl	8007af6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b1a:	441a      	add	r2, r3
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b22:	463b      	mov	r3, r7
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d90e      	bls.n	8006b50 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a1a      	ldr	r2, [r3, #32]
 8006b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	621a      	str	r2, [r3, #32]
 8006b4e:	e008      	b.n	8006b62 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	647b      	str	r3, [r7, #68]	; 0x44
 8006b68:	463b      	mov	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d164      	bne.n	8006c3c <USB_EPStartXfer+0x65a>
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b86:	4413      	add	r3, r2
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	00da      	lsls	r2, r3, #3
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d112      	bne.n	8006bca <USB_EPStartXfer+0x5e8>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e054      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bce:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd0:	d817      	bhi.n	8006c02 <USB_EPStartXfer+0x620>
 8006bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <USB_EPStartXfer+0x610>
 8006be8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e038      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <USB_EPStartXfer+0x640>
 8006c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e01b      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d116      	bne.n	8006c74 <USB_EPStartXfer+0x692>
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	4413      	add	r3, r2
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	00da      	lsls	r2, r3, #3
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	4413      	add	r3, r2
 8006c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	895b      	ldrh	r3, [r3, #10]
 8006c7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6959      	ldr	r1, [r3, #20]
 8006c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c8e:	1d38      	adds	r0, r7, #4
 8006c90:	6800      	ldr	r0, [r0, #0]
 8006c92:	f000 ff30 	bl	8007af6 <USB_WritePMA>
 8006c96:	e1e2      	b.n	800705e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	663b      	str	r3, [r7, #96]	; 0x60
 8006cec:	1d3b      	adds	r3, r7, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cfa:	4413      	add	r3, r2
 8006cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8006cfe:	463b      	mov	r3, r7
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6959      	ldr	r1, [r3, #20]
 8006d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006d34:	1d38      	adds	r0, r7, #4
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f000 fedd 	bl	8007af6 <USB_WritePMA>
 8006d3c:	e18f      	b.n	800705e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 808f 	beq.w	8006e78 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d60:	463b      	mov	r3, r7
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d164      	bne.n	8006e34 <USB_EPStartXfer+0x852>
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7e:	4413      	add	r3, r2
 8006d80:	673b      	str	r3, [r7, #112]	; 0x70
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00da      	lsls	r2, r3, #3
 8006d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d112      	bne.n	8006dc2 <USB_EPStartXfer+0x7e0>
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e054      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc8:	d817      	bhi.n	8006dfa <USB_EPStartXfer+0x818>
 8006dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <USB_EPStartXfer+0x808>
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e038      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <USB_EPStartXfer+0x838>
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	3b01      	subs	r3, #1
 8006e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e01b      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d116      	bne.n	8006e6c <USB_EPStartXfer+0x88a>
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4c:	4413      	add	r3, r2
 8006e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e50:	463b      	mov	r3, r7
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e60:	677b      	str	r3, [r7, #116]	; 0x74
 8006e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	895b      	ldrh	r3, [r3, #10]
 8006e72:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006e76:	e097      	b.n	8006fa8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d168      	bne.n	8006f54 <USB_EPStartXfer+0x972>
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e8a:	1d3b      	adds	r3, r7, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	00da      	lsls	r2, r3, #3
 8006ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d112      	bne.n	8006ee2 <USB_EPStartXfer+0x900>
 8006ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e05d      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006ee2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee8:	d817      	bhi.n	8006f1a <USB_EPStartXfer+0x938>
 8006eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <USB_EPStartXfer+0x928>
 8006f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f04:	3301      	adds	r3, #1
 8006f06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e041      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USB_EPStartXfer+0x958>
 8006f30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e024      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f54:	463b      	mov	r3, r7
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d11f      	bne.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f76:	4413      	add	r3, r2
 8006f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00da      	lsls	r2, r3, #3
 8006f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	891b      	ldrh	r3, [r3, #8]
 8006fa4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6959      	ldr	r1, [r3, #20]
 8006fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006fb8:	1d38      	adds	r0, r7, #4
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	f000 fd9b 	bl	8007af6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d122      	bne.n	8007010 <USB_EPStartXfer+0xa2e>
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
 800700e:	e026      	b.n	800705e <USB_EPStartXfer+0xa7c>
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d121      	bne.n	800705e <USB_EPStartXfer+0xa7c>
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	463b      	mov	r3, r7
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007034:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800704a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f107 020e 	add.w	r2, r7, #14
 8007074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707c:	8013      	strh	r3, [r2, #0]
 800707e:	f107 030e 	add.w	r3, r7, #14
 8007082:	f107 020e 	add.w	r2, r7, #14
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	f082 0210 	eor.w	r2, r2, #16
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	f107 030e 	add.w	r3, r7, #14
 8007092:	f107 020e 	add.w	r2, r7, #14
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	f082 0220 	eor.w	r2, r2, #32
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	f107 030e 	add.w	r3, r7, #14
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]
 80070c6:	e3b5      	b.n	8007834 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	7b1b      	ldrb	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 8090 	bne.w	80071f4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	463b      	mov	r3, r7
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90e      	bls.n	8007102 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	619a      	str	r2, [r3, #24]
 8007100:	e008      	b.n	8007114 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007124:	b29b      	uxth	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800712c:	4413      	add	r3, r2
 800712e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	00da      	lsls	r2, r3, #3
 800713a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800713e:	4413      	add	r3, r2
 8007140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800714c:	2b00      	cmp	r3, #0
 800714e:	d116      	bne.n	800717e <USB_EPStartXfer+0xb9c>
 8007150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e32c      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 800717e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007182:	2b3e      	cmp	r3, #62	; 0x3e
 8007184:	d818      	bhi.n	80071b8 <USB_EPStartXfer+0xbd6>
 8007186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <USB_EPStartXfer+0xbc4>
 800719c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071a0:	3301      	adds	r3, #1
 80071a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	e30f      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 80071b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <USB_EPStartXfer+0xbf6>
 80071ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071dc:	b29b      	uxth	r3, r3
 80071de:	029b      	lsls	r3, r3, #10
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e2f1      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	78db      	ldrb	r3, [r3, #3]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	f040 818f 	bne.w	800751e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d175      	bne.n	80072f6 <USB_EPStartXfer+0xd14>
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007234:	4413      	add	r3, r2
 8007236:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800723e:	463b      	mov	r3, r7
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <USB_EPStartXfer+0xc94>
 8007248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e065      	b.n	8007342 <USB_EPStartXfer+0xd60>
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b3e      	cmp	r3, #62	; 0x3e
 800727e:	d81a      	bhi.n	80072b6 <USB_EPStartXfer+0xcd4>
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800728c:	463b      	mov	r3, r7
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <USB_EPStartXfer+0xcc2>
 800729a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e045      	b.n	8007342 <USB_EPStartXfer+0xd60>
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <USB_EPStartXfer+0xcf8>
 80072d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072d4:	3b01      	subs	r3, #1
 80072d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072de:	b29b      	uxth	r3, r3
 80072e0:	029b      	lsls	r3, r3, #10
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e025      	b.n	8007342 <USB_EPStartXfer+0xd60>
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d120      	bne.n	8007342 <USB_EPStartXfer+0xd60>
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007318:	4413      	add	r3, r2
 800731a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731e:	463b      	mov	r3, r7
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00da      	lsls	r2, r3, #3
 8007326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732a:	4413      	add	r3, r2
 800732c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d175      	bne.n	8007440 <USB_EPStartXfer+0xe5e>
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007364:	b29b      	uxth	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800736c:	4413      	add	r3, r2
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00da      	lsls	r2, r3, #3
 800737a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737e:	4413      	add	r3, r2
 8007380:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d116      	bne.n	80073c0 <USB_EPStartXfer+0xdde>
 8007392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e061      	b.n	8007484 <USB_EPStartXfer+0xea2>
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b3e      	cmp	r3, #62	; 0x3e
 80073c8:	d81a      	bhi.n	8007400 <USB_EPStartXfer+0xe1e>
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <USB_EPStartXfer+0xe0c>
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e041      	b.n	8007484 <USB_EPStartXfer+0xea2>
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800740c:	463b      	mov	r3, r7
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <USB_EPStartXfer+0xe42>
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741e:	3b01      	subs	r3, #1
 8007420:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	b29b      	uxth	r3, r3
 800742a:	029b      	lsls	r3, r3, #10
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e021      	b.n	8007484 <USB_EPStartXfer+0xea2>
 8007440:	463b      	mov	r3, r7
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11c      	bne.n	8007484 <USB_EPStartXfer+0xea2>
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800745a:	4413      	add	r3, r2
 800745c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	00da      	lsls	r2, r3, #3
 8007468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800746c:	4413      	add	r3, r2
 800746e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007476:	463b      	mov	r3, r7
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007482:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 81a4 	beq.w	80077d8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	463b      	mov	r3, r7
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <USB_EPStartXfer+0xeda>
 80074b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10d      	bne.n	80074d8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 8187 	bne.w	80077d8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 8180 	bne.w	80077d8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	441a      	add	r2, r3
 8007504:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
 800751c:	e15c      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	78db      	ldrb	r3, [r3, #3]
 8007524:	2b01      	cmp	r3, #1
 8007526:	f040 8155 	bne.w	80077d4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	463b      	mov	r3, r7
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d90e      	bls.n	8007558 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007544:	463b      	mov	r3, r7
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	463b      	mov	r3, r7
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	619a      	str	r2, [r3, #24]
 8007556:	e008      	b.n	800756a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007558:	463b      	mov	r3, r7
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007562:	463b      	mov	r3, r7
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d16f      	bne.n	8007654 <USB_EPStartXfer+0x1072>
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007584:	b29b      	uxth	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800758c:	4413      	add	r3, r2
 800758e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	00da      	lsls	r2, r3, #3
 800759a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800759e:	4413      	add	r3, r2
 80075a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d116      	bne.n	80075de <USB_EPStartXfer+0xffc>
 80075b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e05f      	b.n	800769e <USB_EPStartXfer+0x10bc>
 80075de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075e2:	2b3e      	cmp	r3, #62	; 0x3e
 80075e4:	d818      	bhi.n	8007618 <USB_EPStartXfer+0x1036>
 80075e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <USB_EPStartXfer+0x1024>
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	3301      	adds	r3, #1
 8007602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760a:	b29b      	uxth	r3, r3
 800760c:	029b      	lsls	r3, r3, #10
 800760e:	b29a      	uxth	r2, r3
 8007610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e042      	b.n	800769e <USB_EPStartXfer+0x10bc>
 8007618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <USB_EPStartXfer+0x1056>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	3b01      	subs	r3, #1
 8007634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	b29b      	uxth	r3, r3
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	b29b      	uxth	r3, r3
 8007642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	e024      	b.n	800769e <USB_EPStartXfer+0x10bc>
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d11f      	bne.n	800769e <USB_EPStartXfer+0x10bc>
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	00da      	lsls	r2, r3, #3
 8007684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007688:	4413      	add	r3, r2
 800768a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800768e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007692:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a6:	463b      	mov	r3, r7
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d16f      	bne.n	8007790 <USB_EPStartXfer+0x11ae>
 80076b0:	1d3b      	adds	r3, r7, #4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076c8:	4413      	add	r3, r2
 80076ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ce:	463b      	mov	r3, r7
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00da      	lsls	r2, r3, #3
 80076d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076da:	4413      	add	r3, r2
 80076dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <USB_EPStartXfer+0x1138>
 80076ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007710:	b29a      	uxth	r2, r3
 8007712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e05e      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 800771a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800771e:	2b3e      	cmp	r3, #62	; 0x3e
 8007720:	d818      	bhi.n	8007754 <USB_EPStartXfer+0x1172>
 8007722:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800772c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <USB_EPStartXfer+0x1160>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	3301      	adds	r3, #1
 800773e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29a      	uxth	r2, r3
 800774c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	e041      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 8007754:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800775e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <USB_EPStartXfer+0x1192>
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776e:	3b01      	subs	r3, #1
 8007770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007778:	b29b      	uxth	r3, r3
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	b29b      	uxth	r3, r3
 800777e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	e023      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 8007790:	463b      	mov	r3, r7
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d11e      	bne.n	80077d8 <USB_EPStartXfer+0x11f6>
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077aa:	4413      	add	r3, r2
 80077ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077bc:	4413      	add	r3, r2
 80077be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e001      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e02e      	b.n	8007836 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077d8:	1d3b      	adds	r3, r7, #4
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80077f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007802:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800780a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007868:	81bb      	strh	r3, [r7, #12]
 800786a:	89bb      	ldrh	r3, [r7, #12]
 800786c:	f083 0310 	eor.w	r3, r3, #16
 8007870:	81bb      	strh	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	89bb      	ldrh	r3, [r7, #12]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
 8007892:	e01f      	b.n	80078d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	81fb      	strh	r3, [r7, #14]
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078b2:	81fb      	strh	r3, [r7, #14]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	7b1b      	ldrb	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f040 809d 	bne.w	8007a30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d04c      	beq.n	8007998 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	823b      	strh	r3, [r7, #16]
 800790c:	8a3b      	ldrh	r3, [r7, #16]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01b      	beq.n	800794e <USB_EPClearStall+0x6c>
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	89fb      	ldrh	r3, [r7, #14]
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	78db      	ldrb	r3, [r3, #3]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d06c      	beq.n	8007a30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796c:	81bb      	strh	r3, [r7, #12]
 800796e:	89bb      	ldrh	r3, [r7, #12]
 8007970:	f083 0320 	eor.w	r3, r3, #32
 8007974:	81bb      	strh	r3, [r7, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]
 8007996:	e04b      	b.n	8007a30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	82fb      	strh	r3, [r7, #22]
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <USB_EPClearStall+0x106>
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	82bb      	strh	r3, [r7, #20]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	8abb      	ldrh	r3, [r7, #20]
 80079d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	827b      	strh	r3, [r7, #18]
 8007a00:	8a7b      	ldrh	r3, [r7, #18]
 8007a02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a06:	827b      	strh	r3, [r7, #18]
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a0e:	827b      	strh	r3, [r7, #18]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	8a7b      	ldrh	r3, [r7, #18]
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b08d      	sub	sp, #52	; 0x34
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	4611      	mov	r1, r2
 8007b02:	461a      	mov	r2, r3
 8007b04:	460b      	mov	r3, r1
 8007b06:	80fb      	strh	r3, [r7, #6]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b0c:	88bb      	ldrh	r3, [r7, #4]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2c:	e01b      	b.n	8007b66 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	3302      	adds	r3, #2
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	3b01      	subs	r3, #1
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e0      	bne.n	8007b2e <USB_WritePMA+0x38>
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3734      	adds	r7, #52	; 0x34
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b08b      	sub	sp, #44	; 0x2c
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4611      	mov	r1, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	460b      	mov	r3, r1
 8007b88:	80fb      	strh	r3, [r7, #6]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b8e:	88bb      	ldrh	r3, [r7, #4]
 8007b90:	085b      	lsrs	r3, r3, #1
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
 8007bae:	e018      	b.n	8007be2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	3b01      	subs	r3, #1
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e3      	bne.n	8007bb0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007be8:	88bb      	ldrh	r3, [r7, #4]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	701a      	strb	r2, [r3, #0]
  }
}
 8007c04:	bf00      	nop
 8007c06:	372c      	adds	r7, #44	; 0x2c
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c20:	f002 f968 	bl	8009ef4 <malloc>
 8007c24:	4603      	mov	r3, r0
 8007c26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d105      	bne.n	8007c3a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c36:	2302      	movs	r3, #2
 8007c38:	e066      	b.n	8007d08 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7c1b      	ldrb	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d119      	bne.n	8007c7e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4e:	2202      	movs	r2, #2
 8007c50:	2181      	movs	r1, #129	; 0x81
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ff20 	bl	8009a98 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c62:	2202      	movs	r2, #2
 8007c64:	2101      	movs	r1, #1
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 ff16 	bl	8009a98 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2210      	movs	r2, #16
 8007c78:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c7c:	e016      	b.n	8007cac <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c7e:	2340      	movs	r3, #64	; 0x40
 8007c80:	2202      	movs	r2, #2
 8007c82:	2181      	movs	r1, #129	; 0x81
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 ff07 	bl	8009a98 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	2202      	movs	r2, #2
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fefe 	bl	8009a98 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cac:	2308      	movs	r3, #8
 8007cae:	2203      	movs	r2, #3
 8007cb0:	2182      	movs	r1, #130	; 0x82
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fef0 	bl	8009a98 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7c1b      	ldrb	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cec:	2101      	movs	r1, #1
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f002 f84e 	bl	8009d90 <USBD_LL_PrepareReceive>
 8007cf4:	e007      	b.n	8007d06 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 f845 	bl	8009d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d1c:	2181      	movs	r1, #129	; 0x81
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fef8 	bl	8009b14 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fef1 	bl	8009b14 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d3a:	2182      	movs	r1, #130	; 0x82
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fee9 	bl	8009b14 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 f8c9 	bl	8009f04 <free>
    pdev->pClassData = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d94:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d03a      	beq.n	8007e24 <USBD_CDC_Setup+0xa0>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	f040 8097 	bne.w	8007ee2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	88db      	ldrh	r3, [r3, #6]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d029      	beq.n	8007e10 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da11      	bge.n	8007dea <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007dd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	88d2      	ldrh	r2, [r2, #6]
 8007dd8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dda:	6939      	ldr	r1, [r7, #16]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	88db      	ldrh	r3, [r3, #6]
 8007de0:	461a      	mov	r2, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fa5d 	bl	80092a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007de8:	e082      	b.n	8007ef0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785a      	ldrb	r2, [r3, #1]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	88db      	ldrh	r3, [r3, #6]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e00:	6939      	ldr	r1, [r7, #16]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	88db      	ldrh	r3, [r3, #6]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 fa76 	bl	80092fa <USBD_CtlPrepareRx>
      break;
 8007e0e:	e06f      	b.n	8007ef0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	7850      	ldrb	r0, [r2, #1]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	4798      	blx	r3
      break;
 8007e22:	e065      	b.n	8007ef0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b0b      	cmp	r3, #11
 8007e2a:	d84f      	bhi.n	8007ecc <USBD_CDC_Setup+0x148>
 8007e2c:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <USBD_CDC_Setup+0xb0>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007e65 	.word	0x08007e65
 8007e38:	08007edb 	.word	0x08007edb
 8007e3c:	08007ecd 	.word	0x08007ecd
 8007e40:	08007ecd 	.word	0x08007ecd
 8007e44:	08007ecd 	.word	0x08007ecd
 8007e48:	08007ecd 	.word	0x08007ecd
 8007e4c:	08007ecd 	.word	0x08007ecd
 8007e50:	08007ecd 	.word	0x08007ecd
 8007e54:	08007ecd 	.word	0x08007ecd
 8007e58:	08007ecd 	.word	0x08007ecd
 8007e5c:	08007e8d 	.word	0x08007e8d
 8007e60:	08007eb5 	.word	0x08007eb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d107      	bne.n	8007e7e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e6e:	f107 030c 	add.w	r3, r7, #12
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa13 	bl	80092a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e7c:	e030      	b.n	8007ee0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 f99d 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	75fb      	strb	r3, [r7, #23]
          break;
 8007e8a:	e029      	b.n	8007ee0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d107      	bne.n	8007ea6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e96:	f107 030f 	add.w	r3, r7, #15
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f9ff 	bl	80092a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ea4:	e01c      	b.n	8007ee0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f989 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb2:	e015      	b.n	8007ee0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d00f      	beq.n	8007ede <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 f97d 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eca:	e008      	b.n	8007ede <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f976 	bl	80091c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed8:	e002      	b.n	8007ee0 <USBD_CDC_Setup+0x15c>
          break;
 8007eda:	bf00      	nop
 8007edc:	e008      	b.n	8007ef0 <USBD_CDC_Setup+0x16c>
          break;
 8007ede:	bf00      	nop
      }
      break;
 8007ee0:	e006      	b.n	8007ef0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 f96b 	bl	80091c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007eea:	2303      	movs	r3, #3
 8007eec:	75fb      	strb	r3, [r7, #23]
      break;
 8007eee:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e04f      	b.n	8007fbe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3318      	adds	r3, #24
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d029      	beq.n	8007f90 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	440b      	add	r3, r1
 8007f4a:	3318      	adds	r3, #24
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	78f9      	ldrb	r1, [r7, #3]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	460b      	mov	r3, r1
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4403      	add	r3, r0
 8007f5c:	3338      	adds	r3, #56	; 0x38
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f64:	fb03 f301 	mul.w	r3, r3, r1
 8007f68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3318      	adds	r3, #24
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f82:	78f9      	ldrb	r1, [r7, #3]
 8007f84:	2300      	movs	r3, #0
 8007f86:	2200      	movs	r2, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fec9 	bl	8009d20 <USBD_LL_Transmit>
 8007f8e:	e015      	b.n	8007fbc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e015      	b.n	8008014 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 ff07 	bl	8009e00 <USBD_LL_GetRxDataSize>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800800e:	4611      	mov	r1, r2
 8008010:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d015      	beq.n	8008062 <USBD_CDC_EP0_RxReady+0x46>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800803c:	2bff      	cmp	r3, #255	; 0xff
 800803e:	d010      	beq.n	8008062 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800804e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008056:	b292      	uxth	r2, r2
 8008058:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	22ff      	movs	r2, #255	; 0xff
 800805e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2243      	movs	r2, #67	; 0x43
 8008078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20000094 	.word	0x20000094

0800808c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2243      	movs	r2, #67	; 0x43
 8008098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000050 	.word	0x20000050

080080ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2243      	movs	r2, #67	; 0x43
 80080b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200000d8 	.word	0x200000d8

080080cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220a      	movs	r2, #10
 80080d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	2000000c 	.word	0x2000000c

080080ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e004      	b.n	800810a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008116:	b480      	push	{r7}
 8008118:	b087      	sub	sp, #28
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008128:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008158:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	e016      	b.n	80081bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7c1b      	ldrb	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800819c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a0:	2101      	movs	r1, #1
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 fdf4 	bl	8009d90 <USBD_LL_PrepareReceive>
 80081a8:	e007      	b.n	80081ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	2101      	movs	r1, #1
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fdeb 	bl	8009d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	e01f      	b.n	800821c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	79fa      	ldrb	r2, [r7, #7]
 800820e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f001 fbad 	bl	8009970 <USBD_LL_Init>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

  return ret;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	e016      	b.n	800826a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	f107 020e 	add.w	r2, r7, #14
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fbda 	bl	8009a34 <USBD_LL_Start>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	4611      	mov	r1, r2
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
  }

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 ff16 	bl	800914c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800833c:	f003 031f 	and.w	r3, r3, #31
 8008340:	2b01      	cmp	r3, #1
 8008342:	d00e      	beq.n	8008362 <USBD_LL_SetupStage+0x5a>
 8008344:	2b01      	cmp	r3, #1
 8008346:	d302      	bcc.n	800834e <USBD_LL_SetupStage+0x46>
 8008348:	2b02      	cmp	r3, #2
 800834a:	d014      	beq.n	8008376 <USBD_LL_SetupStage+0x6e>
 800834c:	e01d      	b.n	800838a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9d6 	bl	8008708 <USBD_StdDevReq>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
      break;
 8008360:	e020      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa3a 	bl	80087e4 <USBD_StdItfReq>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
      break;
 8008374:	e016      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa76 	bl	8008870 <USBD_StdEPReq>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
      break;
 8008388:	e00c      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008394:	b2db      	uxtb	r3, r3
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fbf1 	bl	8009b80 <USBD_LL_StallEP>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	bf00      	nop
  }

  return ret;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	460b      	mov	r3, r1
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d137      	bne.n	8008432 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d14a      	bne.n	800846a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d913      	bls.n	8008408 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bf28      	it	cs
 80083fa:	4613      	movcs	r3, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 ff97 	bl	8009334 <USBD_CtlContinueRx>
 8008406:	e030      	b.n	800846a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800841a:	2b03      	cmp	r3, #3
 800841c:	d105      	bne.n	800842a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 ff93 	bl	8009356 <USBD_CtlSendStatus>
 8008430:	e01b      	b.n	800846a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d013      	beq.n	8008466 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008444:	2b03      	cmp	r3, #3
 8008446:	d10e      	bne.n	8008466 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	7afa      	ldrb	r2, [r7, #11]
 8008452:	4611      	mov	r1, r2
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	4798      	blx	r3
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	e002      	b.n	800846c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	e000      	b.n	800846c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	460b      	mov	r3, r1
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d16a      	bne.n	800855e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3314      	adds	r3, #20
 800848c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008494:	2b02      	cmp	r3, #2
 8008496:	d155      	bne.n	8008544 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d914      	bls.n	80084ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	1ad2      	subs	r2, r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 ff0c 	bl	80092d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c0:	2300      	movs	r3, #0
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 fc62 	bl	8009d90 <USBD_LL_PrepareReceive>
 80084cc:	e03a      	b.n	8008544 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d11c      	bne.n	8008514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d316      	bcc.n	8008514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d20f      	bcs.n	8008514 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084f4:	2200      	movs	r2, #0
 80084f6:	2100      	movs	r1, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 feed 	bl	80092d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	2100      	movs	r1, #0
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 fc3f 	bl	8009d90 <USBD_LL_PrepareReceive>
 8008512:	e017      	b.n	8008544 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00a      	beq.n	8008536 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008526:	2b03      	cmp	r3, #3
 8008528:	d105      	bne.n	8008536 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 fb21 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 ff1c 	bl	800937c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800854a:	2b01      	cmp	r3, #1
 800854c:	d123      	bne.n	8008596 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff fe9b 	bl	800828a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800855c:	e01b      	b.n	8008596 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008570:	2b03      	cmp	r3, #3
 8008572:	d10e      	bne.n	8008592 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	7afa      	ldrb	r2, [r7, #11]
 800857e:	4611      	mov	r1, r2
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	4798      	blx	r3
 8008584:	4603      	mov	r3, r0
 8008586:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	e002      	b.n	8008598 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008592:	2303      	movs	r3, #3
 8008594:	e000      	b.n	8008598 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6852      	ldr	r2, [r2, #4]
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	4611      	mov	r1, r2
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fa54 	bl	8009a98 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2240      	movs	r2, #64	; 0x40
 80085fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	2200      	movs	r2, #0
 8008604:	2180      	movs	r1, #128	; 0x80
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fa46 	bl	8009a98 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2240      	movs	r2, #64	; 0x40
 8008616:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2204      	movs	r2, #4
 800865a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b04      	cmp	r3, #4
 800867c:	d105      	bne.n	800868a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d10b      	bne.n	80086c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	3301      	adds	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086ea:	8a3b      	ldrh	r3, [r7, #16]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	b21a      	sxth	r2, r3
 80086f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086fa:	89fb      	ldrh	r3, [r7, #14]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800871e:	2b20      	cmp	r3, #32
 8008720:	d004      	beq.n	800872c <USBD_StdDevReq+0x24>
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d002      	beq.n	800872c <USBD_StdDevReq+0x24>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <USBD_StdDevReq+0x38>
 800872a:	e050      	b.n	80087ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
    break;
 800873e:	e04b      	b.n	80087d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	2b09      	cmp	r3, #9
 8008746:	d83c      	bhi.n	80087c2 <USBD_StdDevReq+0xba>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <USBD_StdDevReq+0x48>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080087b9 	.word	0x080087b9
 8008758:	080087c3 	.word	0x080087c3
 800875c:	080087af 	.word	0x080087af
 8008760:	080087c3 	.word	0x080087c3
 8008764:	08008783 	.word	0x08008783
 8008768:	08008779 	.word	0x08008779
 800876c:	080087c3 	.word	0x080087c3
 8008770:	0800879b 	.word	0x0800879b
 8008774:	0800878d 	.word	0x0800878d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f9d0 	bl	8008b20 <USBD_GetDescriptor>
      break;
 8008780:	e024      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb5f 	bl	8008e48 <USBD_SetAddress>
      break;
 800878a:	e01f      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb9c 	bl	8008ecc <USBD_SetConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
      break;
 8008798:	e018      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc39 	bl	8009014 <USBD_GetConfig>
      break;
 80087a2:	e013      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc68 	bl	800907c <USBD_GetStatus>
      break;
 80087ac:	e00e      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc96 	bl	80090e2 <USBD_SetFeature>
      break;
 80087b6:	e009      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fca5 	bl	800910a <USBD_ClrFeature>
      break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fcfb 	bl	80091c0 <USBD_CtlError>
      break;
 80087ca:	bf00      	nop
    }
    break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcf5 	bl	80091c0 <USBD_CtlError>
    break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d003      	beq.n	8008806 <USBD_StdItfReq+0x22>
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d001      	beq.n	8008806 <USBD_StdItfReq+0x22>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d12a      	bne.n	800885c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	3b01      	subs	r3, #1
 800880e:	2b02      	cmp	r3, #2
 8008810:	d81d      	bhi.n	800884e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	d813      	bhi.n	8008844 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	88db      	ldrh	r3, [r3, #6]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d110      	bne.n	8008858 <USBD_StdItfReq+0x74>
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10d      	bne.n	8008858 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fd8a 	bl	8009356 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008842:	e009      	b.n	8008858 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fcba 	bl	80091c0 <USBD_CtlError>
      break;
 800884c:	e004      	b.n	8008858 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fcb5 	bl	80091c0 <USBD_CtlError>
      break;
 8008856:	e000      	b.n	800885a <USBD_StdItfReq+0x76>
      break;
 8008858:	bf00      	nop
    }
    break;
 800885a:	e004      	b.n	8008866 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fcae 	bl	80091c0 <USBD_CtlError>
    break;
 8008864:	bf00      	nop
  }

  return ret;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	889b      	ldrh	r3, [r3, #4]
 8008882:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800888c:	2b20      	cmp	r3, #32
 800888e:	d004      	beq.n	800889a <USBD_StdEPReq+0x2a>
 8008890:	2b40      	cmp	r3, #64	; 0x40
 8008892:	d002      	beq.n	800889a <USBD_StdEPReq+0x2a>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <USBD_StdEPReq+0x3e>
 8008898:	e137      	b.n	8008b0a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
    break;
 80088ac:	e132      	b.n	8008b14 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d03e      	beq.n	8008934 <USBD_StdEPReq+0xc4>
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d002      	beq.n	80088c0 <USBD_StdEPReq+0x50>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d079      	beq.n	80089b2 <USBD_StdEPReq+0x142>
 80088be:	e11e      	b.n	8008afe <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d002      	beq.n	80088d0 <USBD_StdEPReq+0x60>
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d015      	beq.n	80088fa <USBD_StdEPReq+0x8a>
 80088ce:	e02b      	b.n	8008928 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <USBD_StdEPReq+0x80>
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d009      	beq.n	80088f0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f94d 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f949 	bl	8009b80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80088ee:	e020      	b.n	8008932 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc64 	bl	80091c0 <USBD_CtlError>
        break;
 80088f8:	e01b      	b.n	8008932 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10e      	bne.n	8008920 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_StdEPReq+0xb0>
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b80      	cmp	r3, #128	; 0x80
 800890c:	d008      	beq.n	8008920 <USBD_StdEPReq+0xb0>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88db      	ldrh	r3, [r3, #6]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f930 	bl	8009b80 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fd18 	bl	8009356 <USBD_CtlSendStatus>

        break;
 8008926:	e004      	b.n	8008932 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc48 	bl	80091c0 <USBD_CtlError>
        break;
 8008930:	bf00      	nop
      }
      break;
 8008932:	e0e9      	b.n	8008b08 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893a:	2b02      	cmp	r3, #2
 800893c:	d002      	beq.n	8008944 <USBD_StdEPReq+0xd4>
 800893e:	2b03      	cmp	r3, #3
 8008940:	d015      	beq.n	800896e <USBD_StdEPReq+0xfe>
 8008942:	e02f      	b.n	80089a4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <USBD_StdEPReq+0xf4>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d009      	beq.n	8008964 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f913 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800895a:	2180      	movs	r1, #128	; 0x80
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f90f 	bl	8009b80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008962:	e025      	b.n	80089b0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fc2a 	bl	80091c0 <USBD_CtlError>
        break;
 800896c:	e020      	b.n	80089b0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11b      	bne.n	80089ae <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 f931 	bl	8009bec <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fce3 	bl	8009356 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089a2:	e004      	b.n	80089ae <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fc0a 	bl	80091c0 <USBD_CtlError>
        break;
 80089ac:	e000      	b.n	80089b0 <USBD_StdEPReq+0x140>
        break;
 80089ae:	bf00      	nop
      }
      break;
 80089b0:	e0aa      	b.n	8008b08 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d002      	beq.n	80089c2 <USBD_StdEPReq+0x152>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d032      	beq.n	8008a26 <USBD_StdEPReq+0x1b6>
 80089c0:	e097      	b.n	8008af2 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <USBD_StdEPReq+0x168>
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b80      	cmp	r3, #128	; 0x80
 80089cc:	d004      	beq.n	80089d8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fbf5 	bl	80091c0 <USBD_CtlError>
          break;
 80089d6:	e091      	b.n	8008afc <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da0b      	bge.n	80089f8 <USBD_StdEPReq+0x188>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	3310      	adds	r3, #16
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	3304      	adds	r3, #4
 80089f6:	e00b      	b.n	8008a10 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3304      	adds	r3, #4
 8008a10:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc3f 	bl	80092a2 <USBD_CtlSendData>
        break;
 8008a24:	e06a      	b.n	8008afc <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da11      	bge.n	8008a52 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3324      	adds	r3, #36	; 0x24
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d117      	bne.n	8008a78 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fbb8 	bl	80091c0 <USBD_CtlError>
            break;
 8008a50:	e054      	b.n	8008afc <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fba5 	bl	80091c0 <USBD_CtlError>
            break;
 8008a76:	e041      	b.n	8008afc <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0b      	bge.n	8008a98 <USBD_StdEPReq+0x228>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	3310      	adds	r3, #16
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	3304      	adds	r3, #4
 8008a96:	e00b      	b.n	8008ab0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	3304      	adds	r3, #4
 8008ab0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <USBD_StdEPReq+0x24e>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d103      	bne.n	8008ac6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e00e      	b.n	8008ae4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f8c4 	bl	8009c58 <USBD_LL_IsStallEP>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e002      	b.n	8008ae4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fbd9 	bl	80092a2 <USBD_CtlSendData>
          break;
 8008af0:	e004      	b.n	8008afc <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fb63 	bl	80091c0 <USBD_CtlError>
        break;
 8008afa:	bf00      	nop
      }
      break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fb5d 	bl	80091c0 <USBD_CtlError>
      break;
 8008b06:	bf00      	nop
    }
    break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb57 	bl	80091c0 <USBD_CtlError>
    break;
 8008b12:	bf00      	nop
  }

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b0e      	cmp	r3, #14
 8008b42:	f200 8152 	bhi.w	8008dea <USBD_GetDescriptor+0x2ca>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_GetDescriptor+0x2c>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008bbd 	.word	0x08008bbd
 8008b50:	08008bd5 	.word	0x08008bd5
 8008b54:	08008c15 	.word	0x08008c15
 8008b58:	08008deb 	.word	0x08008deb
 8008b5c:	08008deb 	.word	0x08008deb
 8008b60:	08008d8b 	.word	0x08008d8b
 8008b64:	08008db7 	.word	0x08008db7
 8008b68:	08008deb 	.word	0x08008deb
 8008b6c:	08008deb 	.word	0x08008deb
 8008b70:	08008deb 	.word	0x08008deb
 8008b74:	08008deb 	.word	0x08008deb
 8008b78:	08008deb 	.word	0x08008deb
 8008b7c:	08008deb 	.word	0x08008deb
 8008b80:	08008deb 	.word	0x08008deb
 8008b84:	08008b89 	.word	0x08008b89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008baa:	e126      	b.n	8008dfa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb06 	bl	80091c0 <USBD_CtlError>
      err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
    break;
 8008bba:	e11e      	b.n	8008dfa <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7c12      	ldrb	r2, [r2, #16]
 8008bc8:	f107 0108 	add.w	r1, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
    break;
 8008bd2:	e112      	b.n	8008dfa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	7c1b      	ldrb	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10d      	bne.n	8008bf8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	f107 0208 	add.w	r2, r7, #8
 8008be8:	4610      	mov	r0, r2
 8008bea:	4798      	blx	r3
 8008bec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008bf6:	e100      	b.n	8008dfa <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	f107 0208 	add.w	r2, r7, #8
 8008c04:	4610      	mov	r0, r2
 8008c06:	4798      	blx	r3
 8008c08:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	2202      	movs	r2, #2
 8008c10:	701a      	strb	r2, [r3, #0]
    break;
 8008c12:	e0f2      	b.n	8008dfa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	885b      	ldrh	r3, [r3, #2]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	f200 80ac 	bhi.w	8008d78 <USBD_GetDescriptor+0x258>
 8008c20:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_GetDescriptor+0x108>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c41 	.word	0x08008c41
 8008c2c:	08008c75 	.word	0x08008c75
 8008c30:	08008ca9 	.word	0x08008ca9
 8008c34:	08008cdd 	.word	0x08008cdd
 8008c38:	08008d11 	.word	0x08008d11
 8008c3c:	08008d45 	.word	0x08008d45
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	7c12      	ldrb	r2, [r2, #16]
 8008c58:	f107 0108 	add.w	r1, r7, #8
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4798      	blx	r3
 8008c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c62:	e091      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 faaa 	bl	80091c0 <USBD_CtlError>
        err++;
 8008c6c:	7afb      	ldrb	r3, [r7, #11]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	72fb      	strb	r3, [r7, #11]
      break;
 8008c72:	e089      	b.n	8008d88 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	7c12      	ldrb	r2, [r2, #16]
 8008c8c:	f107 0108 	add.w	r1, r7, #8
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
 8008c94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c96:	e077      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa90 	bl	80091c0 <USBD_CtlError>
        err++;
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ca6:	e06f      	b.n	8008d88 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7c12      	ldrb	r2, [r2, #16]
 8008cc0:	f107 0108 	add.w	r1, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cca:	e05d      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa76 	bl	80091c0 <USBD_CtlError>
        err++;
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cda:	e055      	b.n	8008d88 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cfe:	e043      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa5c 	bl	80091c0 <USBD_CtlError>
        err++;
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d0e:	e03b      	b.n	8008d88 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	7c12      	ldrb	r2, [r2, #16]
 8008d28:	f107 0108 	add.w	r1, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d32:	e029      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa42 	bl	80091c0 <USBD_CtlError>
        err++;
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	72fb      	strb	r3, [r7, #11]
      break;
 8008d42:	e021      	b.n	8008d88 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d66:	e00f      	b.n	8008d88 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa28 	bl	80091c0 <USBD_CtlError>
        err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
      break;
 8008d76:	e007      	b.n	8008d88 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa20 	bl	80091c0 <USBD_CtlError>
      err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d86:	bf00      	nop
    }
    break;
 8008d88:	e037      	b.n	8008dfa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7c1b      	ldrb	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d109      	bne.n	8008da6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9a:	f107 0208 	add.w	r2, r7, #8
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4798      	blx	r3
 8008da2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008da4:	e029      	b.n	8008dfa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fa09 	bl	80091c0 <USBD_CtlError>
      err++;
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	3301      	adds	r3, #1
 8008db2:	72fb      	strb	r3, [r7, #11]
    break;
 8008db4:	e021      	b.n	8008dfa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7c1b      	ldrb	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10d      	bne.n	8008dda <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	4610      	mov	r0, r2
 8008dcc:	4798      	blx	r3
 8008dce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008dd8:	e00f      	b.n	8008dfa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9ef 	bl	80091c0 <USBD_CtlError>
      err++;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	3301      	adds	r3, #1
 8008de6:	72fb      	strb	r3, [r7, #11]
    break;
 8008de8:	e007      	b.n	8008dfa <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9e7 	bl	80091c0 <USBD_CtlError>
    err++;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	3301      	adds	r3, #1
 8008df6:	72fb      	strb	r3, [r7, #11]
    break;
 8008df8:	bf00      	nop
  }

  if (err != 0U)
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d11e      	bne.n	8008e3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	88db      	ldrh	r3, [r3, #6]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d016      	beq.n	8008e36 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008e08:	893b      	ldrh	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	88da      	ldrh	r2, [r3, #6]
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	bf28      	it	cs
 8008e18:	4613      	movcs	r3, r2
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e1e:	893b      	ldrh	r3, [r7, #8]
 8008e20:	461a      	mov	r2, r3
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa3c 	bl	80092a2 <USBD_CtlSendData>
 8008e2a:	e009      	b.n	8008e40 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f9c6 	bl	80091c0 <USBD_CtlError>
 8008e34:	e004      	b.n	8008e40 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa8d 	bl	8009356 <USBD_CtlSendStatus>
 8008e3c:	e000      	b.n	8008e40 <USBD_GetDescriptor+0x320>
    return;
 8008e3e:	bf00      	nop
    }
  }
}
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop

08008e48 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	889b      	ldrh	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d130      	bne.n	8008ebc <USBD_SetAddress+0x74>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d12c      	bne.n	8008ebc <USBD_SetAddress+0x74>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	885b      	ldrh	r3, [r3, #2]
 8008e66:	2b7f      	cmp	r3, #127	; 0x7f
 8008e68:	d828      	bhi.n	8008ebc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d104      	bne.n	8008e8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f99c 	bl	80091c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e88:	e01c      	b.n	8008ec4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 ff0c 	bl	8009cb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa5a 	bl	8009356 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb0:	e008      	b.n	8008ec4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	e003      	b.n	8008ec4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f97e 	bl	80091c0 <USBD_CtlError>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	4b4b      	ldr	r3, [pc, #300]	; (8009010 <USBD_SetConfig+0x144>)
 8008ee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ee4:	4b4a      	ldr	r3, [pc, #296]	; (8009010 <USBD_SetConfig+0x144>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d905      	bls.n	8008ef8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f966 	bl	80091c0 <USBD_CtlError>
    return USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e087      	b.n	8009008 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d002      	beq.n	8008f08 <USBD_SetConfig+0x3c>
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d025      	beq.n	8008f52 <USBD_SetConfig+0x86>
 8008f06:	e071      	b.n	8008fec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f08:	4b41      	ldr	r3, [pc, #260]	; (8009010 <USBD_SetConfig+0x144>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01c      	beq.n	8008f4a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f10:	4b3f      	ldr	r3, [pc, #252]	; (8009010 <USBD_SetConfig+0x144>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f1a:	4b3d      	ldr	r3, [pc, #244]	; (8009010 <USBD_SetConfig+0x144>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff f9bd 	bl	80082a0 <USBD_SetClassConfig>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f944 	bl	80091c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f38:	e065      	b.n	8009006 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa0b 	bl	8009356 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2203      	movs	r2, #3
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f48:	e05d      	b.n	8009006 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa03 	bl	8009356 <USBD_CtlSendStatus>
    break;
 8008f50:	e059      	b.n	8009006 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f52:	4b2f      	ldr	r3, [pc, #188]	; (8009010 <USBD_SetConfig+0x144>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d112      	bne.n	8008f80 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <USBD_SetConfig+0x144>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f6c:	4b28      	ldr	r3, [pc, #160]	; (8009010 <USBD_SetConfig+0x144>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f9b0 	bl	80082d8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f9ec 	bl	8009356 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f7e:	e042      	b.n	8009006 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f80:	4b23      	ldr	r3, [pc, #140]	; (8009010 <USBD_SetConfig+0x144>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d02a      	beq.n	8008fe4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff f99e 	bl	80082d8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	; (8009010 <USBD_SetConfig+0x144>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <USBD_SetConfig+0x144>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff f977 	bl	80082a0 <USBD_SetClassConfig>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00f      	beq.n	8008fdc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f8fe 	bl	80091c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff f983 	bl	80082d8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fda:	e014      	b.n	8009006 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9ba 	bl	8009356 <USBD_CtlSendStatus>
    break;
 8008fe2:	e010      	b.n	8009006 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9b6 	bl	8009356 <USBD_CtlSendStatus>
    break;
 8008fea:	e00c      	b.n	8009006 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8e6 	bl	80091c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <USBD_SetConfig+0x144>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff f96c 	bl	80082d8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009000:	2303      	movs	r3, #3
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	bf00      	nop
  }

  return ret;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000214 	.word	0x20000214

08009014 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d004      	beq.n	8009030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f8c9 	bl	80091c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800902e:	e021      	b.n	8009074 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009036:	2b01      	cmp	r3, #1
 8009038:	db17      	blt.n	800906a <USBD_GetConfig+0x56>
 800903a:	2b02      	cmp	r3, #2
 800903c:	dd02      	ble.n	8009044 <USBD_GetConfig+0x30>
 800903e:	2b03      	cmp	r3, #3
 8009040:	d00b      	beq.n	800905a <USBD_GetConfig+0x46>
 8009042:	e012      	b.n	800906a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3308      	adds	r3, #8
 800904e:	2201      	movs	r2, #1
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f925 	bl	80092a2 <USBD_CtlSendData>
      break;
 8009058:	e00c      	b.n	8009074 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3304      	adds	r3, #4
 800905e:	2201      	movs	r2, #1
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f91d 	bl	80092a2 <USBD_CtlSendData>
      break;
 8009068:	e004      	b.n	8009074 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f8a7 	bl	80091c0 <USBD_CtlError>
      break;
 8009072:	bf00      	nop
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	3b01      	subs	r3, #1
 800908e:	2b02      	cmp	r3, #2
 8009090:	d81e      	bhi.n	80090d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88db      	ldrh	r3, [r3, #6]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d004      	beq.n	80090a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f88f 	bl	80091c0 <USBD_CtlError>
      break;
 80090a2:	e01a      	b.n	80090da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f043 0202 	orr.w	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	330c      	adds	r3, #12
 80090c4:	2202      	movs	r2, #2
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8ea 	bl	80092a2 <USBD_CtlSendData>
    break;
 80090ce:	e004      	b.n	80090da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f874 	bl	80091c0 <USBD_CtlError>
    break;
 80090d8:	bf00      	nop
  }
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f92a 	bl	8009356 <USBD_CtlSendStatus>
  }
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911a:	3b01      	subs	r3, #1
 800911c:	2b02      	cmp	r3, #2
 800911e:	d80b      	bhi.n	8009138 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10c      	bne.n	8009142 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f910 	bl	8009356 <USBD_CtlSendStatus>
      }
      break;
 8009136:	e004      	b.n	8009142 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f840 	bl	80091c0 <USBD_CtlError>
      break;
 8009140:	e000      	b.n	8009144 <USBD_ClrFeature+0x3a>
      break;
 8009142:	bf00      	nop
  }
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	781a      	ldrb	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff faa8 	bl	80086cc <SWAPBYTE>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7ff fa9b 	bl	80086cc <SWAPBYTE>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff fa8e 	bl	80086cc <SWAPBYTE>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	80da      	strh	r2, [r3, #6]
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ca:	2180      	movs	r1, #128	; 0x80
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fcd7 	bl	8009b80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fcd3 	bl	8009b80 <USBD_LL_StallEP>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b086      	sub	sp, #24
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d036      	beq.n	8009266 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091fc:	6938      	ldr	r0, [r7, #16]
 80091fe:	f000 f836 	bl	800926e <USBD_GetLen>
 8009202:	4603      	mov	r3, r0
 8009204:	3301      	adds	r3, #1
 8009206:	b29b      	uxth	r3, r3
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
  idx++;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	3301      	adds	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4413      	add	r3, r2
 8009228:	2203      	movs	r2, #3
 800922a:	701a      	strb	r2, [r3, #0]
  idx++;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	3301      	adds	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009232:	e013      	b.n	800925c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4413      	add	r3, r2
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3301      	adds	r3, #1
 8009244:	613b      	str	r3, [r7, #16]
    idx++;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	3301      	adds	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
    idx++;
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	3301      	adds	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e7      	bne.n	8009234 <USBD_GetString+0x52>
 8009264:	e000      	b.n	8009268 <USBD_GetString+0x86>
    return;
 8009266:	bf00      	nop
  }
}
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800927e:	e005      	b.n	800928c <USBD_GetLen+0x1e>
  {
    len++;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	3301      	adds	r3, #1
 8009284:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3301      	adds	r3, #1
 800928a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f5      	bne.n	8009280 <USBD_GetLen+0x12>
  }

  return len;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2202      	movs	r2, #2
 80092b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	2100      	movs	r1, #0
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fd29 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 fd18 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2203      	movs	r2, #3
 800930a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fd33 	bl	8009d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	2100      	movs	r1, #0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fd22 	bl	8009d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009366:	2300      	movs	r3, #0
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fcd7 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2205      	movs	r2, #5
 8009388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	2100      	movs	r1, #0
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fcfc 	bl	8009d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093a8:	2200      	movs	r2, #0
 80093aa:	4912      	ldr	r1, [pc, #72]	; (80093f4 <MX_USB_DEVICE_Init+0x50>)
 80093ac:	4812      	ldr	r0, [pc, #72]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe ff09 	bl	80081c4 <USBD_Init>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093b8:	f7f7 fb97 	bl	8000aea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093bc:	490f      	ldr	r1, [pc, #60]	; (80093fc <MX_USB_DEVICE_Init+0x58>)
 80093be:	480e      	ldr	r0, [pc, #56]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093c0:	f7fe ff30 	bl	8008224 <USBD_RegisterClass>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ca:	f7f7 fb8e 	bl	8000aea <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ce:	490c      	ldr	r1, [pc, #48]	; (8009400 <MX_USB_DEVICE_Init+0x5c>)
 80093d0:	4809      	ldr	r0, [pc, #36]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093d2:	f7fe fe8b 	bl	80080ec <USBD_CDC_RegisterInterface>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093dc:	f7f7 fb85 	bl	8000aea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e0:	4805      	ldr	r0, [pc, #20]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093e2:	f7fe ff46 	bl	8008272 <USBD_Start>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093ec:	f7f7 fb7d 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000130 	.word	0x20000130
 80093f8:	200003b8 	.word	0x200003b8
 80093fc:	20000018 	.word	0x20000018
 8009400:	2000011c 	.word	0x2000011c

08009404 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009408:	2200      	movs	r2, #0
 800940a:	4905      	ldr	r1, [pc, #20]	; (8009420 <CDC_Init_FS+0x1c>)
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <CDC_Init_FS+0x20>)
 800940e:	f7fe fe82 	bl	8008116 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009412:	4905      	ldr	r1, [pc, #20]	; (8009428 <CDC_Init_FS+0x24>)
 8009414:	4803      	ldr	r0, [pc, #12]	; (8009424 <CDC_Init_FS+0x20>)
 8009416:	f7fe fe97 	bl	8008148 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800941a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800941c:	4618      	mov	r0, r3
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000e88 	.word	0x20000e88
 8009424:	200003b8 	.word	0x200003b8
 8009428:	20000688 	.word	0x20000688

0800942c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	4613      	mov	r3, r2
 800944a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b23      	cmp	r3, #35	; 0x23
 8009450:	d84a      	bhi.n	80094e8 <CDC_Control_FS+0xac>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <CDC_Control_FS+0x1c>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094e9 	.word	0x080094e9
 8009460:	080094e9 	.word	0x080094e9
 8009464:	080094e9 	.word	0x080094e9
 8009468:	080094e9 	.word	0x080094e9
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094e9 	.word	0x080094e9
 8009474:	080094e9 	.word	0x080094e9
 8009478:	080094e9 	.word	0x080094e9
 800947c:	080094e9 	.word	0x080094e9
 8009480:	080094e9 	.word	0x080094e9
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094e9 	.word	0x080094e9
 800948c:	080094e9 	.word	0x080094e9
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094e9 	.word	0x080094e9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094e9 	.word	0x080094e9
 80094b8:	080094e9 	.word	0x080094e9
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094e9 	.word	0x080094e9
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	080094e9 	.word	0x080094e9
 80094e0:	080094e9 	.word	0x080094e9
 80094e4:	080094e9 	.word	0x080094e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e8:	bf00      	nop
  }

  return (USBD_OK);
 80094ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4805      	ldr	r0, [pc, #20]	; (800951c <CDC_Receive_FS+0x24>)
 8009506:	f7fe fe1f 	bl	8008148 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800950a:	4804      	ldr	r0, [pc, #16]	; (800951c <CDC_Receive_FS+0x24>)
 800950c:	f7fe fe30 	bl	8008170 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	200003b8 	.word	0x200003b8

08009520 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2212      	movs	r2, #18
 8009554:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009556:	4b03      	ldr	r3, [pc, #12]	; (8009564 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	20000150 	.word	0x20000150

08009568 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2204      	movs	r2, #4
 8009578:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800957a:	4b03      	ldr	r3, [pc, #12]	; (8009588 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20000170 	.word	0x20000170

0800958c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d105      	bne.n	80095aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	4907      	ldr	r1, [pc, #28]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095a2:	4808      	ldr	r0, [pc, #32]	; (80095c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095a4:	f7ff fe1d 	bl	80091e2 <USBD_GetString>
 80095a8:	e004      	b.n	80095b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4904      	ldr	r1, [pc, #16]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ae:	4805      	ldr	r0, [pc, #20]	; (80095c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095b0:	f7ff fe17 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20001688 	.word	0x20001688
 80095c4:	0800a0c0 	.word	0x0800a0c0

080095c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095d8:	4804      	ldr	r0, [pc, #16]	; (80095ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095da:	f7ff fe02 	bl	80091e2 <USBD_GetString>
  return USBD_StrDesc;
 80095de:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20001688 	.word	0x20001688
 80095ec:	0800a0d0 	.word	0x0800a0d0

080095f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	221a      	movs	r2, #26
 8009600:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009602:	f000 f855 	bl	80096b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009606:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000174 	.word	0x20000174

08009614 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d105      	bne.n	8009632 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	4907      	ldr	r1, [pc, #28]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
 800962a:	4808      	ldr	r0, [pc, #32]	; (800964c <USBD_FS_ConfigStrDescriptor+0x38>)
 800962c:	f7ff fdd9 	bl	80091e2 <USBD_GetString>
 8009630:	e004      	b.n	800963c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	4904      	ldr	r1, [pc, #16]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009636:	4805      	ldr	r0, [pc, #20]	; (800964c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009638:	f7ff fdd3 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20001688 	.word	0x20001688
 800964c:	0800a0e4 	.word	0x0800a0e4

08009650 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	6039      	str	r1, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4907      	ldr	r1, [pc, #28]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009666:	4808      	ldr	r0, [pc, #32]	; (8009688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009668:	f7ff fdbb 	bl	80091e2 <USBD_GetString>
 800966c:	e004      	b.n	8009678 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4904      	ldr	r1, [pc, #16]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009672:	4805      	ldr	r0, [pc, #20]	; (8009688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009674:	f7ff fdb5 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20001688 	.word	0x20001688
 8009688:	0800a0f0 	.word	0x0800a0f0

0800968c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	220c      	movs	r2, #12
 800969c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20000164 	.word	0x20000164

080096b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <Get_SerialNum+0x44>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096bc:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <Get_SerialNum+0x48>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096c2:	4b0e      	ldr	r3, [pc, #56]	; (80096fc <Get_SerialNum+0x4c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096d6:	2208      	movs	r2, #8
 80096d8:	4909      	ldr	r1, [pc, #36]	; (8009700 <Get_SerialNum+0x50>)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f814 	bl	8009708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e0:	2204      	movs	r2, #4
 80096e2:	4908      	ldr	r1, [pc, #32]	; (8009704 <Get_SerialNum+0x54>)
 80096e4:	68b8      	ldr	r0, [r7, #8]
 80096e6:	f000 f80f 	bl	8009708 <IntToUnicode>
  }
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	1fff7590 	.word	0x1fff7590
 80096f8:	1fff7594 	.word	0x1fff7594
 80096fc:	1fff7598 	.word	0x1fff7598
 8009700:	20000176 	.word	0x20000176
 8009704:	20000186 	.word	0x20000186

08009708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
 800971e:	e027      	b.n	8009770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	0f1b      	lsrs	r3, r3, #28
 8009724:	2b09      	cmp	r3, #9
 8009726:	d80b      	bhi.n	8009740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0f1b      	lsrs	r3, r3, #28
 800972c:	b2da      	uxtb	r2, r3
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	4619      	mov	r1, r3
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	440b      	add	r3, r1
 8009738:	3230      	adds	r2, #48	; 0x30
 800973a:	b2d2      	uxtb	r2, r2
 800973c:	701a      	strb	r2, [r3, #0]
 800973e:	e00a      	b.n	8009756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0f1b      	lsrs	r3, r3, #28
 8009744:	b2da      	uxtb	r2, r3
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4619      	mov	r1, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	440b      	add	r3, r1
 8009750:	3237      	adds	r2, #55	; 0x37
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	3301      	adds	r3, #1
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	3301      	adds	r3, #1
 800976e:	75fb      	strb	r3, [r7, #23]
 8009770:	7dfa      	ldrb	r2, [r7, #23]
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	429a      	cmp	r2, r3
 8009776:	d3d3      	bcc.n	8009720 <IntToUnicode+0x18>
  }
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	605a      	str	r2, [r3, #4]
 8009796:	609a      	str	r2, [r3, #8]
 8009798:	60da      	str	r2, [r3, #12]
 800979a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <HAL_PCD_MspInit+0x90>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d131      	bne.n	800980a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097a6:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097aa:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097ac:	f043 0301 	orr.w	r3, r3, #1
 80097b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097b2:	4b19      	ldr	r3, [pc, #100]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097c4:	2302      	movs	r3, #2
 80097c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097cc:	2303      	movs	r3, #3
 80097ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80097d0:	230a      	movs	r3, #10
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d4:	f107 0314 	add.w	r3, r7, #20
 80097d8:	4619      	mov	r1, r3
 80097da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097de:	f7f7 fd73 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80097e2:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e6:	4a0c      	ldr	r2, [pc, #48]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097ec:	6593      	str	r3, [r2, #88]	; 0x58
 80097ee:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <HAL_PCD_MspInit+0x94>)
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	2043      	movs	r0, #67	; 0x43
 8009800:	f7f7 fd2b 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009804:	2043      	movs	r0, #67	; 0x43
 8009806:	f7f7 fd44 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800980a:	bf00      	nop
 800980c:	3728      	adds	r7, #40	; 0x28
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	40006800 	.word	0x40006800
 8009818:	40021000 	.word	0x40021000

0800981c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe fd68 	bl	8008308 <USBD_LL_SetupStage>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	440b      	add	r3, r1
 8009860:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	4619      	mov	r1, r3
 800986a:	f7fe fda0 	bl	80083ae <USBD_LL_DataOutStage>
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	440b      	add	r3, r1
 8009896:	333c      	adds	r3, #60	; 0x3c
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	4619      	mov	r1, r3
 800989e:	f7fe fde9 	bl	8008474 <USBD_LL_DataInStage>
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe feed 	bl	8008698 <USBD_LL_SOF>
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098ce:	2301      	movs	r3, #1
 80098d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d001      	beq.n	80098de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098da:	f7f7 f906 	bl	8000aea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098e4:	7bfa      	ldrb	r2, [r7, #15]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fe9a 	bl	8008622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fe53 	bl	80085a0 <USBD_LL_Reset>
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fe95 	bl	8008642 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009920:	4b04      	ldr	r3, [pc, #16]	; (8009934 <HAL_PCD_SuspendCallback+0x30>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	4a03      	ldr	r2, [pc, #12]	; (8009934 <HAL_PCD_SuspendCallback+0x30>)
 8009926:	f043 0306 	orr.w	r3, r3, #6
 800992a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed00 	.word	0xe000ed00

08009938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009948:	4b08      	ldr	r3, [pc, #32]	; (800996c <HAL_PCD_ResumeCallback+0x34>)
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	4a07      	ldr	r2, [pc, #28]	; (800996c <HAL_PCD_ResumeCallback+0x34>)
 800994e:	f023 0306 	bic.w	r3, r3, #6
 8009952:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009954:	f000 fa9e 	bl	8009e94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fe84 	bl	800866c <USBD_LL_Resume>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	e000ed00 	.word	0xe000ed00

08009970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009978:	f7f9 fa5c 	bl	8002e34 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800997c:	4a2b      	ldr	r2, [pc, #172]	; (8009a2c <USBD_LL_Init+0xbc>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <USBD_LL_Init+0xbc>)
 8009988:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800998c:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <USBD_LL_Init+0xbc>)
 800998e:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <USBD_LL_Init+0xc0>)
 8009990:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009992:	4b26      	ldr	r3, [pc, #152]	; (8009a2c <USBD_LL_Init+0xbc>)
 8009994:	2208      	movs	r2, #8
 8009996:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009998:	4b24      	ldr	r3, [pc, #144]	; (8009a2c <USBD_LL_Init+0xbc>)
 800999a:	2202      	movs	r2, #2
 800999c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800999e:	4b23      	ldr	r3, [pc, #140]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099a0:	2202      	movs	r2, #2
 80099a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80099a4:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80099b0:	4b1e      	ldr	r3, [pc, #120]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80099b6:	4b1d      	ldr	r3, [pc, #116]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80099bc:	481b      	ldr	r0, [pc, #108]	; (8009a2c <USBD_LL_Init+0xbc>)
 80099be:	f7f7 fe2f 	bl	8001620 <HAL_PCD_Init>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80099c8:	f7f7 f88f 	bl	8000aea <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099d2:	2318      	movs	r3, #24
 80099d4:	2200      	movs	r2, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	f7f9 f94a 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099e2:	2358      	movs	r3, #88	; 0x58
 80099e4:	2200      	movs	r2, #0
 80099e6:	2180      	movs	r1, #128	; 0x80
 80099e8:	f7f9 f942 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099f2:	23c0      	movs	r3, #192	; 0xc0
 80099f4:	2200      	movs	r2, #0
 80099f6:	2181      	movs	r1, #129	; 0x81
 80099f8:	f7f9 f93a 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009a06:	2200      	movs	r2, #0
 8009a08:	2101      	movs	r1, #1
 8009a0a:	f7f9 f931 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2182      	movs	r1, #130	; 0x82
 8009a1c:	f7f9 f928 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20001888 	.word	0x20001888
 8009a30:	40006800 	.word	0x40006800

08009a34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f7 fefa 	bl	8001844 <HAL_PCD_Start>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d816      	bhi.n	8009a88 <USBD_LL_Start+0x54>
 8009a5a:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <USBD_LL_Start+0x2c>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009a71 	.word	0x08009a71
 8009a64:	08009a77 	.word	0x08009a77
 8009a68:	08009a7d 	.word	0x08009a7d
 8009a6c:	08009a83 	.word	0x08009a83
    case HAL_OK :
      usb_status = USBD_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
    break;
 8009a74:	e00b      	b.n	8009a8e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7a:	e008      	b.n	8009a8e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a80:	e005      	b.n	8009a8e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	73fb      	strb	r3, [r7, #15]
    break;
 8009a86:	e002      	b.n	8009a8e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8c:	bf00      	nop
  }
  return usb_status;
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	70fb      	strb	r3, [r7, #3]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70bb      	strb	r3, [r7, #2]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ac0:	78bb      	ldrb	r3, [r7, #2]
 8009ac2:	883a      	ldrh	r2, [r7, #0]
 8009ac4:	78f9      	ldrb	r1, [r7, #3]
 8009ac6:	f7f8 f852 	bl	8001b6e <HAL_PCD_EP_Open>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d817      	bhi.n	8009b04 <USBD_LL_OpenEP+0x6c>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <USBD_LL_OpenEP+0x44>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009aed 	.word	0x08009aed
 8009ae0:	08009af3 	.word	0x08009af3
 8009ae4:	08009af9 	.word	0x08009af9
 8009ae8:	08009aff 	.word	0x08009aff
    case HAL_OK :
      usb_status = USBD_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
    break;
 8009af0:	e00b      	b.n	8009b0a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009af2:	2303      	movs	r3, #3
 8009af4:	73fb      	strb	r3, [r7, #15]
    break;
 8009af6:	e008      	b.n	8009b0a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009af8:	2301      	movs	r3, #1
 8009afa:	73fb      	strb	r3, [r7, #15]
    break;
 8009afc:	e005      	b.n	8009b0a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	73fb      	strb	r3, [r7, #15]
    break;
 8009b02:	e002      	b.n	8009b0a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	bf00      	nop
  }
  return usb_status;
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b2e:	78fa      	ldrb	r2, [r7, #3]
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f8 f881 	bl	8001c3a <HAL_PCD_EP_Close>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d816      	bhi.n	8009b70 <USBD_LL_CloseEP+0x5c>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <USBD_LL_CloseEP+0x34>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b59 	.word	0x08009b59
 8009b4c:	08009b5f 	.word	0x08009b5f
 8009b50:	08009b65 	.word	0x08009b65
 8009b54:	08009b6b 	.word	0x08009b6b
    case HAL_OK :
      usb_status = USBD_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5c:	e00b      	b.n	8009b76 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	73fb      	strb	r3, [r7, #15]
    break;
 8009b62:	e008      	b.n	8009b76 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b64:	2301      	movs	r3, #1
 8009b66:	73fb      	strb	r3, [r7, #15]
    break;
 8009b68:	e005      	b.n	8009b76 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b6e:	e002      	b.n	8009b76 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	73fb      	strb	r3, [r7, #15]
    break;
 8009b74:	bf00      	nop
  }
  return usb_status;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f8 f92b 	bl	8001dfa <HAL_PCD_EP_SetStall>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d816      	bhi.n	8009bdc <USBD_LL_StallEP+0x5c>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <USBD_LL_StallEP+0x34>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bc5 	.word	0x08009bc5
 8009bb8:	08009bcb 	.word	0x08009bcb
 8009bbc:	08009bd1 	.word	0x08009bd1
 8009bc0:	08009bd7 	.word	0x08009bd7
    case HAL_OK :
      usb_status = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc8:	e00b      	b.n	8009be2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bce:	e008      	b.n	8009be2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e005      	b.n	8009be2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bda:	e002      	b.n	8009be2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	bf00      	nop
  }
  return usb_status;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f8 f955 	bl	8001eba <HAL_PCD_EP_ClrStall>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d816      	bhi.n	8009c48 <USBD_LL_ClearStallEP+0x5c>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <USBD_LL_ClearStallEP+0x34>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c37 	.word	0x08009c37
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c43 	.word	0x08009c43
    case HAL_OK :
      usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e00b      	b.n	8009c4e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3a:	e008      	b.n	8009c4e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c40:	e005      	b.n	8009c4e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c42:	2303      	movs	r3, #3
 8009c44:	73fb      	strb	r3, [r7, #15]
    break;
 8009c46:	e002      	b.n	8009c4e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4c:	bf00      	nop
  }
  return usb_status;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da0c      	bge.n	8009c8e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	440b      	add	r3, r1
 8009c88:	3302      	adds	r3, #2
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	e00b      	b.n	8009ca6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c94:	68f9      	ldr	r1, [r7, #12]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	440b      	add	r3, r1
 8009ca0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ca4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f7 ff26 	bl	8001b24 <HAL_PCD_SetAddress>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d816      	bhi.n	8009d10 <USBD_LL_SetUSBAddress+0x5c>
 8009ce2:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <USBD_LL_SetUSBAddress+0x34>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009cf9 	.word	0x08009cf9
 8009cec:	08009cff 	.word	0x08009cff
 8009cf0:	08009d05 	.word	0x08009d05
 8009cf4:	08009d0b 	.word	0x08009d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfc:	e00b      	b.n	8009d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	73fb      	strb	r3, [r7, #15]
    break;
 8009d02:	e008      	b.n	8009d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d04:	2301      	movs	r3, #1
 8009d06:	73fb      	strb	r3, [r7, #15]
    break;
 8009d08:	e005      	b.n	8009d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0e:	e002      	b.n	8009d16 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	73fb      	strb	r3, [r7, #15]
    break;
 8009d14:	bf00      	nop
  }
  return usb_status;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d3e:	7af9      	ldrb	r1, [r7, #11]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	f7f8 f816 	bl	8001d74 <HAL_PCD_EP_Transmit>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009d4c:	7dbb      	ldrb	r3, [r7, #22]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d816      	bhi.n	8009d80 <USBD_LL_Transmit+0x60>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <USBD_LL_Transmit+0x38>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009d69 	.word	0x08009d69
 8009d5c:	08009d6f 	.word	0x08009d6f
 8009d60:	08009d75 	.word	0x08009d75
 8009d64:	08009d7b 	.word	0x08009d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8009d6c:	e00b      	b.n	8009d86 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	75fb      	strb	r3, [r7, #23]
    break;
 8009d72:	e008      	b.n	8009d86 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d74:	2301      	movs	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
    break;
 8009d78:	e005      	b.n	8009d86 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	75fb      	strb	r3, [r7, #23]
    break;
 8009d7e:	e002      	b.n	8009d86 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	75fb      	strb	r3, [r7, #23]
    break;
 8009d84:	bf00      	nop
  }
  return usb_status;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dae:	7af9      	ldrb	r1, [r7, #11]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f7f7 ff89 	bl	8001cca <HAL_PCD_EP_Receive>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009dbc:	7dbb      	ldrb	r3, [r7, #22]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d816      	bhi.n	8009df0 <USBD_LL_PrepareReceive+0x60>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <USBD_LL_PrepareReceive+0x38>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009dd9 	.word	0x08009dd9
 8009dcc:	08009ddf 	.word	0x08009ddf
 8009dd0:	08009de5 	.word	0x08009de5
 8009dd4:	08009deb 	.word	0x08009deb
    case HAL_OK :
      usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75fb      	strb	r3, [r7, #23]
    break;
 8009ddc:	e00b      	b.n	8009df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dde:	2303      	movs	r3, #3
 8009de0:	75fb      	strb	r3, [r7, #23]
    break;
 8009de2:	e008      	b.n	8009df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009de4:	2301      	movs	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]
    break;
 8009de8:	e005      	b.n	8009df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dea:	2303      	movs	r3, #3
 8009dec:	75fb      	strb	r3, [r7, #23]
    break;
 8009dee:	e002      	b.n	8009df6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	75fb      	strb	r3, [r7, #23]
    break;
 8009df4:	bf00      	nop
  }
  return usb_status;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f7 ff94 	bl	8001d44 <HAL_PCD_EP_GetRxCount>
 8009e1c:	4603      	mov	r3, r0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <HAL_PCDEx_LPM_Callback+0x18>
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d013      	beq.n	8009e66 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009e3e:	e023      	b.n	8009e88 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d007      	beq.n	8009e58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009e48:	f000 f824 	bl	8009e94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e52:	f023 0306 	bic.w	r3, r3, #6
 8009e56:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fc04 	bl	800866c <USBD_LL_Resume>
    break;
 8009e64:	e010      	b.n	8009e88 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fbe8 	bl	8008642 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e80:	f043 0306 	orr.w	r3, r3, #6
 8009e84:	6113      	str	r3, [r2, #16]
    break;
 8009e86:	bf00      	nop
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed00 	.word	0xe000ed00

08009e94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e98:	f7f6 fb9e 	bl	80005d8 <SystemClock_Config>
}
 8009e9c:	bf00      	nop
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <__errno>:
 8009ea0:	4b01      	ldr	r3, [pc, #4]	; (8009ea8 <__errno+0x8>)
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	20000190 	.word	0x20000190

08009eac <__libc_init_array>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0d      	ldr	r6, [pc, #52]	; (8009ee4 <__libc_init_array+0x38>)
 8009eb0:	4c0d      	ldr	r4, [pc, #52]	; (8009ee8 <__libc_init_array+0x3c>)
 8009eb2:	1ba4      	subs	r4, r4, r6
 8009eb4:	10a4      	asrs	r4, r4, #2
 8009eb6:	2500      	movs	r5, #0
 8009eb8:	42a5      	cmp	r5, r4
 8009eba:	d109      	bne.n	8009ed0 <__libc_init_array+0x24>
 8009ebc:	4e0b      	ldr	r6, [pc, #44]	; (8009eec <__libc_init_array+0x40>)
 8009ebe:	4c0c      	ldr	r4, [pc, #48]	; (8009ef0 <__libc_init_array+0x44>)
 8009ec0:	f000 f8ea 	bl	800a098 <_init>
 8009ec4:	1ba4      	subs	r4, r4, r6
 8009ec6:	10a4      	asrs	r4, r4, #2
 8009ec8:	2500      	movs	r5, #0
 8009eca:	42a5      	cmp	r5, r4
 8009ecc:	d105      	bne.n	8009eda <__libc_init_array+0x2e>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ed4:	4798      	blx	r3
 8009ed6:	3501      	adds	r5, #1
 8009ed8:	e7ee      	b.n	8009eb8 <__libc_init_array+0xc>
 8009eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ede:	4798      	blx	r3
 8009ee0:	3501      	adds	r5, #1
 8009ee2:	e7f2      	b.n	8009eca <__libc_init_array+0x1e>
 8009ee4:	0800a150 	.word	0x0800a150
 8009ee8:	0800a150 	.word	0x0800a150
 8009eec:	0800a150 	.word	0x0800a150
 8009ef0:	0800a154 	.word	0x0800a154

08009ef4 <malloc>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <malloc+0xc>)
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f000 b861 	b.w	8009fc0 <_malloc_r>
 8009efe:	bf00      	nop
 8009f00:	20000190 	.word	0x20000190

08009f04 <free>:
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <free+0xc>)
 8009f06:	4601      	mov	r1, r0
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f000 b80b 	b.w	8009f24 <_free_r>
 8009f0e:	bf00      	nop
 8009f10:	20000190 	.word	0x20000190

08009f14 <memset>:
 8009f14:	4402      	add	r2, r0
 8009f16:	4603      	mov	r3, r0
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d100      	bne.n	8009f1e <memset+0xa>
 8009f1c:	4770      	bx	lr
 8009f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f22:	e7f9      	b.n	8009f18 <memset+0x4>

08009f24 <_free_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4605      	mov	r5, r0
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	d045      	beq.n	8009fb8 <_free_r+0x94>
 8009f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f30:	1f0c      	subs	r4, r1, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfb8      	it	lt
 8009f36:	18e4      	addlt	r4, r4, r3
 8009f38:	f000 f8ac 	bl	800a094 <__malloc_lock>
 8009f3c:	4a1f      	ldr	r2, [pc, #124]	; (8009fbc <_free_r+0x98>)
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	4610      	mov	r0, r2
 8009f42:	b933      	cbnz	r3, 8009f52 <_free_r+0x2e>
 8009f44:	6063      	str	r3, [r4, #4]
 8009f46:	6014      	str	r4, [r2, #0]
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4e:	f000 b8a2 	b.w	800a096 <__malloc_unlock>
 8009f52:	42a3      	cmp	r3, r4
 8009f54:	d90c      	bls.n	8009f70 <_free_r+0x4c>
 8009f56:	6821      	ldr	r1, [r4, #0]
 8009f58:	1862      	adds	r2, r4, r1
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	bf04      	itt	eq
 8009f5e:	681a      	ldreq	r2, [r3, #0]
 8009f60:	685b      	ldreq	r3, [r3, #4]
 8009f62:	6063      	str	r3, [r4, #4]
 8009f64:	bf04      	itt	eq
 8009f66:	1852      	addeq	r2, r2, r1
 8009f68:	6022      	streq	r2, [r4, #0]
 8009f6a:	6004      	str	r4, [r0, #0]
 8009f6c:	e7ec      	b.n	8009f48 <_free_r+0x24>
 8009f6e:	4613      	mov	r3, r2
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	b10a      	cbz	r2, 8009f78 <_free_r+0x54>
 8009f74:	42a2      	cmp	r2, r4
 8009f76:	d9fa      	bls.n	8009f6e <_free_r+0x4a>
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	1858      	adds	r0, r3, r1
 8009f7c:	42a0      	cmp	r0, r4
 8009f7e:	d10b      	bne.n	8009f98 <_free_r+0x74>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	4401      	add	r1, r0
 8009f84:	1858      	adds	r0, r3, r1
 8009f86:	4282      	cmp	r2, r0
 8009f88:	6019      	str	r1, [r3, #0]
 8009f8a:	d1dd      	bne.n	8009f48 <_free_r+0x24>
 8009f8c:	6810      	ldr	r0, [r2, #0]
 8009f8e:	6852      	ldr	r2, [r2, #4]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	4401      	add	r1, r0
 8009f94:	6019      	str	r1, [r3, #0]
 8009f96:	e7d7      	b.n	8009f48 <_free_r+0x24>
 8009f98:	d902      	bls.n	8009fa0 <_free_r+0x7c>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	e7d3      	b.n	8009f48 <_free_r+0x24>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	1821      	adds	r1, r4, r0
 8009fa4:	428a      	cmp	r2, r1
 8009fa6:	bf04      	itt	eq
 8009fa8:	6811      	ldreq	r1, [r2, #0]
 8009faa:	6852      	ldreq	r2, [r2, #4]
 8009fac:	6062      	str	r2, [r4, #4]
 8009fae:	bf04      	itt	eq
 8009fb0:	1809      	addeq	r1, r1, r0
 8009fb2:	6021      	streq	r1, [r4, #0]
 8009fb4:	605c      	str	r4, [r3, #4]
 8009fb6:	e7c7      	b.n	8009f48 <_free_r+0x24>
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000218 	.word	0x20000218

08009fc0 <_malloc_r>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	1ccd      	adds	r5, r1, #3
 8009fc4:	f025 0503 	bic.w	r5, r5, #3
 8009fc8:	3508      	adds	r5, #8
 8009fca:	2d0c      	cmp	r5, #12
 8009fcc:	bf38      	it	cc
 8009fce:	250c      	movcc	r5, #12
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	db01      	blt.n	8009fda <_malloc_r+0x1a>
 8009fd6:	42a9      	cmp	r1, r5
 8009fd8:	d903      	bls.n	8009fe2 <_malloc_r+0x22>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	2000      	movs	r0, #0
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	f000 f857 	bl	800a094 <__malloc_lock>
 8009fe6:	4a21      	ldr	r2, [pc, #132]	; (800a06c <_malloc_r+0xac>)
 8009fe8:	6814      	ldr	r4, [r2, #0]
 8009fea:	4621      	mov	r1, r4
 8009fec:	b991      	cbnz	r1, 800a014 <_malloc_r+0x54>
 8009fee:	4c20      	ldr	r4, [pc, #128]	; (800a070 <_malloc_r+0xb0>)
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	b91b      	cbnz	r3, 8009ffc <_malloc_r+0x3c>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f83d 	bl	800a074 <_sbrk_r>
 8009ffa:	6020      	str	r0, [r4, #0]
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f838 	bl	800a074 <_sbrk_r>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d124      	bne.n	800a052 <_malloc_r+0x92>
 800a008:	230c      	movs	r3, #12
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 f842 	bl	800a096 <__malloc_unlock>
 800a012:	e7e4      	b.n	8009fde <_malloc_r+0x1e>
 800a014:	680b      	ldr	r3, [r1, #0]
 800a016:	1b5b      	subs	r3, r3, r5
 800a018:	d418      	bmi.n	800a04c <_malloc_r+0x8c>
 800a01a:	2b0b      	cmp	r3, #11
 800a01c:	d90f      	bls.n	800a03e <_malloc_r+0x7e>
 800a01e:	600b      	str	r3, [r1, #0]
 800a020:	50cd      	str	r5, [r1, r3]
 800a022:	18cc      	adds	r4, r1, r3
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f836 	bl	800a096 <__malloc_unlock>
 800a02a:	f104 000b 	add.w	r0, r4, #11
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	f020 0007 	bic.w	r0, r0, #7
 800a034:	1ac3      	subs	r3, r0, r3
 800a036:	d0d3      	beq.n	8009fe0 <_malloc_r+0x20>
 800a038:	425a      	negs	r2, r3
 800a03a:	50e2      	str	r2, [r4, r3]
 800a03c:	e7d0      	b.n	8009fe0 <_malloc_r+0x20>
 800a03e:	428c      	cmp	r4, r1
 800a040:	684b      	ldr	r3, [r1, #4]
 800a042:	bf16      	itet	ne
 800a044:	6063      	strne	r3, [r4, #4]
 800a046:	6013      	streq	r3, [r2, #0]
 800a048:	460c      	movne	r4, r1
 800a04a:	e7eb      	b.n	800a024 <_malloc_r+0x64>
 800a04c:	460c      	mov	r4, r1
 800a04e:	6849      	ldr	r1, [r1, #4]
 800a050:	e7cc      	b.n	8009fec <_malloc_r+0x2c>
 800a052:	1cc4      	adds	r4, r0, #3
 800a054:	f024 0403 	bic.w	r4, r4, #3
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d005      	beq.n	800a068 <_malloc_r+0xa8>
 800a05c:	1a21      	subs	r1, r4, r0
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 f808 	bl	800a074 <_sbrk_r>
 800a064:	3001      	adds	r0, #1
 800a066:	d0cf      	beq.n	800a008 <_malloc_r+0x48>
 800a068:	6025      	str	r5, [r4, #0]
 800a06a:	e7db      	b.n	800a024 <_malloc_r+0x64>
 800a06c:	20000218 	.word	0x20000218
 800a070:	2000021c 	.word	0x2000021c

0800a074 <_sbrk_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4c06      	ldr	r4, [pc, #24]	; (800a090 <_sbrk_r+0x1c>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4605      	mov	r5, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	f7f6 fee4 	bl	8000e4c <_sbrk>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_sbrk_r+0x1a>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_sbrk_r+0x1a>
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	20001b7c 	.word	0x20001b7c

0800a094 <__malloc_lock>:
 800a094:	4770      	bx	lr

0800a096 <__malloc_unlock>:
 800a096:	4770      	bx	lr

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
