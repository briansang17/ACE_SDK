
self_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800914c  0800914c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009154  08009154  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800915c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001f4  08009350  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  08009350  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfc1  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037a5  00000000  00000000  0003c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003f990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002604e  00000000  00000000  00041e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123a0  00000000  00000000  00067ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8b9e  00000000  00000000  0007a286  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152e24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  00152ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080090ac 	.word	0x080090ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	080090ac 	.word	0x080090ac

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc8b 	bl	8000df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f814 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f980 	bl	80007e4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004e4:	f000 f910 	bl	8000708 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f94c 	bl	8000784 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f007 ff64 	bl	80083b8 <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 80004f0:	f000 f8a0 	bl	8000634 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80004f4:	f000 f8ca 	bl	800068c <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  report(query());
 80004f8:	f000 fa1e 	bl	8000938 <query>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fa26 	bl	8000950 <report>
 8000504:	e7f8      	b.n	80004f8 <main+0x24>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0b0      	sub	sp, #192	; 0xc0
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000512:	2244      	movs	r2, #68	; 0x44
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fd06 	bl	8008f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2268      	movs	r2, #104	; 0x68
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fcf8 	bl	8008f28 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000538:	f002 fb0a 	bl	8002b50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <SystemClock_Config+0x128>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000542:	4a3b      	ldr	r2, [pc, #236]	; (8000630 <SystemClock_Config+0x128>)
 8000544:	f023 0318 	bic.w	r3, r3, #24
 8000548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800054c:	2314      	movs	r3, #20
 800054e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000562:	2360      	movs	r3, #96	; 0x60
 8000564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800056e:	2301      	movs	r3, #1
 8000570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 800057a:	2328      	movs	r3, #40	; 0x28
 800057c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000580:	2307      	movs	r3, #7
 8000582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fc20 	bl	8002ddc <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005a2:	f000 f9e0 	bl	8000966 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f82b 	bl	800361c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005cc:	f000 f9cb 	bl	8000966 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80005d0:	f242 0301 	movw	r3, #8193	; 0x2001
 80005d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005de:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005e8:	2318      	movs	r3, #24
 80005ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005fc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fa0f 	bl	8003a24 <HAL_RCCEx_PeriphCLKConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800060c:	f000 f9ab 	bl	8000966 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000614:	f002 faba 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800061e:	f000 f9a2 	bl	8000966 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000622:	f003 fc69 	bl	8003ef8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000626:	bf00      	nop
 8000628:	37c0      	adds	r7, #192	; 0xc0
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_QUADSPI_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_QUADSPI_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000646:	2201      	movs	r2, #1
 8000648:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_QUADSPI_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_QUADSPI_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_QUADSPI_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_QUADSPI_Init+0x50>)
 8000670:	f002 faf2 	bl	8002c58 <HAL_QSPI_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 f974 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000368 	.word	0x20000368
 8000688:	a0001000 	.word	0xa0001000

0800068c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_SPI2_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_SPI2_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_SPI2_Init+0x74>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_SPI2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI2_Init+0x74>)
 80006a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_SPI2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI2_Init+0x74>)
 80006ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_SPI2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI2_Init+0x74>)
 80006da:	2207      	movs	r2, #7
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_SPI2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI2_Init+0x74>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_SPI2_Init+0x74>)
 80006ec:	f003 fd04 	bl	80040f8 <HAL_SPI_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f936 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000220 	.word	0x20000220
 8000704:	40003800 	.word	0x40003800

08000708 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_SPI3_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_SPI3_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_SPI3_Init+0x74>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_SPI3_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI3_Init+0x74>)
 8000722:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000726:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_SPI3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI3_Init+0x74>)
 8000736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SPI3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI3_Init+0x74>)
 8000756:	2207      	movs	r2, #7
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SPI3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI3_Init+0x74>)
 8000762:	2208      	movs	r2, #8
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_SPI3_Init+0x74>)
 8000768:	f003 fcc6 	bl	80040f8 <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f8f8 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000284 	.word	0x20000284
 8000780:	40003c00 	.word	0x40003c00

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART1_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c8:	f003 fd39 	bl	800423e <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f8c8 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200002e8 	.word	0x200002e8
 80007e0:	40013800 	.word	0x40013800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <MX_GPIO_Init+0x140>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a49      	ldr	r2, [pc, #292]	; (8000924 <MX_GPIO_Init+0x140>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <MX_GPIO_Init+0x140>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b44      	ldr	r3, [pc, #272]	; (8000924 <MX_GPIO_Init+0x140>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a43      	ldr	r2, [pc, #268]	; (8000924 <MX_GPIO_Init+0x140>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <MX_GPIO_Init+0x140>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <MX_GPIO_Init+0x140>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a3d      	ldr	r2, [pc, #244]	; (8000924 <MX_GPIO_Init+0x140>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <MX_GPIO_Init+0x140>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b38      	ldr	r3, [pc, #224]	; (8000924 <MX_GPIO_Init+0x140>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a37      	ldr	r2, [pc, #220]	; (8000924 <MX_GPIO_Init+0x140>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <MX_GPIO_Init+0x140>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <MX_GPIO_Init+0x140>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a31      	ldr	r2, [pc, #196]	; (8000924 <MX_GPIO_Init+0x140>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_GPIO_Init+0x140>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADXL_CS_Pin|ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f241 0110 	movw	r1, #4112	; 0x1010
 8000878:	482b      	ldr	r0, [pc, #172]	; (8000928 <MX_GPIO_Init+0x144>)
 800087a:	f000 fdbb 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f246 3140 	movw	r1, #25408	; 0x6340
 8000884:	4829      	ldr	r0, [pc, #164]	; (800092c <MX_GPIO_Init+0x148>)
 8000886:	f000 fdb5 	bl	80013f4 <HAL_GPIO_WritePin>
                          |ADS_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APWR_EN_GPIO_Port, APWR_EN_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <MX_GPIO_Init+0x14c>)
 8000890:	f000 fdb0 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADXL_CS_Pin ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin|ADS_PWDN_Pin;
 8000894:	f241 0310 	movw	r3, #4112	; 0x1010
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_GPIO_Init+0x144>)
 80008ae:	f000 fc27 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin SPI3_CS_Pin ADS_START_Pin
                           ADS_RST_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 80008b2:	f246 3340 	movw	r3, #25408	; 0x6340
 80008b6:	617b      	str	r3, [r7, #20]
                          |ADS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_GPIO_Init+0x148>)
 80008cc:	f000 fc18 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : APWR_EN_Pin */
  GPIO_InitStruct.Pin = APWR_EN_Pin;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0x14c>)
 80008e8:	f000 fc0a 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0x148>)
 8000900:	f000 fbfe 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8000904:	2308      	movs	r3, #8
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_GPIO_Init+0x150>)
 8000918:	f000 fbf2 	bl	8001100 <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	48000800 	.word	0x48000800
 800092c:	48000400 	.word	0x48000400
 8000930:	48000c00 	.word	0x48000c00
 8000934:	48001c00 	.word	0x48001c00

08000938 <query>:

/* USER CODE BEGIN 4 */
static uint8_t query(void) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
			uint8_t mem_pass : 1;
			uint8_t apwr_pass : 1;
		} bits;
	} report_bit_field;

	report_bit_field.report = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	713b      	strb	r3, [r7, #4]

	return report_bit_field.report;
 8000942:	793b      	ldrb	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <report>:

static void report(uint8_t test_reg) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]

}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x6>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <HAL_QSPI_MspInit+0xb4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d144      	bne.n	8000a64 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 80009dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e4:	6513      	str	r3, [r2, #80]	; 0x50
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 80009e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_QSPI_MspInit+0xb8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000a22:	23cc      	movs	r3, #204	; 0xcc
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a32:	230a      	movs	r3, #10
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fb5e 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a54:	230a      	movs	r3, #10
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_QSPI_MspInit+0xbc>)
 8000a60:	f000 fb4e 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	a0001000 	.word	0xa0001000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_SPI_MspInit+0x14c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d145      	bne.n	8000b26 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9a:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af2:	2305      	movs	r3, #5
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4833      	ldr	r0, [pc, #204]	; (8000bcc <HAL_SPI_MspInit+0x154>)
 8000afe:	f000 faff 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b14:	2305      	movs	r3, #5
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <HAL_SPI_MspInit+0x158>)
 8000b20:	f000 faee 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b24:	e049      	b.n	8000bba <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a2a      	ldr	r2, [pc, #168]	; (8000bd4 <HAL_SPI_MspInit+0x15c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d144      	bne.n	8000bba <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b34:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_SPI_MspInit+0x150>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <HAL_SPI_MspInit+0x154>)
 8000b96:	f000 fab3 	bl	8001100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b9a:	2330      	movs	r3, #48	; 0x30
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000baa:	2306      	movs	r3, #6
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_SPI_MspInit+0x158>)
 8000bb6:	f000 faa3 	bl	8001100 <HAL_GPIO_Init>
}
 8000bba:	bf00      	nop
 8000bbc:	3738      	adds	r7, #56	; 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40003800 	.word	0x40003800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x80>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d129      	bne.n	8000c4e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 fa59 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40021000 	.word	0x40021000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f8f6 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <USB_IRQHandler+0x10>)
 8000cba:	f000 fce7 	bl	800168c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001888 	.word	0x20001888

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f008 f8dc 	bl	8008eb4 <__errno>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	230c      	movs	r3, #12
 8000d00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20028000 	.word	0x20028000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000210 	.word	0x20000210
 8000d30:	20001b80 	.word	0x20001b80

08000d34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <SystemInit+0x64>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <SystemInit+0x64>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <SystemInit+0x68>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <SystemInit+0x68>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <SystemInit+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <SystemInit+0x68>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <SystemInit+0x68>)
 8000d60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <SystemInit+0x68>)
 8000d6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemInit+0x68>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <SystemInit+0x68>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SystemInit+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SystemInit+0x64>)
 8000d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	40021000 	.word	0x40021000

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffc6 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000da8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000daa:	e003      	b.n	8000db4 <LoopCopyDataInit>

08000dac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000db0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000db2:	3104      	adds	r1, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000db8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dbc:	d3f6      	bcc.n	8000dac <CopyDataInit>
	ldr	r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dc0:	e002      	b.n	8000dc8 <LoopFillZerobss>

08000dc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dc4:	f842 3b04 	str.w	r3, [r2], #4

08000dc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <LoopForever+0x16>)
	cmp	r2, r3
 8000dca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dcc:	d3f9      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f008 f877 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fb7f 	bl	80004d4 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000ddc:	0800915c 	.word	0x0800915c
	ldr	r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000de4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000de8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000dec:	20001b80 	.word	0x20001b80

08000df0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_IRQHandler>

08000df2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f93d 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f80e 	bl	8000e24 <HAL_InitTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e001      	b.n	8000e18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e14:	f7ff fdac 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_InitTick+0x6c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d023      	beq.n	8000e80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_InitTick+0x70>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_InitTick+0x6c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f949 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10f      	bne.n	8000e7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d809      	bhi.n	8000e74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f913 	bl	8001092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_InitTick+0x74>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e004      	b.n	8000e84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e001      	b.n	8000e84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200003b4 	.word	0x200003b4

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200003b4 	.word	0x200003b4

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e154      	b.n	80013ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8146 	beq.w	80013b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d00b      	beq.n	8001148 <HAL_GPIO_Init+0x48>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113c:	2b11      	cmp	r3, #17
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b12      	cmp	r3, #18
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 0201 	and.w	r2, r3, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0xea>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0203 	and.w	r2, r3, #3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80a0 	beq.w	80013b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 8001276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6613      	str	r3, [r2, #96]	; 0x60
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128c:	4a53      	ldr	r2, [pc, #332]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b6:	d019      	beq.n	80012ec <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <HAL_GPIO_Init+0x2e0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2e4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1e0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_GPIO_Init+0x2ec>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1dc>
 80012d8:	2304      	movs	r3, #4
 80012da:	e008      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012dc:	2307      	movs	r3, #7
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012ec:	2300      	movs	r3, #0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fe:	4937      	ldr	r1, [pc, #220]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001330:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f aea3 	bne.w	8001110 <HAL_GPIO_Init+0x10>
  }
}
 80013ca:	bf00      	nop
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48001000 	.word	0x48001000
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e002      	b.n	8001418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b08b      	sub	sp, #44	; 0x2c
 8001428:	af06      	add	r7, sp, #24
 800142a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e104      	b.n	8001640 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f007 f9a4 	bl	8008798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fb25 	bl	8004aac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	687e      	ldr	r6, [r7, #4]
 800146a:	466d      	mov	r5, sp
 800146c:	f106 0410 	add.w	r4, r6, #16
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	602b      	str	r3, [r5, #0]
 8001478:	1d33      	adds	r3, r6, #4
 800147a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147c:	6838      	ldr	r0, [r7, #0]
 800147e:	f003 faed 	bl	8004a5c <USB_CoreInit>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2202      	movs	r2, #2
 800148c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0d5      	b.n	8001640 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fb21 	bl	8004ae2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e04c      	b.n	8001540 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3301      	adds	r3, #1
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	b298      	uxth	r0, r3
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	3336      	adds	r3, #54	; 0x36
 80014e4:	4602      	mov	r2, r0
 80014e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	3303      	adds	r3, #3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	3338      	adds	r3, #56	; 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	333c      	adds	r3, #60	; 0x3c
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3340      	adds	r3, #64	; 0x40
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3ad      	bcc.n	80014a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e044      	b.n	80015da <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3b5      	bcc.n	8001550 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	687e      	ldr	r6, [r7, #4]
 80015ec:	466d      	mov	r5, sp
 80015ee:	f106 0410 	add.w	r4, r6, #16
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	1d33      	adds	r3, r6, #4
 80015fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f003 fa7c 	bl	8004afc <USB_DevInit>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e014      	b.n	8001640 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fa63 	bl	8002afa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fa35 	bl	8006aa8 <USB_DevDisconnect>

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001648 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_PCD_Start+0x16>
 800165a:	2302      	movs	r3, #2
 800165c:	e012      	b.n	8001684 <HAL_PCD_Start+0x3c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa07 	bl	8004a7e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fa00 	bl	8006a7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fa1a 	bl	8006ad2 <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a8:	d102      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fb5b 	bl	8001d66 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fa0c 	bl	8006ad2 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c4:	d112      	bne.n	80016ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f007 f8fb 	bl	80088da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016e4:	2100      	movs	r1, #0
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f91e 	bl	8001928 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 f9ee 	bl	8006ad2 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001700:	d10b      	bne.n	800171a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001714:	b292      	uxth	r2, r2
 8001716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f005 f9d7 	bl	8006ad2 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800172a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800172e:	d10b      	bne.n	8001748 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001742:	b292      	uxth	r2, r2
 8001744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f005 f9c0 	bl	8006ad2 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175c:	d133      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001766:	b29a      	uxth	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0204 	bic.w	r2, r2, #4
 8001770:	b292      	uxth	r2, r2
 8001772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0208 	bic.w	r2, r2, #8
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a0:	2100      	movs	r1, #0
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f007 fb4a 	bl	8008e3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f007 f8cf 	bl	800894c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c0:	b292      	uxth	r2, r2
 80017c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 f981 	bl	8006ad2 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017da:	d126      	bne.n	800182a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	b292      	uxth	r2, r2
 8001808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0204 	orr.w	r2, r2, #4
 800181e:	b292      	uxth	r2, r2
 8001820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f007 f877 	bl	8008918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f005 f94f 	bl	8006ad2 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d13f      	bne.n	80018be <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d12b      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0204 	orr.w	r2, r2, #4
 8001872:	b292      	uxth	r2, r2
 8001874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018ae:	2101      	movs	r1, #1
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f007 fac3 	bl	8008e3c <HAL_PCDEx_LPM_Callback>
 80018b6:	e002      	b.n	80018be <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f007 f82d 	bl	8008918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 f905 	bl	8006ad2 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d2:	d10e      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018e6:	b292      	uxth	r2, r2
 80018e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f006 ffe6 	bl	80088be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 f8eb 	bl	8006ad2 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001906:	d10b      	bne.n	8001920 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800191a:	b292      	uxth	r2, r2
 800191c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_PCD_SetAddress+0x1a>
 800193e:	2302      	movs	r3, #2
 8001940:	e013      	b.n	800196a <HAL_PCD_SetAddress+0x42>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f005 f879 	bl	8006a52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	4608      	mov	r0, r1
 800197c:	4611      	mov	r1, r2
 800197e:	461a      	mov	r2, r3
 8001980:	4603      	mov	r3, r0
 8001982:	70fb      	strb	r3, [r7, #3]
 8001984:	460b      	mov	r3, r1
 8001986:	803b      	strh	r3, [r7, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da0e      	bge.n	80019b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	705a      	strb	r2, [r3, #1]
 80019b4:	e00e      	b.n	80019d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0207 	and.w	r2, r3, #7
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019e0:	883a      	ldrh	r2, [r7, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	78ba      	ldrb	r2, [r7, #2]
 80019ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019fe:	78bb      	ldrb	r3, [r7, #2]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d102      	bne.n	8001a0a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_PCD_EP_Open+0xa6>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e00e      	b.n	8001a36 <HAL_PCD_EP_Open+0xc4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f88a 	bl	8004b40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a34:	7afb      	ldrb	r3, [r7, #11]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da0e      	bge.n	8001a70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	705a      	strb	r2, [r3, #1]
 8001a6e:	e00e      	b.n	8001a8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_PCD_EP_Close+0x6a>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_Close+0x88>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fbb0 	bl	800521c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	460b      	mov	r3, r1
 8001adc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	f003 0207 	and.w	r2, r3, #7
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6979      	ldr	r1, [r7, #20]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fd63 	bl	80055f6 <USB_EPStartXfer>
 8001b30:	e005      	b.n	8001b3e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6979      	ldr	r1, [r7, #20]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fd5c 	bl	80055f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	f003 0207 	and.w	r2, r3, #7
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fd08 	bl	80055f6 <USB_EPStartXfer>
 8001be6:	e005      	b.n	8001bf4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6979      	ldr	r1, [r7, #20]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fd01 	bl	80055f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 0207 	and.w	r2, r3, #7
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d901      	bls.n	8001c1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e04c      	b.n	8001cb6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da0e      	bge.n	8001c42 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	705a      	strb	r2, [r3, #1]
 8001c40:	e00c      	b.n	8001c5c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_EP_SetStall+0x7e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e01c      	b.n	8001cb6 <HAL_PCD_EP_SetStall+0xb8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fde2 	bl	8006854 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d108      	bne.n	8001cac <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f004 ff23 	bl	8006af2 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d901      	bls.n	8001cdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e040      	b.n	8001d5e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0e      	bge.n	8001d02 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00e      	b.n	8001d20 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_PCD_EP_ClrStall+0x82>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e00e      	b.n	8001d5e <HAL_PCD_EP_ClrStall+0xa0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fdd1 	bl	80068f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08e      	sub	sp, #56	; 0x38
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d6e:	e2d1      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d78:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 8152 	bne.w	8002034 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d150      	bne.n	8001e3c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	81fb      	strh	r3, [r7, #14]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	441a      	add	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f006 fd44 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8282 	beq.w	8002314 <PCD_EP_ISR_Handler+0x5ae>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 827d 	bne.w	8002314 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e3a:	e26b      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d032      	beq.n	8001ebc <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f004 fe7b 	bl	8006b8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	823b      	strh	r3, [r7, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	8a3a      	ldrh	r2, [r7, #16]
 8001eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f006 fcbb 	bl	8008830 <HAL_PCD_SetupStageCallback>
 8001eba:	e22b      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ebc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f280 8227 	bge.w	8002314 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	83bb      	strh	r3, [r7, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	8bba      	ldrh	r2, [r7, #28]
 8001edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d019      	beq.n	8001f48 <PCD_EP_ISR_Handler+0x1e2>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	6959      	ldr	r1, [r3, #20]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f004 fe2d 	bl	8006b8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f40:	2100      	movs	r1, #0
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f006 fc86 	bl	8008854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d112      	bne.n	8001f96 <PCD_EP_ISR_Handler+0x230>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	801a      	strh	r2, [r3, #0]
 8001f94:	e02f      	b.n	8001ff6 <PCD_EP_ISR_Handler+0x290>
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f9c:	d813      	bhi.n	8001fc6 <PCD_EP_ISR_Handler+0x260>
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x252>
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e017      	b.n	8001ff6 <PCD_EP_ISR_Handler+0x290>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <PCD_EP_ISR_Handler+0x27a>
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	827b      	strh	r3, [r7, #18]
 8002008:	8a7b      	ldrh	r3, [r7, #18]
 800200a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800200e:	827b      	strh	r3, [r7, #18]
 8002010:	8a7b      	ldrh	r3, [r7, #18]
 8002012:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002016:	827b      	strh	r3, [r7, #18]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	8a7b      	ldrh	r3, [r7, #18]
 800201e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	b29b      	uxth	r3, r3
 8002030:	8013      	strh	r3, [r2, #0]
 8002032:	e16f      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002046:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800204a:	2b00      	cmp	r3, #0
 800204c:	f280 80e4 	bge.w	8002218 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002066:	4013      	ands	r3, r2
 8002068:	853b      	strh	r3, [r7, #40]	; 0x28
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800207a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207e:	b292      	uxth	r2, r2
 8002080:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002082:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	7b1b      	ldrb	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d120      	bne.n	80020e2 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80020c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8083 	beq.w	80021d4 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	6959      	ldr	r1, [r3, #20]
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	88da      	ldrh	r2, [r3, #6]
 80020da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020dc:	f004 fd56 	bl	8006b8c <USB_ReadPMA>
 80020e0:	e078      	b.n	80021d4 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	78db      	ldrb	r3, [r3, #3]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d108      	bne.n	80020fc <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ec:	461a      	mov	r2, r3
 80020ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f91d 	bl	8002330 <HAL_PCD_EP_DB_Receive>
 80020f6:	4603      	mov	r3, r0
 80020f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020fa:	e06b      	b.n	80021d4 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	847b      	strh	r3, [r7, #34]	; 0x22
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800212c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002138:	b29b      	uxth	r3, r3
 800213a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01f      	beq.n	8002196 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800217c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217e:	2b00      	cmp	r3, #0
 8002180:	d028      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	6959      	ldr	r1, [r3, #20]
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	891a      	ldrh	r2, [r3, #8]
 800218e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002190:	f004 fcfc 	bl	8006b8c <USB_ReadPMA>
 8002194:	e01e      	b.n	80021d4 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	6959      	ldr	r1, [r3, #20]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	895a      	ldrh	r2, [r3, #10]
 80021ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021d0:	f004 fcdc 	bl	8006b8c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021da:	441a      	add	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021e6:	441a      	add	r2, r3
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <PCD_EP_ISR_Handler+0x498>
 80021f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d206      	bcs.n	800220c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f006 fb25 	bl	8008854 <HAL_PCD_DataOutStageCallback>
 800220a:	e005      	b.n	8002218 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f9ef 	bl	80055f6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	d078      	beq.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002222:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	843b      	strh	r3, [r7, #32]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	8c3b      	ldrh	r3, [r7, #32]
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29b      	uxth	r3, r3
 800226c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	78db      	ldrb	r3, [r3, #3]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d108      	bne.n	8002288 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800227a:	2b02      	cmp	r3, #2
 800227c:	d144      	bne.n	8002308 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800227e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13f      	bne.n	8002308 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	8bfb      	ldrh	r3, [r7, #30]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d906      	bls.n	80022c6 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8bfb      	ldrh	r3, [r7, #30]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	e002      	b.n	80022cc <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f006 fad5 	bl	800888a <HAL_PCD_DataInStageCallback>
 80022e0:	e018      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
 80022e8:	441a      	add	r2, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	8bfb      	ldrh	r3, [r7, #30]
 80022f4:	441a      	add	r2, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f978 	bl	80055f6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002306:	e005      	b.n	8002314 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800230a:	461a      	mov	r2, r3
 800230c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f917 	bl	8002542 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231c:	b29b      	uxth	r3, r3
 800231e:	b21b      	sxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f6ff ad25 	blt.w	8001d70 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d07c      	beq.n	8002442 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	4413      	add	r3, r2
 8002362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	429a      	cmp	r2, r3
 8002376:	d306      	bcc.n	8002386 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	8b7b      	ldrh	r3, [r7, #26]
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	e002      	b.n	800238c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d123      	bne.n	80023dc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	833b      	strh	r3, [r7, #24]
 80023b0:	8b3b      	ldrh	r3, [r7, #24]
 80023b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023b6:	833b      	strh	r3, [r7, #24]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	8b3b      	ldrh	r3, [r7, #24]
 80023c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01f      	beq.n	8002426 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	82fb      	strh	r3, [r7, #22]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	8afb      	ldrh	r3, [r7, #22]
 8002412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002422:	b29b      	uxth	r3, r3
 8002424:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002426:	8b7b      	ldrh	r3, [r7, #26]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8085 	beq.w	8002538 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6959      	ldr	r1, [r3, #20]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	891a      	ldrh	r2, [r3, #8]
 800243a:	8b7b      	ldrh	r3, [r7, #26]
 800243c:	f004 fba6 	bl	8006b8c <USB_ReadPMA>
 8002440:	e07a      	b.n	8002538 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	4413      	add	r3, r2
 800245c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	8b7b      	ldrh	r3, [r7, #26]
 800246e:	429a      	cmp	r2, r3
 8002470:	d306      	bcc.n	8002480 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	8b7b      	ldrh	r3, [r7, #26]
 8002478:	1ad2      	subs	r2, r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	619a      	str	r2, [r3, #24]
 800247e:	e002      	b.n	8002486 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d123      	bne.n	80024d6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	83fb      	strh	r3, [r7, #30]
 80024aa:	8bfb      	ldrh	r3, [r7, #30]
 80024ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024b0:	83fb      	strh	r3, [r7, #30]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	441a      	add	r2, r3
 80024c0:	8bfb      	ldrh	r3, [r7, #30]
 80024c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11f      	bne.n	8002520 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	83bb      	strh	r3, [r7, #28]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	8bbb      	ldrh	r3, [r7, #28]
 800250c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002518:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251c:	b29b      	uxth	r3, r3
 800251e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002520:	8b7b      	ldrh	r3, [r7, #26]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6959      	ldr	r1, [r3, #20]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	895a      	ldrh	r2, [r3, #10]
 8002532:	8b7b      	ldrh	r3, [r7, #26]
 8002534:	f004 fb2a 	bl	8006b8c <USB_ReadPMA>
    }
  }

  return count;
 8002538:	8b7b      	ldrh	r3, [r7, #26]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b092      	sub	sp, #72	; 0x48
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	4613      	mov	r3, r2
 800254e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8130 	beq.w	80027bc <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4413      	add	r3, r2
 8002576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002580:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002588:	429a      	cmp	r2, r3
 800258a:	d906      	bls.n	800259a <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002592:	1ad2      	subs	r2, r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	619a      	str	r2, [r3, #24]
 8002598:	e002      	b.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12c      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f006 f96b 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 822d 	beq.w	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	827b      	strh	r3, [r7, #18]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	8a7b      	ldrh	r3, [r7, #18]
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
 8002600:	e20b      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01f      	beq.n	800264c <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002648:	b29b      	uxth	r3, r3
 800264a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 81e1 	bne.w	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800266a:	441a      	add	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d309      	bcc.n	8002690 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	1ad2      	subs	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	621a      	str	r2, [r3, #32]
 800268e:	e014      	b.n	80026ba <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026a4:	e009      	b.n	80026ba <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d155      	bne.n	800276e <HAL_PCD_EP_DB_Transmit+0x22c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00da      	lsls	r2, r3, #3
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d112      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270e:	b29a      	uxth	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e047      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2b3e      	cmp	r3, #62	; 0x3e
 800271a:	d811      	bhi.n	8002740 <HAL_PCD_EP_DB_Transmit+0x1fe>
 800271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	3301      	adds	r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	b29b      	uxth	r3, r3
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	b29a      	uxth	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e032      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x214>
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	b29b      	uxth	r3, r3
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	b29b      	uxth	r3, r3
 800275e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002766:	b29a      	uxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	e01b      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x264>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d117      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	4413      	add	r3, r2
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	00da      	lsls	r2, r3, #3
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	4413      	add	r3, r2
 8002798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6959      	ldr	r1, [r3, #20]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	891a      	ldrh	r2, [r3, #8]
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f004 f9a8 	bl	8006b0a <USB_WritePMA>
 80027ba:	e12e      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d306      	bcc.n	80027fa <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	619a      	str	r2, [r3, #24]
 80027f8:	e002      	b.n	8002800 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d12c      	bne.n	8002862 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f006 f83b 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80fd 	bne.w	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800284c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]
 8002860:	e0db      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11f      	bne.n	80028ac <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 80b1 	bne.w	8002a1a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028be:	441a      	add	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028ca:	441a      	add	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d309      	bcc.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	621a      	str	r2, [r3, #32]
 80028ee:	e014      	b.n	800291a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80028f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002904:	e009      	b.n	800291a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d155      	bne.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x492>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293c:	4413      	add	r3, r2
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00da      	lsls	r2, r3, #3
 8002946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002948:	4413      	add	r3, r2
 800294a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	2b00      	cmp	r3, #0
 8002954:	d112      	bne.n	800297c <HAL_PCD_EP_DB_Transmit+0x43a>
 8002956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002960:	b29a      	uxth	r2, r3
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29a      	uxth	r2, r3
 8002976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	e044      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	2b3e      	cmp	r3, #62	; 0x3e
 8002980:	d811      	bhi.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x464>
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_PCD_EP_DB_Transmit+0x456>
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	3301      	adds	r3, #1
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299a:	b29b      	uxth	r3, r3
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e02f      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80029a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_PCD_EP_DB_Transmit+0x47a>
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	3b01      	subs	r3, #1
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029be:	b29b      	uxth	r3, r3
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	e018      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d114      	bne.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	4413      	add	r3, r2
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	00da      	lsls	r2, r3, #3
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	4413      	add	r3, r2
 80029f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6959      	ldr	r1, [r3, #20]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	895a      	ldrh	r2, [r3, #10]
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f004 f878 	bl	8006b0a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a34:	823b      	strh	r3, [r7, #16]
 8002a36:	8a3b      	ldrh	r3, [r7, #16]
 8002a38:	f083 0310 	eor.w	r3, r3, #16
 8002a3c:	823b      	strh	r3, [r7, #16]
 8002a3e:	8a3b      	ldrh	r3, [r7, #16]
 8002a40:	f083 0320 	eor.w	r3, r3, #32
 8002a44:	823b      	strh	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	8a3b      	ldrh	r3, [r7, #16]
 8002a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3748      	adds	r7, #72	; 0x48
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	4613      	mov	r3, r2
 8002a84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e009      	b.n	8002abe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aaa:	897a      	ldrh	r2, [r7, #10]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	80da      	strh	r2, [r3, #6]
 8002ad2:	e00b      	b.n	8002aec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9a:	d130      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d038      	beq.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2232      	movs	r2, #50	; 0x32
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd0:	e002      	b.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be4:	d102      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f2      	bne.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d110      	bne.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e00f      	b.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0a:	d007      	beq.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c14:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	20000000 	.word	0x20000000
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c46:	6053      	str	r3, [r2, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40007000 	.word	0x40007000

08002c58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7fe f930 	bl	8000ec4 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e069      	b.n	8002d44 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fe97 	bl	80009b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f85e 	bl	8002d50 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2120      	movs	r1, #32
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f856 	bl	8002d6c <QSPI_WaitFlagStateUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d137      	bne.n	8002d3a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cd4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	0611      	lsls	r1, r2, #24
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	69d2      	ldr	r2, [r2, #28]
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a12      	ldr	r2, [r2, #32]
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_QSPI_Init+0xf4>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6912      	ldr	r2, [r2, #16]
 8002d06:	0411      	lsls	r1, r2, #16
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6952      	ldr	r2, [r2, #20]
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6992      	ldr	r2, [r2, #24]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffe0f8fe 	.word	0xffe0f8fe

08002d50 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d7c:	e01a      	b.n	8002db4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d016      	beq.n	8002db4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe f89d 	bl	8000ec4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e00e      	b.n	8002dd2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1d6      	bne.n	8002d7e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f000 bc11 	b.w	8003612 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df0:	4ba0      	ldr	r3, [pc, #640]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfa:	4b9e      	ldr	r3, [pc, #632]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80e4 	beq.w	8002fda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_RCC_OscConfig+0x4c>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	f040 808b 	bne.w	8002f36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 8087 	bne.w	8002f36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x64>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e3e8      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_RCC_OscConfig+0x7e>
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e58:	e005      	b.n	8002e66 <HAL_RCC_OscConfig+0x8a>
 8002e5a:	4b86      	ldr	r3, [pc, #536]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d223      	bcs.n	8002eb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fd78 	bl	8003964 <RCC_SetFlashLatencyFromMSIRange>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e3c9      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4977      	ldr	r1, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9c:	4b75      	ldr	r3, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	4972      	ldr	r1, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e025      	b.n	8002efe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	496a      	ldr	r1, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	4965      	ldr	r1, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fd38 	bl	8003964 <RCC_SetFlashLatencyFromMSIRange>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e389      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002efe:	f000 fc6f 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8002f02:	4601      	mov	r1, r0
 8002f04:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x29c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	fa21 f303 	lsr.w	r3, r1, r3
 8002f1a:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_RCC_OscConfig+0x2a0>)
 8002f1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ff7e 	bl	8000e24 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d052      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	e36d      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d032      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f3e:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f4a:	f7fd ffbb 	bl	8000ec4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f52:	f7fd ffb7 	bl	8000ec4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e356      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f64:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	493a      	ldr	r1, [pc, #232]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	4935      	ldr	r1, [pc, #212]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
 8002fa2:	e01a      	b.n	8002fda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd ff88 	bl	8000ec4 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb8:	f7fd ff84 	bl	8000ec4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e323      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1dc>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d073      	beq.n	80030ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x21c>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d10e      	bne.n	8003010 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d063      	beq.n	80030cc <HAL_RCC_OscConfig+0x2f0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d15f      	bne.n	80030cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e300      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x24c>
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0x288>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x270>
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x288>
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x298>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fd ff2a 	bl	8000ec4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003072:	e010      	b.n	8003096 <HAL_RCC_OscConfig+0x2ba>
 8003074:	40021000 	.word	0x40021000
 8003078:	08009104 	.word	0x08009104
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fd ff1e 	bl	8000ec4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2bd      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	4baf      	ldr	r3, [pc, #700]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x2a8>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fd ff0e 	bl	8000ec4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fd ff0a 	bl	8000ec4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2a9      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	4ba5      	ldr	r3, [pc, #660]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x2d0>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d060      	beq.n	800319c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x310>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d119      	bne.n	800311a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d116      	bne.n	800311a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ec:	4b99      	ldr	r3, [pc, #612]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_OscConfig+0x328>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e286      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b93      	ldr	r3, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	4990      	ldr	r1, [pc, #576]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003118:	e040      	b.n	800319c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d023      	beq.n	800316a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003122:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8b      	ldr	r2, [pc, #556]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fd fec9 	bl	8000ec4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fd fec5 	bl	8000ec4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e264      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	497c      	ldr	r1, [pc, #496]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	e018      	b.n	800319c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	4b7a      	ldr	r3, [pc, #488]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a79      	ldr	r2, [pc, #484]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fd fea5 	bl	8000ec4 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fd fea1 	bl	8000ec4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e240      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003190:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d03c      	beq.n	8003222 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01c      	beq.n	80031ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	4a67      	ldr	r2, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fe80 	bl	8000ec4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fd fe7c 	bl	8000ec4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e21b      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031da:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80031dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <HAL_RCC_OscConfig+0x3ec>
 80031e8:	e01b      	b.n	8003222 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80031ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd fe63 	bl	8000ec4 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7fd fe5f 	bl	8000ec4 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1fe      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ef      	bne.n	8003202 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a6 	beq.w	800337c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6593      	str	r3, [r2, #88]	; 0x58
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003258:	2301      	movs	r3, #1
 800325a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325c:	4b3e      	ldr	r3, [pc, #248]	; (8003358 <HAL_RCC_OscConfig+0x57c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d118      	bne.n	800329a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_OscConfig+0x57c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x57c>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003274:	f7fd fe26 	bl	8000ec4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fd fe22 	bl	8000ec4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1c1      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328e:	4b32      	ldr	r3, [pc, #200]	; (8003358 <HAL_RCC_OscConfig+0x57c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4d8>
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b2:	e024      	b.n	80032fe <HAL_RCC_OscConfig+0x522>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d110      	bne.n	80032de <HAL_RCC_OscConfig+0x502>
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032dc:	e00f      	b.n	80032fe <HAL_RCC_OscConfig+0x522>
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd fddd 	bl	8000ec4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd fdd9 	bl	8000ec4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e176      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x578>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ed      	beq.n	800330e <HAL_RCC_OscConfig+0x532>
 8003332:	e01a      	b.n	800336a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd fdc6 	bl	8000ec4 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800333a:	e00f      	b.n	800335c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd fdc2 	bl	8000ec4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d906      	bls.n	800335c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e15f      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335c:	4baa      	ldr	r3, [pc, #680]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e8      	bne.n	800333c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336a:	7ffb      	ldrb	r3, [r7, #31]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4ba5      	ldr	r3, [pc, #660]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4aa4      	ldr	r2, [pc, #656]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03c      	beq.n	8003402 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003396:	4a9c      	ldr	r2, [pc, #624]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fd fd90 	bl	8000ec4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a8:	f7fd fd8c 	bl	8000ec4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e12b      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ba:	4b93      	ldr	r3, [pc, #588]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80033bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x5cc>
 80033c8:	e01b      	b.n	8003402 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ca:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80033cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d0:	4a8d      	ldr	r2, [pc, #564]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fd fd73 	bl	8000ec4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e2:	f7fd fd6f 	bl	8000ec4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e10e      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f4:	4b84      	ldr	r3, [pc, #528]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80033f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8102 	beq.w	8003610 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	2b02      	cmp	r3, #2
 8003412:	f040 80c5 	bne.w	80035a0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003416:	4b7c      	ldr	r3, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d12c      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	3b01      	subs	r3, #1
 8003436:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d123      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d11b      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d113      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d109      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	3b01      	subs	r3, #1
 800347e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d067      	beq.n	8003554 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d062      	beq.n	8003550 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800348a:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0bb      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800349a:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80034a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a6:	f7fd fd0d 	bl	8000ec4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fd fd09 	bl	8000ec4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0a8      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b4e      	ldr	r3, [pc, #312]	; (800360c <HAL_RCC_OscConfig+0x830>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034dc:	3a01      	subs	r2, #1
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034e6:	0212      	lsls	r2, r2, #8
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0552      	lsls	r2, r2, #21
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0652      	lsls	r2, r2, #25
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003506:	06d2      	lsls	r2, r2, #27
 8003508:	430a      	orrs	r2, r1
 800350a:	493f      	ldr	r1, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003510:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a39      	ldr	r2, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003528:	f7fd fccc 	bl	8000ec4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd fcc8 	bl	8000ec4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e067      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354e:	e05f      	b.n	8003610 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e05e      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d157      	bne.n	8003610 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003560:	4b29      	ldr	r3, [pc, #164]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a28      	ldr	r2, [pc, #160]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003578:	f7fd fca4 	bl	8000ec4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd fca0 	bl	8000ec4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e03f      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x7a4>
 800359e:	e037      	b.n	8003610 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d02d      	beq.n	8003602 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a11      	ldr	r2, [pc, #68]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035c4:	f023 0303 	bic.w	r3, r3, #3
 80035c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd fc73 	bl	8000ec4 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fc6f 	bl	8000ec4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e00e      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_RCC_OscConfig+0x82c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x806>
 8003600:	e006      	b.n	8003610 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e005      	b.n	8003612 <HAL_RCC_OscConfig+0x836>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop

0800361c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0c8      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b66      	ldr	r3, [pc, #408]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d910      	bls.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4961      	ldr	r1, [pc, #388]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b0      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d04c      	beq.n	8003706 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003674:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d121      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e09e      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d107      	bne.n	800369c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d115      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e092      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a4:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e086      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e07e      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 0203 	bic.w	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	493f      	ldr	r1, [pc, #252]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fd fbf5 	bl	8000ec4 <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036de:	f7fd fbf1 	bl	8000ec4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e066      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 020c 	and.w	r2, r3, #12
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	429a      	cmp	r2, r3
 8003704:	d1eb      	bne.n	80036de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	492c      	ldr	r1, [pc, #176]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d210      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4924      	ldr	r1, [pc, #144]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x1b0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e036      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4918      	ldr	r1, [pc, #96]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4910      	ldr	r1, [pc, #64]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003792:	f000 f825 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003796:	4601      	mov	r1, r0
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x1b4>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	fa21 f303 	lsr.w	r3, r1, r3
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fb34 	bl	8000e24 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	72fb      	strb	r3, [r7, #11]

  return status;
 80037c0:	7afb      	ldrb	r3, [r7, #11]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08009104 	.word	0x08009104
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x34>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d121      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11e      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e005      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800383c:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d102      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e004      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d101      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d133      	bne.n	80038d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xa4>
 800387e:	2b03      	cmp	r3, #3
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0xaa>
 8003882:	e005      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003886:	617b      	str	r3, [r7, #20]
      break;
 8003888:	e005      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800388c:	617b      	str	r3, [r7, #20]
      break;
 800388e:	e002      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	617b      	str	r3, [r7, #20]
      break;
 8003894:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	3301      	adds	r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	fb02 f203 	mul.w	r2, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0e5b      	lsrs	r3, r3, #25
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038d6:	69bb      	ldr	r3, [r7, #24]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3724      	adds	r7, #36	; 0x24
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40021000 	.word	0x40021000
 80038e8:	0800911c 	.word	0x0800911c
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	007a1200 	.word	0x007a1200

080038f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_RCC_GetHCLKFreq+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000000 	.word	0x20000000

0800390c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003910:	f7ff fff0 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8003914:	4601      	mov	r1, r0
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003922:	5cd3      	ldrb	r3, [r2, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	08009114 	.word	0x08009114

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800393c:	f7ff ffda 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0adb      	lsrs	r3, r3, #11
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08009114 	.word	0x08009114

08003964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800397c:	f7ff f8f8 	bl	8002b70 <HAL_PWREx_GetVoltageRange>
 8003980:	6178      	str	r0, [r7, #20]
 8003982:	e014      	b.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800399c:	f7ff f8e8 	bl	8002b70 <HAL_PWREx_GetVoltageRange>
 80039a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d10b      	bne.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d919      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2ba0      	cmp	r3, #160	; 0xa0
 80039c0:	d902      	bls.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c2:	2302      	movs	r3, #2
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e013      	b.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c8:	2301      	movs	r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e010      	b.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d902      	bls.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039d4:	2303      	movs	r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e00a      	b.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d102      	bne.n	80039e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e0:	2302      	movs	r3, #2
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	e004      	b.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b70      	cmp	r3, #112	; 0x70
 80039ea:	d101      	bne.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ec:	2301      	movs	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 0207 	bic.w	r2, r3, #7
 80039f8:	4909      	ldr	r1, [pc, #36]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d001      	beq.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40022000 	.word	0x40022000

08003a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a30:	2300      	movs	r3, #0
 8003a32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02f      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a48:	d005      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a56:	4b5d      	ldr	r3, [pc, #372]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a5c      	ldr	r2, [pc, #368]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa54 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a84:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	494e      	ldr	r1, [pc, #312]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 809e 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a39      	ldr	r2, [pc, #228]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af0:	f7fd f9e8 	bl	8000ec4 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fd f9e4 	bl	8000ec4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	74fb      	strb	r3, [r7, #19]
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b0c:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15a      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d019      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d016      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd f9a4 	bl	8000ec4 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd f9a0 	bl	8000ec4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d902      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	74fb      	strb	r3, [r7, #19]
            break;
 8003b96:	e006      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ec      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bba:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd8:	7c7b      	ldrb	r3, [r7, #17]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	4a9d      	ldr	r2, [pc, #628]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf6:	4b98      	ldr	r3, [pc, #608]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f023 0203 	bic.w	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4994      	ldr	r1, [pc, #592]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c18:	4b8f      	ldr	r3, [pc, #572]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 020c 	bic.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	498c      	ldr	r1, [pc, #560]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3a:	4b87      	ldr	r3, [pc, #540]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	4983      	ldr	r1, [pc, #524]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	497b      	ldr	r1, [pc, #492]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4972      	ldr	r1, [pc, #456]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca0:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	496a      	ldr	r1, [pc, #424]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	4961      	ldr	r1, [pc, #388]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce4:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	4959      	ldr	r1, [pc, #356]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	4950      	ldr	r1, [pc, #320]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	4948      	ldr	r1, [pc, #288]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d50:	f023 0203 	bic.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	493f      	ldr	r1, [pc, #252]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d028      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a31      	ldr	r2, [pc, #196]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d96:	60d3      	str	r3, [r2, #12]
 8003d98:	e011      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f8b4 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	491f      	ldr	r1, [pc, #124]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df4:	60d3      	str	r3, [r2, #12]
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f885 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	4908      	ldr	r1, [pc, #32]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e014      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f853 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f830 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000

08003f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f26:	4b73      	ldr	r3, [pc, #460]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f32:	4b70      	ldr	r3, [pc, #448]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
       ||
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
       ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d044      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	e041      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d00c      	beq.n	8003f86 <RCCEx_PLLSAI1_Config+0x6e>
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d013      	beq.n	8003f98 <RCCEx_PLLSAI1_Config+0x80>
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d120      	bne.n	8003fb6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f74:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11d      	bne.n	8003fbc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f84:	e01a      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e013      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f98:	4b56      	ldr	r3, [pc, #344]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fa4:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fb4:	e006      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fba:	e004      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10d      	bne.n	8003fe8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fcc:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	4944      	ldr	r1, [pc, #272]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d17c      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffa:	f7fc ff63 	bl	8000ec4 <HAL_GetTick>
 8003ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004000:	e009      	b.n	8004016 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004002:	f7fc ff5f 	bl	8000ec4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	73fb      	strb	r3, [r7, #15]
        break;
 8004014:	e005      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ef      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d15f      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d110      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004036:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	0211      	lsls	r1, r2, #8
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68d2      	ldr	r2, [r2, #12]
 8004044:	06d2      	lsls	r2, r2, #27
 8004046:	430a      	orrs	r2, r1
 8004048:	492a      	ldr	r1, [pc, #168]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]
 800404e:	e027      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d112      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800405e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6892      	ldr	r2, [r2, #8]
 8004066:	0211      	lsls	r1, r2, #8
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6912      	ldr	r2, [r2, #16]
 800406c:	0852      	lsrs	r2, r2, #1
 800406e:	3a01      	subs	r2, #1
 8004070:	0552      	lsls	r2, r2, #21
 8004072:	430a      	orrs	r2, r1
 8004074:	491f      	ldr	r1, [pc, #124]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
 800407a:	e011      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004084:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6892      	ldr	r2, [r2, #8]
 800408c:	0211      	lsls	r1, r2, #8
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6952      	ldr	r2, [r2, #20]
 8004092:	0852      	lsrs	r2, r2, #1
 8004094:	3a01      	subs	r2, #1
 8004096:	0652      	lsls	r2, r2, #25
 8004098:	430a      	orrs	r2, r1
 800409a:	4916      	ldr	r1, [pc, #88]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fc ff0a 	bl	8000ec4 <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b2:	e009      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040b4:	f7fc ff06 	bl	8000ec4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d902      	bls.n	80040c8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	73fb      	strb	r3, [r7, #15]
          break;
 80040c6:	e005      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ef      	beq.n	80040b4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	4904      	ldr	r1, [pc, #16]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e095      	b.n	8004236 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d009      	beq.n	8004130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e005      	b.n	8004130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fc94 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004170:	d902      	bls.n	8004178 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e002      	b.n	800417e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800417c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004186:	d007      	beq.n	8004198 <HAL_SPI_Init+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004190:	d002      	beq.n	8004198 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	ea42 0103 	orr.w	r1, r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	f003 0204 	and.w	r2, r3, #4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004214:	ea42 0103 	orr.w	r1, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e040      	b.n	80042d2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fc fcb9 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2224      	movs	r2, #36	; 0x24
 800426a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f82d 	bl	80042dc <UART_SetConfig>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e022      	b.n	80042d2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa7f 	bl	8004798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fb06 	bl	80048dc <UART_CheckIdleState>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4ba4      	ldr	r3, [pc, #656]	; (800459c <UART_SetConfig+0x2c0>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	69f9      	ldr	r1, [r7, #28]
 8004312:	430b      	orrs	r3, r1
 8004314:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a9a      	ldr	r2, [pc, #616]	; (80045a0 <UART_SetConfig+0x2c4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a91      	ldr	r2, [pc, #580]	; (80045a4 <UART_SetConfig+0x2c8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d121      	bne.n	80043a8 <UART_SetConfig+0xcc>
 8004364:	4b90      	ldr	r3, [pc, #576]	; (80045a8 <UART_SetConfig+0x2cc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b03      	cmp	r3, #3
 8004370:	d816      	bhi.n	80043a0 <UART_SetConfig+0xc4>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x9c>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	08004389 	.word	0x08004389
 800437c:	08004395 	.word	0x08004395
 8004380:	0800438f 	.word	0x0800438f
 8004384:	0800439b 	.word	0x0800439b
 8004388:	2301      	movs	r3, #1
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	e0be      	b.n	800450c <UART_SetConfig+0x230>
 800438e:	2302      	movs	r3, #2
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e0bb      	b.n	800450c <UART_SetConfig+0x230>
 8004394:	2304      	movs	r3, #4
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e0b8      	b.n	800450c <UART_SetConfig+0x230>
 800439a:	2308      	movs	r3, #8
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e0b5      	b.n	800450c <UART_SetConfig+0x230>
 80043a0:	2310      	movs	r3, #16
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	bf00      	nop
 80043a6:	e0b1      	b.n	800450c <UART_SetConfig+0x230>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a7f      	ldr	r2, [pc, #508]	; (80045ac <UART_SetConfig+0x2d0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d134      	bne.n	800441c <UART_SetConfig+0x140>
 80043b2:	4b7d      	ldr	r3, [pc, #500]	; (80045a8 <UART_SetConfig+0x2cc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d829      	bhi.n	8004414 <UART_SetConfig+0x138>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0xec>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004415 	.word	0x08004415
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004409 	.word	0x08004409
 80043dc:	08004415 	.word	0x08004415
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004403 	.word	0x08004403
 80043ec:	08004415 	.word	0x08004415
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004415 	.word	0x08004415
 80043f8:	0800440f 	.word	0x0800440f
 80043fc:	2300      	movs	r3, #0
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e084      	b.n	800450c <UART_SetConfig+0x230>
 8004402:	2302      	movs	r3, #2
 8004404:	76fb      	strb	r3, [r7, #27]
 8004406:	e081      	b.n	800450c <UART_SetConfig+0x230>
 8004408:	2304      	movs	r3, #4
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e07e      	b.n	800450c <UART_SetConfig+0x230>
 800440e:	2308      	movs	r3, #8
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e07b      	b.n	800450c <UART_SetConfig+0x230>
 8004414:	2310      	movs	r3, #16
 8004416:	76fb      	strb	r3, [r7, #27]
 8004418:	bf00      	nop
 800441a:	e077      	b.n	800450c <UART_SetConfig+0x230>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a63      	ldr	r2, [pc, #396]	; (80045b0 <UART_SetConfig+0x2d4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d120      	bne.n	8004468 <UART_SetConfig+0x18c>
 8004426:	4b60      	ldr	r3, [pc, #384]	; (80045a8 <UART_SetConfig+0x2cc>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004430:	2b10      	cmp	r3, #16
 8004432:	d00f      	beq.n	8004454 <UART_SetConfig+0x178>
 8004434:	2b10      	cmp	r3, #16
 8004436:	d802      	bhi.n	800443e <UART_SetConfig+0x162>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <UART_SetConfig+0x16c>
 800443c:	e010      	b.n	8004460 <UART_SetConfig+0x184>
 800443e:	2b20      	cmp	r3, #32
 8004440:	d005      	beq.n	800444e <UART_SetConfig+0x172>
 8004442:	2b30      	cmp	r3, #48	; 0x30
 8004444:	d009      	beq.n	800445a <UART_SetConfig+0x17e>
 8004446:	e00b      	b.n	8004460 <UART_SetConfig+0x184>
 8004448:	2300      	movs	r3, #0
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e05e      	b.n	800450c <UART_SetConfig+0x230>
 800444e:	2302      	movs	r3, #2
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e05b      	b.n	800450c <UART_SetConfig+0x230>
 8004454:	2304      	movs	r3, #4
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e058      	b.n	800450c <UART_SetConfig+0x230>
 800445a:	2308      	movs	r3, #8
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e055      	b.n	800450c <UART_SetConfig+0x230>
 8004460:	2310      	movs	r3, #16
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	bf00      	nop
 8004466:	e051      	b.n	800450c <UART_SetConfig+0x230>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <UART_SetConfig+0x2d8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d120      	bne.n	80044b4 <UART_SetConfig+0x1d8>
 8004472:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <UART_SetConfig+0x2cc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d00f      	beq.n	80044a0 <UART_SetConfig+0x1c4>
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d802      	bhi.n	800448a <UART_SetConfig+0x1ae>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <UART_SetConfig+0x1b8>
 8004488:	e010      	b.n	80044ac <UART_SetConfig+0x1d0>
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d005      	beq.n	800449a <UART_SetConfig+0x1be>
 800448e:	2bc0      	cmp	r3, #192	; 0xc0
 8004490:	d009      	beq.n	80044a6 <UART_SetConfig+0x1ca>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x1d0>
 8004494:	2300      	movs	r3, #0
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e038      	b.n	800450c <UART_SetConfig+0x230>
 800449a:	2302      	movs	r3, #2
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e035      	b.n	800450c <UART_SetConfig+0x230>
 80044a0:	2304      	movs	r3, #4
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e032      	b.n	800450c <UART_SetConfig+0x230>
 80044a6:	2308      	movs	r3, #8
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e02f      	b.n	800450c <UART_SetConfig+0x230>
 80044ac:	2310      	movs	r3, #16
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	bf00      	nop
 80044b2:	e02b      	b.n	800450c <UART_SetConfig+0x230>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <UART_SetConfig+0x2c4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d124      	bne.n	8004508 <UART_SetConfig+0x22c>
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <UART_SetConfig+0x2cc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d012      	beq.n	80044f4 <UART_SetConfig+0x218>
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d802      	bhi.n	80044da <UART_SetConfig+0x1fe>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <UART_SetConfig+0x20c>
 80044d8:	e012      	b.n	8004500 <UART_SetConfig+0x224>
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d006      	beq.n	80044ee <UART_SetConfig+0x212>
 80044e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e4:	d009      	beq.n	80044fa <UART_SetConfig+0x21e>
 80044e6:	e00b      	b.n	8004500 <UART_SetConfig+0x224>
 80044e8:	2300      	movs	r3, #0
 80044ea:	76fb      	strb	r3, [r7, #27]
 80044ec:	e00e      	b.n	800450c <UART_SetConfig+0x230>
 80044ee:	2302      	movs	r3, #2
 80044f0:	76fb      	strb	r3, [r7, #27]
 80044f2:	e00b      	b.n	800450c <UART_SetConfig+0x230>
 80044f4:	2304      	movs	r3, #4
 80044f6:	76fb      	strb	r3, [r7, #27]
 80044f8:	e008      	b.n	800450c <UART_SetConfig+0x230>
 80044fa:	2308      	movs	r3, #8
 80044fc:	76fb      	strb	r3, [r7, #27]
 80044fe:	e005      	b.n	800450c <UART_SetConfig+0x230>
 8004500:	2310      	movs	r3, #16
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	bf00      	nop
 8004506:	e001      	b.n	800450c <UART_SetConfig+0x230>
 8004508:	2310      	movs	r3, #16
 800450a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <UART_SetConfig+0x2c4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	f040 8085 	bne.w	8004622 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004518:	7efb      	ldrb	r3, [r7, #27]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d823      	bhi.n	8004566 <UART_SetConfig+0x28a>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x248>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004549 	.word	0x08004549
 8004528:	08004567 	.word	0x08004567
 800452c:	08004551 	.word	0x08004551
 8004530:	08004567 	.word	0x08004567
 8004534:	08004557 	.word	0x08004557
 8004538:	08004567 	.word	0x08004567
 800453c:	08004567 	.word	0x08004567
 8004540:	08004567 	.word	0x08004567
 8004544:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7ff f9e0 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 800454c:	6178      	str	r0, [r7, #20]
        break;
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <UART_SetConfig+0x2dc>)
 8004552:	617b      	str	r3, [r7, #20]
        break;
 8004554:	e00c      	b.n	8004570 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7ff f943 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800455a:	6178      	str	r0, [r7, #20]
        break;
 800455c:	e008      	b.n	8004570 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	617b      	str	r3, [r7, #20]
        break;
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	76bb      	strb	r3, [r7, #26]
        break;
 800456e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8102 	beq.w	800477c <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	d305      	bcc.n	8004594 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	429a      	cmp	r2, r3
 8004592:	d913      	bls.n	80045bc <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	76bb      	strb	r3, [r7, #26]
 8004598:	e0f0      	b.n	800477c <UART_SetConfig+0x4a0>
 800459a:	bf00      	nop
 800459c:	efff69f3 	.word	0xefff69f3
 80045a0:	40008000 	.word	0x40008000
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40004400 	.word	0x40004400
 80045b0:	40004800 	.word	0x40004800
 80045b4:	40004c00 	.word	0x40004c00
 80045b8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	f04f 0400 	mov.w	r4, #0
 80045cc:	0214      	lsls	r4, r2, #8
 80045ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045d2:	020b      	lsls	r3, r1, #8
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6852      	ldr	r2, [r2, #4]
 80045d8:	0852      	lsrs	r2, r2, #1
 80045da:	4611      	mov	r1, r2
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	eb13 0b01 	adds.w	fp, r3, r1
 80045e4:	eb44 0c02 	adc.w	ip, r4, r2
 80045e8:	4658      	mov	r0, fp
 80045ea:	4661      	mov	r1, ip
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f04f 0400 	mov.w	r4, #0
 80045f4:	461a      	mov	r2, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	f7fb fdec 	bl	80001d4 <__aeabi_uldivmod>
 80045fc:	4603      	mov	r3, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d308      	bcc.n	800461c <UART_SetConfig+0x340>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004610:	d204      	bcs.n	800461c <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e0af      	b.n	800477c <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	76bb      	strb	r3, [r7, #26]
 8004620:	e0ac      	b.n	800477c <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462a:	d15b      	bne.n	80046e4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800462c:	7efb      	ldrb	r3, [r7, #27]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d827      	bhi.n	8004682 <UART_SetConfig+0x3a6>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x35c>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7ff f956 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 8004660:	6178      	str	r0, [r7, #20]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7ff f968 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004668:	6178      	str	r0, [r7, #20]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b49      	ldr	r3, [pc, #292]	; (8004794 <UART_SetConfig+0x4b8>)
 800466e:	617b      	str	r3, [r7, #20]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7ff f8b5 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004676:	6178      	str	r0, [r7, #20]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	617b      	str	r3, [r7, #20]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	76bb      	strb	r3, [r7, #26]
        break;
 800468a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d074      	beq.n	800477c <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005a      	lsls	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b0f      	cmp	r3, #15
 80046ae:	d916      	bls.n	80046de <UART_SetConfig+0x402>
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b6:	d212      	bcs.n	80046de <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f023 030f 	bic.w	r3, r3, #15
 80046c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	89fa      	ldrh	r2, [r7, #14]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e04e      	b.n	800477c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	76bb      	strb	r3, [r7, #26]
 80046e2:	e04b      	b.n	800477c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e4:	7efb      	ldrb	r3, [r7, #27]
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d827      	bhi.n	800473a <UART_SetConfig+0x45e>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x414>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004715 	.word	0x08004715
 80046f4:	0800471d 	.word	0x0800471d
 80046f8:	08004725 	.word	0x08004725
 80046fc:	0800473b 	.word	0x0800473b
 8004700:	0800472b 	.word	0x0800472b
 8004704:	0800473b 	.word	0x0800473b
 8004708:	0800473b 	.word	0x0800473b
 800470c:	0800473b 	.word	0x0800473b
 8004710:	08004733 	.word	0x08004733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7ff f8fa 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 8004718:	6178      	str	r0, [r7, #20]
        break;
 800471a:	e013      	b.n	8004744 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7ff f90c 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004720:	6178      	str	r0, [r7, #20]
        break;
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <UART_SetConfig+0x4b8>)
 8004726:	617b      	str	r3, [r7, #20]
        break;
 8004728:	e00c      	b.n	8004744 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7ff f859 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800472e:	6178      	str	r0, [r7, #20]
        break;
 8004730:	e008      	b.n	8004744 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	617b      	str	r3, [r7, #20]
        break;
 8004738:	e004      	b.n	8004744 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	76bb      	strb	r3, [r7, #26]
        break;
 8004742:	bf00      	nop
    }

    if (pclk != 0U)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	085a      	lsrs	r2, r3, #1
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	b29b      	uxth	r3, r3
 800475e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d908      	bls.n	8004778 <UART_SetConfig+0x49c>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d204      	bcs.n	8004778 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	e001      	b.n	800477c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004788:	7ebb      	ldrb	r3, [r7, #26]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004794:	00f42400 	.word	0x00f42400

08004798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d10a      	bne.n	80048ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048ea:	f7fc faeb 	bl	8000ec4 <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d10e      	bne.n	800491c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f82a 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e020      	b.n	800495e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d10e      	bne.n	8004948 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f814 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00a      	b.n	800495e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004976:	e05d      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d059      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fc faa0 	bl	8000ec4 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <UART_WaitOnFlagUntilTimeout+0x30>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11b      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e042      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02b      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ea:	d123      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d092      	beq.n	8004978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 0014 	add.w	r0, r7, #20
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	b004      	add	sp, #16
 8004a7c:	4770      	bx	lr

08004a7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a8e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ab4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ab8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004afc:	b084      	sub	sp, #16
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	f107 0014 	add.w	r0, r7, #20
 8004b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	b004      	add	sp, #16
 8004b3c:	4770      	bx	lr
	...

08004b40 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b09b      	sub	sp, #108	; 0x6c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	78db      	ldrb	r3, [r3, #3]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d81f      	bhi.n	8004bb2 <USB_ActivateEndpoint+0x72>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <USB_ActivateEndpoint+0x38>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004bbb 	.word	0x08004bbb
 8004b84:	08004b97 	.word	0x08004b97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b94:	e012      	b.n	8004bbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ba2:	e00b      	b.n	8004bbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ba4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bb0:	e004      	b.n	8004bbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004bb8:	e000      	b.n	8004bbc <USB_ActivateEndpoint+0x7c>
      break;
 8004bba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	b21a      	sxth	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b21b      	sxth	r3, r3
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	b21b      	sxth	r3, r3
 8004c02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	7b1b      	ldrb	r3, [r3, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8149 	bne.w	8004ec4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8084 	beq.w	8004d44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	00da      	lsls	r2, r3, #3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	88db      	ldrh	r3, [r3, #6]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	81fb      	strh	r3, [r7, #14]
 8004c7e:	89fb      	ldrh	r3, [r7, #14]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <USB_ActivateEndpoint+0x180>
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	81bb      	strh	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	89bb      	ldrh	r3, [r7, #12]
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d020      	beq.n	8004d0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cde:	813b      	strh	r3, [r7, #8]
 8004ce0:	893b      	ldrh	r3, [r7, #8]
 8004ce2:	f083 0320 	eor.w	r3, r3, #32
 8004ce6:	813b      	strh	r3, [r7, #8]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	893b      	ldrh	r3, [r7, #8]
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
 8004d08:	e27f      	b.n	800520a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	817b      	strh	r3, [r7, #10]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	897b      	ldrh	r3, [r7, #10]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
 8004d42:	e262      	b.n	800520a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	4413      	add	r3, r2
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	00da      	lsls	r2, r3, #3
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	88db      	ldrh	r3, [r3, #6]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	4413      	add	r3, r2
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	00da      	lsls	r2, r3, #3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	4413      	add	r3, r2
 8004d96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d112      	bne.n	8004dca <USB_ActivateEndpoint+0x28a>
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e02f      	b.n	8004e2a <USB_ActivateEndpoint+0x2ea>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd0:	d813      	bhi.n	8004dfa <USB_ActivateEndpoint+0x2ba>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <USB_ActivateEndpoint+0x2ac>
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	3301      	adds	r3, #1
 8004dea:	663b      	str	r3, [r7, #96]	; 0x60
 8004dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e017      	b.n	8004e2a <USB_ActivateEndpoint+0x2ea>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	663b      	str	r3, [r7, #96]	; 0x60
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <USB_ActivateEndpoint+0x2d4>
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e10:	3b01      	subs	r3, #1
 8004e12:	663b      	str	r3, [r7, #96]	; 0x60
 8004e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	83fb      	strh	r3, [r7, #30]
 8004e38:	8bfb      	ldrh	r3, [r7, #30]
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01b      	beq.n	8004e7a <USB_ActivateEndpoint+0x33a>
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e58:	83bb      	strh	r3, [r7, #28]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	8bbb      	ldrh	r3, [r7, #28]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	837b      	strh	r3, [r7, #26]
 8004e92:	8b7b      	ldrh	r3, [r7, #26]
 8004e94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e98:	837b      	strh	r3, [r7, #26]
 8004e9a:	8b7b      	ldrh	r3, [r7, #26]
 8004e9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ea0:	837b      	strh	r3, [r7, #26]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8b7b      	ldrh	r3, [r7, #26]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
 8004ec2:	e1a2      	b.n	800520a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f10:	4413      	add	r3, r2
 8004f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00da      	lsls	r2, r3, #3
 8004f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	891b      	ldrh	r3, [r3, #8]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	653b      	str	r3, [r7, #80]	; 0x50
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	4413      	add	r3, r2
 8004f46:	653b      	str	r3, [r7, #80]	; 0x50
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	00da      	lsls	r2, r3, #3
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	4413      	add	r3, r2
 8004f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	895b      	ldrh	r3, [r3, #10]
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8091 	bne.w	8005094 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01b      	beq.n	8004fc2 <USB_ActivateEndpoint+0x482>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	873b      	strh	r3, [r7, #56]	; 0x38
 8004fd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01b      	beq.n	8005012 <USB_ActivateEndpoint+0x4d2>
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	86bb      	strh	r3, [r7, #52]	; 0x34
 800502a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800502c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005030:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005032:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005038:	86bb      	strh	r3, [r7, #52]	; 0x34
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005070:	867b      	strh	r3, [r7, #50]	; 0x32
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
 8005092:	e0ba      	b.n	800520a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01d      	beq.n	80050ec <USB_ActivateEndpoint+0x5ac>
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01d      	beq.n	8005144 <USB_ActivateEndpoint+0x604>
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	78db      	ldrb	r3, [r3, #3]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d024      	beq.n	8005196 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005162:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005166:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800516a:	f083 0320 	eor.w	r3, r3, #32
 800516e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
 8005194:	e01d      	b.n	80051d2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800520a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800520e:	4618      	mov	r0, r3
 8005210:	376c      	adds	r7, #108	; 0x6c
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop

0800521c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800521c:	b480      	push	{r7}
 800521e:	b08d      	sub	sp, #52	; 0x34
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	7b1b      	ldrb	r3, [r3, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f040 808e 	bne.w	800534c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d044      	beq.n	80052c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	81bb      	strh	r3, [r7, #12]
 8005246:	89bb      	ldrh	r3, [r7, #12]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <USB_DeactivateEndpoint+0x6c>
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	817b      	strh	r3, [r7, #10]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529e:	813b      	strh	r3, [r7, #8]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
 80052c0:	e192      	b.n	80055e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	827b      	strh	r3, [r7, #18]
 80052d0:	8a7b      	ldrh	r3, [r7, #18]
 80052d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01b      	beq.n	8005312 <USB_DeactivateEndpoint+0xf6>
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f0:	823b      	strh	r3, [r7, #16]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	8a3b      	ldrh	r3, [r7, #16]
 80052fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800530a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	81fb      	strh	r3, [r7, #14]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	89fb      	ldrh	r3, [r7, #14]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
 800534a:	e14d      	b.n	80055e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 80a5 	bne.w	80054a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	843b      	strh	r3, [r7, #32]
 8005364:	8c3b      	ldrh	r3, [r7, #32]
 8005366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01b      	beq.n	80053a6 <USB_DeactivateEndpoint+0x18a>
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	83fb      	strh	r3, [r7, #30]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	8bfb      	ldrh	r3, [r7, #30]
 8005392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800539e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	83bb      	strh	r3, [r7, #28]
 80053b4:	8bbb      	ldrh	r3, [r7, #28]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01b      	beq.n	80053f6 <USB_DeactivateEndpoint+0x1da>
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	837b      	strh	r3, [r7, #26]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8b7b      	ldrh	r3, [r7, #26]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	833b      	strh	r3, [r7, #24]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8b3b      	ldrh	r3, [r7, #24]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	82fb      	strh	r3, [r7, #22]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8afb      	ldrh	r3, [r7, #22]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547c:	82bb      	strh	r3, [r7, #20]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	8abb      	ldrh	r3, [r7, #20]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]
 800549e:	e0a3      	b.n	80055e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01b      	beq.n	80054f0 <USB_DeactivateEndpoint+0x2d4>
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <USB_DeactivateEndpoint+0x324>
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3734      	adds	r7, #52	; 0x34
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b0c4      	sub	sp, #272	; 0x110
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	6018      	str	r0, [r3, #0]
 8005600:	463b      	mov	r3, r7
 8005602:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 8566 	bne.w	80060dc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005610:	463b      	mov	r3, r7
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	429a      	cmp	r2, r3
 800561e:	d905      	bls.n	800562c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800562a:	e004      	b.n	8005636 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800562c:	463b      	mov	r3, r7
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d12c      	bne.n	800569a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6959      	ldr	r1, [r3, #20]
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	88da      	ldrh	r2, [r3, #6]
 800564c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005650:	b29b      	uxth	r3, r3
 8005652:	1d38      	adds	r0, r7, #4
 8005654:	6800      	ldr	r0, [r0, #0]
 8005656:	f001 fa58 	bl	8006b0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	00da      	lsls	r2, r3, #3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	4413      	add	r3, r2
 800567e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005682:	f107 0310 	add.w	r3, r7, #16
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800568c:	b29a      	uxth	r2, r3
 800568e:	f107 0310 	add.w	r3, r7, #16
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	f000 bcec 	b.w	8006072 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	f040 8356 	bne.w	8005d52 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	f240 82fa 	bls.w	8005cac <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80056d6:	1d3b      	adds	r3, r7, #4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	441a      	add	r2, r3
 80056e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	463b      	mov	r3, r7
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 815e 	beq.w	80059f0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d164      	bne.n	800580e <USB_EPStartXfer+0x218>
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	4413      	add	r3, r2
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	00da      	lsls	r2, r3, #3
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	4413      	add	r3, r2
 8005768:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
 800576e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005772:	2b00      	cmp	r3, #0
 8005774:	d112      	bne.n	800579c <USB_EPStartXfer+0x1a6>
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005780:	b29a      	uxth	r2, r3
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005794:	b29a      	uxth	r2, r3
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e054      	b.n	8005846 <USB_EPStartXfer+0x250>
 800579c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d817      	bhi.n	80057d4 <USB_EPStartXfer+0x1de>
 80057a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <USB_EPStartXfer+0x1ce>
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057be:	3301      	adds	r3, #1
 80057c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e038      	b.n	8005846 <USB_EPStartXfer+0x250>
 80057d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_EPStartXfer+0x1fe>
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e01b      	b.n	8005846 <USB_EPStartXfer+0x250>
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d116      	bne.n	8005846 <USB_EPStartXfer+0x250>
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005820:	b29b      	uxth	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	4413      	add	r3, r2
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	463b      	mov	r3, r7
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	00da      	lsls	r2, r3, #3
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	4413      	add	r3, r2
 8005836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
 800583c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005840:	b29a      	uxth	r2, r3
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6959      	ldr	r1, [r3, #20]
 8005856:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800585a:	b29b      	uxth	r3, r3
 800585c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005860:	1d38      	adds	r0, r7, #4
 8005862:	6800      	ldr	r0, [r0, #0]
 8005864:	f001 f951 	bl	8006b0a <USB_WritePMA>
            ep->xfer_buff += len;
 8005868:	463b      	mov	r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005872:	441a      	add	r2, r3
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d90e      	bls.n	80058a8 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	621a      	str	r2, [r3, #32]
 80058a6:	e008      	b.n	80058ba <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d164      	bne.n	800598e <USB_EPStartXfer+0x398>
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	00da      	lsls	r2, r3, #3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d112      	bne.n	800591c <USB_EPStartXfer+0x326>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005900:	b29a      	uxth	r2, r3
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005914:	b29a      	uxth	r2, r3
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	e057      	b.n	80059cc <USB_EPStartXfer+0x3d6>
 800591c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005920:	2b3e      	cmp	r3, #62	; 0x3e
 8005922:	d817      	bhi.n	8005954 <USB_EPStartXfer+0x35e>
 8005924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800592e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <USB_EPStartXfer+0x34e>
 800593a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800593e:	3301      	adds	r3, #1
 8005940:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005944:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29a      	uxth	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	e03b      	b.n	80059cc <USB_EPStartXfer+0x3d6>
 8005954:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800595e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <USB_EPStartXfer+0x37e>
 800596a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800596e:	3b01      	subs	r3, #1
 8005970:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005974:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e01e      	b.n	80059cc <USB_EPStartXfer+0x3d6>
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d119      	bne.n	80059cc <USB_EPStartXfer+0x3d6>
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	4413      	add	r3, r2
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00da      	lsls	r2, r3, #3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	891b      	ldrh	r3, [r3, #8]
 80059d2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6959      	ldr	r1, [r3, #20]
 80059dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80059e6:	1d38      	adds	r0, r7, #4
 80059e8:	6800      	ldr	r0, [r0, #0]
 80059ea:	f001 f88e 	bl	8006b0a <USB_WritePMA>
 80059ee:	e340      	b.n	8006072 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d164      	bne.n	8005ac4 <USB_EPStartXfer+0x4ce>
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	4413      	add	r3, r2
 8005a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	00da      	lsls	r2, r3, #3
 8005a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d112      	bne.n	8005a52 <USB_EPStartXfer+0x45c>
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	e057      	b.n	8005b02 <USB_EPStartXfer+0x50c>
 8005a52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a56:	2b3e      	cmp	r3, #62	; 0x3e
 8005a58:	d817      	bhi.n	8005a8a <USB_EPStartXfer+0x494>
 8005a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <USB_EPStartXfer+0x484>
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	3301      	adds	r3, #1
 8005a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e03b      	b.n	8005b02 <USB_EPStartXfer+0x50c>
 8005a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <USB_EPStartXfer+0x4b4>
 8005aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e01e      	b.n	8005b02 <USB_EPStartXfer+0x50c>
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d119      	bne.n	8005b02 <USB_EPStartXfer+0x50c>
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae2:	4413      	add	r3, r2
 8005ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00da      	lsls	r2, r3, #3
 8005aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
 8005af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	891b      	ldrh	r3, [r3, #8]
 8005b08:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6959      	ldr	r1, [r3, #20]
 8005b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b1c:	1d38      	adds	r0, r7, #4
 8005b1e:	6800      	ldr	r0, [r0, #0]
 8005b20:	f000 fff3 	bl	8006b0a <USB_WritePMA>
            ep->xfer_buff += len;
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b2e:	441a      	add	r2, r3
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d90e      	bls.n	8005b64 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005b46:	463b      	mov	r3, r7
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	621a      	str	r2, [r3, #32]
 8005b62:	e008      	b.n	8005b76 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b6e:	463b      	mov	r3, r7
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d164      	bne.n	8005c50 <USB_EPStartXfer+0x65a>
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9a:	4413      	add	r3, r2
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	00da      	lsls	r2, r3, #3
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d112      	bne.n	8005bde <USB_EPStartXfer+0x5e8>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e054      	b.n	8005c88 <USB_EPStartXfer+0x692>
 8005bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be2:	2b3e      	cmp	r3, #62	; 0x3e
 8005be4:	d817      	bhi.n	8005c16 <USB_EPStartXfer+0x620>
 8005be6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <USB_EPStartXfer+0x610>
 8005bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c00:	3301      	adds	r3, #1
 8005c02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e038      	b.n	8005c88 <USB_EPStartXfer+0x692>
 8005c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <USB_EPStartXfer+0x640>
 8005c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c30:	3b01      	subs	r3, #1
 8005c32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e01b      	b.n	8005c88 <USB_EPStartXfer+0x692>
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d116      	bne.n	8005c88 <USB_EPStartXfer+0x692>
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	4413      	add	r3, r2
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	00da      	lsls	r2, r3, #3
 8005c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	895b      	ldrh	r3, [r3, #10]
 8005c8e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ca2:	1d38      	adds	r0, r7, #4
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	f000 ff30 	bl	8006b0a <USB_WritePMA>
 8005caa:	e1e2      	b.n	8006072 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005cac:	463b      	mov	r3, r7
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0e:	4413      	add	r3, r2
 8005d10:	663b      	str	r3, [r7, #96]	; 0x60
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	891b      	ldrh	r3, [r3, #8]
 8005d34:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6959      	ldr	r1, [r3, #20]
 8005d3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d48:	1d38      	adds	r0, r7, #4
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	f000 fedd 	bl	8006b0a <USB_WritePMA>
 8005d50:	e18f      	b.n	8006072 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	463b      	mov	r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808f 	beq.w	8005e8c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d164      	bne.n	8005e48 <USB_EPStartXfer+0x852>
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	673b      	str	r3, [r7, #112]	; 0x70
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d92:	4413      	add	r3, r2
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	00da      	lsls	r2, r3, #3
 8005d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005da8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d112      	bne.n	8005dd6 <USB_EPStartXfer+0x7e0>
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e054      	b.n	8005e80 <USB_EPStartXfer+0x88a>
 8005dd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dda:	2b3e      	cmp	r3, #62	; 0x3e
 8005ddc:	d817      	bhi.n	8005e0e <USB_EPStartXfer+0x818>
 8005dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <USB_EPStartXfer+0x808>
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e038      	b.n	8005e80 <USB_EPStartXfer+0x88a>
 8005e0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <USB_EPStartXfer+0x838>
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	029b      	lsls	r3, r3, #10
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e01b      	b.n	8005e80 <USB_EPStartXfer+0x88a>
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d116      	bne.n	8005e80 <USB_EPStartXfer+0x88a>
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	4413      	add	r3, r2
 8005e62:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e74:	677b      	str	r3, [r7, #116]	; 0x74
 8005e76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	895b      	ldrh	r3, [r3, #10]
 8005e86:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e8a:	e097      	b.n	8005fbc <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d168      	bne.n	8005f68 <USB_EPStartXfer+0x972>
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	00da      	lsls	r2, r3, #3
 8005ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d112      	bne.n	8005ef6 <USB_EPStartXfer+0x900>
 8005ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e05d      	b.n	8005fb2 <USB_EPStartXfer+0x9bc>
 8005ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005efa:	2b3e      	cmp	r3, #62	; 0x3e
 8005efc:	d817      	bhi.n	8005f2e <USB_EPStartXfer+0x938>
 8005efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <USB_EPStartXfer+0x928>
 8005f14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e041      	b.n	8005fb2 <USB_EPStartXfer+0x9bc>
 8005f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <USB_EPStartXfer+0x958>
 8005f44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	029b      	lsls	r3, r3, #10
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e024      	b.n	8005fb2 <USB_EPStartXfer+0x9bc>
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d11f      	bne.n	8005fb2 <USB_EPStartXfer+0x9bc>
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f7a:	1d3b      	adds	r3, r7, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f90:	463b      	mov	r3, r7
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	00da      	lsls	r2, r3, #3
 8005f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	891b      	ldrh	r3, [r3, #8]
 8005fb8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6959      	ldr	r1, [r3, #20]
 8005fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005fcc:	1d38      	adds	r0, r7, #4
 8005fce:	6800      	ldr	r0, [r0, #0]
 8005fd0:	f000 fd9b 	bl	8006b0a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d122      	bne.n	8006024 <USB_EPStartXfer+0xa2e>
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]
 8006022:	e026      	b.n	8006072 <USB_EPStartXfer+0xa7c>
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d121      	bne.n	8006072 <USB_EPStartXfer+0xa7c>
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800605e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800606a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606e:	b29b      	uxth	r3, r3
 8006070:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f107 020e 	add.w	r2, r7, #14
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	8013      	strh	r3, [r2, #0]
 8006092:	f107 030e 	add.w	r3, r7, #14
 8006096:	f107 020e 	add.w	r2, r7, #14
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	f082 0210 	eor.w	r2, r2, #16
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	f107 030e 	add.w	r3, r7, #14
 80060a6:	f107 020e 	add.w	r2, r7, #14
 80060aa:	8812      	ldrh	r2, [r2, #0]
 80060ac:	f082 0220 	eor.w	r2, r2, #32
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f107 030e 	add.w	r3, r7, #14
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
 80060da:	e3b5      	b.n	8006848 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	7b1b      	ldrb	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8090 	bne.w	8006208 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	463b      	mov	r3, r7
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d90e      	bls.n	8006116 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610c:	1ad2      	subs	r2, r2, r3
 800610e:	463b      	mov	r3, r7
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	619a      	str	r2, [r3, #24]
 8006114:	e008      	b.n	8006128 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006140:	4413      	add	r3, r2
 8006142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	00da      	lsls	r2, r3, #3
 800614e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006152:	4413      	add	r3, r2
 8006154:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800615c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006160:	2b00      	cmp	r3, #0
 8006162:	d116      	bne.n	8006192 <USB_EPStartXfer+0xb9c>
 8006164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006170:	b29a      	uxth	r2, r3
 8006172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e32c      	b.n	80067ec <USB_EPStartXfer+0x11f6>
 8006192:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006196:	2b3e      	cmp	r3, #62	; 0x3e
 8006198:	d818      	bhi.n	80061cc <USB_EPStartXfer+0xbd6>
 800619a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <USB_EPStartXfer+0xbc4>
 80061b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061b4:	3301      	adds	r3, #1
 80061b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061be:	b29b      	uxth	r3, r3
 80061c0:	029b      	lsls	r3, r3, #10
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e30f      	b.n	80067ec <USB_EPStartXfer+0x11f6>
 80061cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <USB_EPStartXfer+0xbf6>
 80061e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e2f1      	b.n	80067ec <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	78db      	ldrb	r3, [r3, #3]
 800620e:	2b02      	cmp	r3, #2
 8006210:	f040 818f 	bne.w	8006532 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d175      	bne.n	800630a <USB_EPStartXfer+0xd14>
 800621e:	1d3b      	adds	r3, r7, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006236:	4413      	add	r3, r2
 8006238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	00da      	lsls	r2, r3, #3
 8006244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006248:	4413      	add	r3, r2
 800624a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800624e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d116      	bne.n	800628a <USB_EPStartXfer+0xc94>
 800625c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e065      	b.n	8006356 <USB_EPStartXfer+0xd60>
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b3e      	cmp	r3, #62	; 0x3e
 8006292:	d81a      	bhi.n	80062ca <USB_EPStartXfer+0xcd4>
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <USB_EPStartXfer+0xcc2>
 80062ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062bc:	b29b      	uxth	r3, r3
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e045      	b.n	8006356 <USB_EPStartXfer+0xd60>
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <USB_EPStartXfer+0xcf8>
 80062e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062e8:	3b01      	subs	r3, #1
 80062ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e025      	b.n	8006356 <USB_EPStartXfer+0xd60>
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d120      	bne.n	8006356 <USB_EPStartXfer+0xd60>
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800632c:	4413      	add	r3, r2
 800632e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	00da      	lsls	r2, r3, #3
 800633a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800633e:	4413      	add	r3, r2
 8006340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d175      	bne.n	8006454 <USB_EPStartXfer+0xe5e>
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006380:	4413      	add	r3, r2
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	00da      	lsls	r2, r3, #3
 800638e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006392:	4413      	add	r3, r2
 8006394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d116      	bne.n	80063d4 <USB_EPStartXfer+0xdde>
 80063a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	e061      	b.n	8006498 <USB_EPStartXfer+0xea2>
 80063d4:	463b      	mov	r3, r7
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b3e      	cmp	r3, #62	; 0x3e
 80063dc:	d81a      	bhi.n	8006414 <USB_EPStartXfer+0xe1e>
 80063de:	463b      	mov	r3, r7
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <USB_EPStartXfer+0xe0c>
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	3301      	adds	r3, #1
 80063fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e041      	b.n	8006498 <USB_EPStartXfer+0xea2>
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <USB_EPStartXfer+0xe42>
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	3b01      	subs	r3, #1
 8006434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643c:	b29b      	uxth	r3, r3
 800643e:	029b      	lsls	r3, r3, #10
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e021      	b.n	8006498 <USB_EPStartXfer+0xea2>
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d11c      	bne.n	8006498 <USB_EPStartXfer+0xea2>
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	00da      	lsls	r2, r3, #3
 800647c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006480:	4413      	add	r3, r2
 8006482:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	b29a      	uxth	r2, r3
 8006492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006496:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 81a4 	beq.w	80067ec <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	463b      	mov	r3, r7
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <USB_EPStartXfer+0xeda>
 80064c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10d      	bne.n	80064ec <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 8187 	bne.w	80067ec <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 8180 	bne.w	80067ec <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]
 8006530:	e15c      	b.n	80067ec <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006532:	463b      	mov	r3, r7
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b01      	cmp	r3, #1
 800653a:	f040 8155 	bne.w	80067e8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d90e      	bls.n	800656c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006562:	1ad2      	subs	r2, r2, r3
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	619a      	str	r2, [r3, #24]
 800656a:	e008      	b.n	800657e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006576:	463b      	mov	r3, r7
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800657e:	463b      	mov	r3, r7
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d16f      	bne.n	8006668 <USB_EPStartXfer+0x1072>
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065a0:	4413      	add	r3, r2
 80065a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00da      	lsls	r2, r3, #3
 80065ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065b2:	4413      	add	r3, r2
 80065b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d116      	bne.n	80065f2 <USB_EPStartXfer+0xffc>
 80065c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e05f      	b.n	80066b2 <USB_EPStartXfer+0x10bc>
 80065f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f6:	2b3e      	cmp	r3, #62	; 0x3e
 80065f8:	d818      	bhi.n	800662c <USB_EPStartXfer+0x1036>
 80065fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <USB_EPStartXfer+0x1024>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	3301      	adds	r3, #1
 8006616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661e:	b29b      	uxth	r3, r3
 8006620:	029b      	lsls	r3, r3, #10
 8006622:	b29a      	uxth	r2, r3
 8006624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e042      	b.n	80066b2 <USB_EPStartXfer+0x10bc>
 800662c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006636:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_EPStartXfer+0x1056>
 8006642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006646:	3b01      	subs	r3, #1
 8006648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	b29b      	uxth	r3, r3
 8006652:	029b      	lsls	r3, r3, #10
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665e:	b29a      	uxth	r2, r3
 8006660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	e024      	b.n	80066b2 <USB_EPStartXfer+0x10bc>
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d11f      	bne.n	80066b2 <USB_EPStartXfer+0x10bc>
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668a:	4413      	add	r3, r2
 800668c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	00da      	lsls	r2, r3, #3
 8006698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800669c:	4413      	add	r3, r2
 800669e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d16f      	bne.n	80067a4 <USB_EPStartXfer+0x11ae>
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066dc:	4413      	add	r3, r2
 80066de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	00da      	lsls	r2, r3, #3
 80066ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d116      	bne.n	800672e <USB_EPStartXfer+0x1138>
 8006700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e05e      	b.n	80067ec <USB_EPStartXfer+0x11f6>
 800672e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006732:	2b3e      	cmp	r3, #62	; 0x3e
 8006734:	d818      	bhi.n	8006768 <USB_EPStartXfer+0x1172>
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <USB_EPStartXfer+0x1160>
 800674c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006750:	3301      	adds	r3, #1
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e041      	b.n	80067ec <USB_EPStartXfer+0x11f6>
 8006768:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_EPStartXfer+0x1192>
 800677e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006782:	3b01      	subs	r3, #1
 8006784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	b29b      	uxth	r3, r3
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e023      	b.n	80067ec <USB_EPStartXfer+0x11f6>
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d11e      	bne.n	80067ec <USB_EPStartXfer+0x11f6>
 80067ae:	1d3b      	adds	r3, r7, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067be:	4413      	add	r3, r2
 80067c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067c4:	463b      	mov	r3, r7
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	00da      	lsls	r2, r3, #3
 80067cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e001      	b.n	80067ec <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e02e      	b.n	800684a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ec:	1d3b      	adds	r3, r7, #4
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800680a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800680e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006812:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006816:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800681a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800681e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d020      	beq.n	80068a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687c:	81bb      	strh	r3, [r7, #12]
 800687e:	89bb      	ldrh	r3, [r7, #12]
 8006880:	f083 0310 	eor.w	r3, r3, #16
 8006884:	81bb      	strh	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	89bb      	ldrh	r3, [r7, #12]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	e01f      	b.n	80068e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	81fb      	strh	r3, [r7, #14]
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068c6:	81fb      	strh	r3, [r7, #14]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b087      	sub	sp, #28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	7b1b      	ldrb	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 809d 	bne.w	8006a44 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d04c      	beq.n	80069ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	823b      	strh	r3, [r7, #16]
 8006920:	8a3b      	ldrh	r3, [r7, #16]
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01b      	beq.n	8006962 <USB_EPClearStall+0x6c>
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	81fb      	strh	r3, [r7, #14]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	78db      	ldrb	r3, [r3, #3]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d06c      	beq.n	8006a44 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	81bb      	strh	r3, [r7, #12]
 8006982:	89bb      	ldrh	r3, [r7, #12]
 8006984:	f083 0320 	eor.w	r3, r3, #32
 8006988:	81bb      	strh	r3, [r7, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	89bb      	ldrh	r3, [r7, #12]
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]
 80069aa:	e04b      	b.n	8006a44 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	82fb      	strh	r3, [r7, #22]
 80069ba:	8afb      	ldrh	r3, [r7, #22]
 80069bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01b      	beq.n	80069fc <USB_EPClearStall+0x106>
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	82bb      	strh	r3, [r7, #20]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	8abb      	ldrh	r3, [r7, #20]
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	827b      	strh	r3, [r7, #18]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a1a:	827b      	strh	r3, [r7, #18]
 8006a1c:	8a7b      	ldrh	r3, [r7, #18]
 8006a1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a22:	827b      	strh	r3, [r7, #18]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8a7b      	ldrh	r3, [r7, #18]
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b08d      	sub	sp, #52	; 0x34
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	4611      	mov	r1, r2
 8006b16:	461a      	mov	r2, r3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	80fb      	strh	r3, [r7, #6]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b40:	e01b      	b.n	8006b7a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	3301      	adds	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	3b01      	subs	r3, #1
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e0      	bne.n	8006b42 <USB_WritePMA+0x38>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3734      	adds	r7, #52	; 0x34
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08b      	sub	sp, #44	; 0x2c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	80fb      	strh	r3, [r7, #6]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ba2:	88bb      	ldrh	r3, [r7, #4]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bbc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	e018      	b.n	8006bf6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3301      	adds	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e3      	bne.n	8006bc4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bfc:	88bb      	ldrh	r3, [r7, #4]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	701a      	strb	r2, [r3, #0]
  }
}
 8006c18:	bf00      	nop
 8006c1a:	372c      	adds	r7, #44	; 0x2c
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c34:	f002 f968 	bl	8008f08 <malloc>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e066      	b.n	8006d1c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7c1b      	ldrb	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d119      	bne.n	8006c92 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c62:	2202      	movs	r2, #2
 8006c64:	2181      	movs	r1, #129	; 0x81
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 ff20 	bl	8008aac <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	2202      	movs	r2, #2
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 ff16 	bl	8008aac <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c90:	e016      	b.n	8006cc0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	2202      	movs	r2, #2
 8006c96:	2181      	movs	r1, #129	; 0x81
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 ff07 	bl	8008aac <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fefe 	bl	8008aac <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	2182      	movs	r1, #130	; 0x82
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fef0 	bl	8008aac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7c1b      	ldrb	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f002 f84e 	bl	8008da4 <USBD_LL_PrepareReceive>
 8006d08:	e007      	b.n	8006d1a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f002 f845 	bl	8008da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d30:	2181      	movs	r1, #129	; 0x81
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fef8 	bl	8008b28 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d3e:	2101      	movs	r1, #1
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fef1 	bl	8008b28 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d4e:	2182      	movs	r1, #130	; 0x82
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fee9 	bl	8008b28 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 f8c9 	bl	8008f18 <free>
    pdev->pClassData = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <USBD_CDC_Setup+0xa0>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	f040 8097 	bne.w	8006ef6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	88db      	ldrh	r3, [r3, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d029      	beq.n	8006e24 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b25b      	sxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da11      	bge.n	8006dfe <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006de6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	88d2      	ldrh	r2, [r2, #6]
 8006dec:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dee:	6939      	ldr	r1, [r7, #16]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	88db      	ldrh	r3, [r3, #6]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fa5d 	bl	80082b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dfc:	e082      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	785a      	ldrb	r2, [r3, #1]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e14:	6939      	ldr	r1, [r7, #16]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fa76 	bl	800830e <USBD_CtlPrepareRx>
      break;
 8006e22:	e06f      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	7850      	ldrb	r0, [r2, #1]
 8006e30:	2200      	movs	r2, #0
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	4798      	blx	r3
      break;
 8006e36:	e065      	b.n	8006f04 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	d84f      	bhi.n	8006ee0 <USBD_CDC_Setup+0x148>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBD_CDC_Setup+0xb0>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006eef 	.word	0x08006eef
 8006e50:	08006ee1 	.word	0x08006ee1
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006ee1 	.word	0x08006ee1
 8006e5c:	08006ee1 	.word	0x08006ee1
 8006e60:	08006ee1 	.word	0x08006ee1
 8006e64:	08006ee1 	.word	0x08006ee1
 8006e68:	08006ee1 	.word	0x08006ee1
 8006e6c:	08006ee1 	.word	0x08006ee1
 8006e70:	08006ea1 	.word	0x08006ea1
 8006e74:	08006ec9 	.word	0x08006ec9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d107      	bne.n	8006e92 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	2202      	movs	r2, #2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fa13 	bl	80082b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e90:	e030      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f99d 	bl	80081d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9e:	e029      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d107      	bne.n	8006eba <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eaa:	f107 030f 	add.w	r3, r7, #15
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f9ff 	bl	80082b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb8:	e01c      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f989 	bl	80081d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec6:	e015      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d00f      	beq.n	8006ef2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f97d 	bl	80081d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eda:	2303      	movs	r3, #3
 8006edc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ede:	e008      	b.n	8006ef2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f976 	bl	80081d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	75fb      	strb	r3, [r7, #23]
          break;
 8006eec:	e002      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
          break;
 8006eee:	bf00      	nop
 8006ef0:	e008      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
          break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e006      	b.n	8006f04 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f96b 	bl	80081d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	75fb      	strb	r3, [r7, #23]
      break;
 8006f02:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop

08006f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e04f      	b.n	8006fd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3318      	adds	r3, #24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d029      	beq.n	8006fa4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3318      	adds	r3, #24
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	78f9      	ldrb	r1, [r7, #3]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	460b      	mov	r3, r1
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4403      	add	r3, r0
 8006f70:	3338      	adds	r3, #56	; 0x38
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f78:	fb03 f301 	mul.w	r3, r3, r1
 8006f7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d110      	bne.n	8006fa4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3318      	adds	r3, #24
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f96:	78f9      	ldrb	r1, [r7, #3]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fec9 	bl	8008d34 <USBD_LL_Transmit>
 8006fa2:	e015      	b.n	8006fd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e015      	b.n	8007028 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 ff07 	bl	8008e14 <USBD_LL_GetRxDataSize>
 8007006:	4602      	mov	r2, r0
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007022:	4611      	mov	r1, r2
 8007024:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800703e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <USBD_CDC_EP0_RxReady+0x46>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007050:	2bff      	cmp	r3, #255	; 0xff
 8007052:	d010      	beq.n	8007076 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007062:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800706a:	b292      	uxth	r2, r2
 800706c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2243      	movs	r2, #67	; 0x43
 800708c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000094 	.word	0x20000094

080070a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2243      	movs	r2, #67	; 0x43
 80070ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000050 	.word	0x20000050

080070c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2243      	movs	r2, #67	; 0x43
 80070cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200000d8 	.word	0x200000d8

080070e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	220a      	movs	r2, #10
 80070ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	2000000c 	.word	0x2000000c

08007100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007110:	2303      	movs	r3, #3
 8007112:	e004      	b.n	800711e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800716c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	e016      	b.n	80071d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7c1b      	ldrb	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b4:	2101      	movs	r1, #1
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fdf4 	bl	8008da4 <USBD_LL_PrepareReceive>
 80071bc:	e007      	b.n	80071ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071c4:	2340      	movs	r3, #64	; 0x40
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fdeb 	bl	8008da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e01f      	b.n	8007230 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	79fa      	ldrb	r2, [r7, #7]
 8007222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f001 fbad 	bl	8008984 <USBD_LL_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	e016      	b.n	800727e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	f107 020e 	add.w	r2, r7, #14
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	4602      	mov	r2, r0
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fbda 	bl	8008a48 <USBD_LL_Start>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	4611      	mov	r1, r2
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
  }

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 ff16 	bl	8008160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2b01      	cmp	r3, #1
 8007356:	d00e      	beq.n	8007376 <USBD_LL_SetupStage+0x5a>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d302      	bcc.n	8007362 <USBD_LL_SetupStage+0x46>
 800735c:	2b02      	cmp	r3, #2
 800735e:	d014      	beq.n	800738a <USBD_LL_SetupStage+0x6e>
 8007360:	e01d      	b.n	800739e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9d6 	bl	800771c <USBD_StdDevReq>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
      break;
 8007374:	e020      	b.n	80073b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa3a 	bl	80077f8 <USBD_StdItfReq>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]
      break;
 8007388:	e016      	b.n	80073b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa76 	bl	8007884 <USBD_StdEPReq>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
      break;
 800739c:	e00c      	b.n	80073b8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fbf1 	bl	8008b94 <USBD_LL_StallEP>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
      break;
 80073b6:	bf00      	nop
  }

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	460b      	mov	r3, r1
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d137      	bne.n	8007446 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d14a      	bne.n	800747e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d913      	bls.n	800741c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	1ad2      	subs	r2, r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4293      	cmp	r3, r2
 800740c:	bf28      	it	cs
 800740e:	4613      	movcs	r3, r2
 8007410:	461a      	mov	r2, r3
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 ff97 	bl	8008348 <USBD_CtlContinueRx>
 800741a:	e030      	b.n	800747e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800742e:	2b03      	cmp	r3, #3
 8007430:	d105      	bne.n	800743e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 ff93 	bl	800836a <USBD_CtlSendStatus>
 8007444:	e01b      	b.n	800747e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007458:	2b03      	cmp	r3, #3
 800745a:	d10e      	bne.n	800747a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	7afa      	ldrb	r2, [r7, #11]
 8007466:	4611      	mov	r1, r2
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	4798      	blx	r3
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	e002      	b.n	8007480 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	e000      	b.n	8007480 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	460b      	mov	r3, r1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d16a      	bne.n	8007572 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3314      	adds	r3, #20
 80074a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d155      	bne.n	8007558 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d914      	bls.n	80074e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 ff0c 	bl	80082ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 fc62 	bl	8008da4 <USBD_LL_PrepareReceive>
 80074e0:	e03a      	b.n	8007558 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d11c      	bne.n	8007528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d316      	bcc.n	8007528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007504:	429a      	cmp	r2, r3
 8007506:	d20f      	bcs.n	8007528 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 feed 	bl	80082ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800751a:	2300      	movs	r3, #0
 800751c:	2200      	movs	r2, #0
 800751e:	2100      	movs	r1, #0
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fc3f 	bl	8008da4 <USBD_LL_PrepareReceive>
 8007526:	e017      	b.n	8007558 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800753a:	2b03      	cmp	r3, #3
 800753c:	d105      	bne.n	800754a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f001 fb21 	bl	8008b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 ff1c 	bl	8008390 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d123      	bne.n	80075aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff fe9b 	bl	800729e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007570:	e01b      	b.n	80075aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d013      	beq.n	80075a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007584:	2b03      	cmp	r3, #3
 8007586:	d10e      	bne.n	80075a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	7afa      	ldrb	r2, [r7, #11]
 8007592:	4611      	mov	r1, r2
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	e002      	b.n	80075ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e000      	b.n	80075ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6852      	ldr	r2, [r2, #4]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	4611      	mov	r1, r2
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	2200      	movs	r2, #0
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fa54 	bl	8008aac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007614:	2340      	movs	r3, #64	; 0x40
 8007616:	2200      	movs	r2, #0
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fa46 	bl	8008aac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2240      	movs	r2, #64	; 0x40
 800762a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2204      	movs	r2, #4
 800766e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768e:	2b04      	cmp	r3, #4
 8007690:	d105      	bne.n	800769e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d10b      	bne.n	80076d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3301      	adds	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076fe:	8a3b      	ldrh	r3, [r7, #16]
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	b21a      	sxth	r2, r3
 8007704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007708:	4313      	orrs	r3, r2
 800770a:	b21b      	sxth	r3, r3
 800770c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800770e:	89fb      	ldrh	r3, [r7, #14]
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007732:	2b20      	cmp	r3, #32
 8007734:	d004      	beq.n	8007740 <USBD_StdDevReq+0x24>
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d002      	beq.n	8007740 <USBD_StdDevReq+0x24>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <USBD_StdDevReq+0x38>
 800773e:	e050      	b.n	80077e2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]
    break;
 8007752:	e04b      	b.n	80077ec <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b09      	cmp	r3, #9
 800775a:	d83c      	bhi.n	80077d6 <USBD_StdDevReq+0xba>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_StdDevReq+0x48>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	080077b9 	.word	0x080077b9
 8007768:	080077cd 	.word	0x080077cd
 800776c:	080077d7 	.word	0x080077d7
 8007770:	080077c3 	.word	0x080077c3
 8007774:	080077d7 	.word	0x080077d7
 8007778:	08007797 	.word	0x08007797
 800777c:	0800778d 	.word	0x0800778d
 8007780:	080077d7 	.word	0x080077d7
 8007784:	080077af 	.word	0x080077af
 8007788:	080077a1 	.word	0x080077a1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9d0 	bl	8007b34 <USBD_GetDescriptor>
      break;
 8007794:	e024      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fb5f 	bl	8007e5c <USBD_SetAddress>
      break;
 800779e:	e01f      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb9c 	bl	8007ee0 <USBD_SetConfig>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
      break;
 80077ac:	e018      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc39 	bl	8008028 <USBD_GetConfig>
      break;
 80077b6:	e013      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fc68 	bl	8008090 <USBD_GetStatus>
      break;
 80077c0:	e00e      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fc96 	bl	80080f6 <USBD_SetFeature>
      break;
 80077ca:	e009      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fca5 	bl	800811e <USBD_ClrFeature>
      break;
 80077d4:	e004      	b.n	80077e0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fcfb 	bl	80081d4 <USBD_CtlError>
      break;
 80077de:	bf00      	nop
    }
    break;
 80077e0:	e004      	b.n	80077ec <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fcf5 	bl	80081d4 <USBD_CtlError>
    break;
 80077ea:	bf00      	nop
  }

  return ret;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop

080077f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780e:	2b20      	cmp	r3, #32
 8007810:	d003      	beq.n	800781a <USBD_StdItfReq+0x22>
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d001      	beq.n	800781a <USBD_StdItfReq+0x22>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d12a      	bne.n	8007870 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007820:	3b01      	subs	r3, #1
 8007822:	2b02      	cmp	r3, #2
 8007824:	d81d      	bhi.n	8007862 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d813      	bhi.n	8007858 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	88db      	ldrh	r3, [r3, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d110      	bne.n	800786c <USBD_StdItfReq+0x74>
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10d      	bne.n	800786c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd8a 	bl	800836a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007856:	e009      	b.n	800786c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fcba 	bl	80081d4 <USBD_CtlError>
      break;
 8007860:	e004      	b.n	800786c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fcb5 	bl	80081d4 <USBD_CtlError>
      break;
 800786a:	e000      	b.n	800786e <USBD_StdItfReq+0x76>
      break;
 800786c:	bf00      	nop
    }
    break;
 800786e:	e004      	b.n	800787a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fcae 	bl	80081d4 <USBD_CtlError>
    break;
 8007878:	bf00      	nop
  }

  return ret;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d004      	beq.n	80078ae <USBD_StdEPReq+0x2a>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d002      	beq.n	80078ae <USBD_StdEPReq+0x2a>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <USBD_StdEPReq+0x3e>
 80078ac:	e137      	b.n	8007b1e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
    break;
 80078c0:	e132      	b.n	8007b28 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d03e      	beq.n	8007948 <USBD_StdEPReq+0xc4>
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d002      	beq.n	80078d4 <USBD_StdEPReq+0x50>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d079      	beq.n	80079c6 <USBD_StdEPReq+0x142>
 80078d2:	e11e      	b.n	8007b12 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d002      	beq.n	80078e4 <USBD_StdEPReq+0x60>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d015      	beq.n	800790e <USBD_StdEPReq+0x8a>
 80078e2:	e02b      	b.n	800793c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <USBD_StdEPReq+0x80>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d009      	beq.n	8007904 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f94d 	bl	8008b94 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078fa:	2180      	movs	r1, #128	; 0x80
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f949 	bl	8008b94 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007902:	e020      	b.n	8007946 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc64 	bl	80081d4 <USBD_CtlError>
        break;
 800790c:	e01b      	b.n	8007946 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10e      	bne.n	8007934 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_StdEPReq+0xb0>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d008      	beq.n	8007934 <USBD_StdEPReq+0xb0>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 f930 	bl	8008b94 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd18 	bl	800836a <USBD_CtlSendStatus>

        break;
 800793a:	e004      	b.n	8007946 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fc48 	bl	80081d4 <USBD_CtlError>
        break;
 8007944:	bf00      	nop
      }
      break;
 8007946:	e0e9      	b.n	8007b1c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794e:	2b02      	cmp	r3, #2
 8007950:	d002      	beq.n	8007958 <USBD_StdEPReq+0xd4>
 8007952:	2b03      	cmp	r3, #3
 8007954:	d015      	beq.n	8007982 <USBD_StdEPReq+0xfe>
 8007956:	e02f      	b.n	80079b8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <USBD_StdEPReq+0xf4>
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d009      	beq.n	8007978 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 f913 	bl	8008b94 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f90f 	bl	8008b94 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007976:	e025      	b.n	80079c4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fc2a 	bl	80081d4 <USBD_CtlError>
        break;
 8007980:	e020      	b.n	80079c4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d11b      	bne.n	80079c2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f931 	bl	8008c00 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fce3 	bl	800836a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079b6:	e004      	b.n	80079c2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fc0a 	bl	80081d4 <USBD_CtlError>
        break;
 80079c0:	e000      	b.n	80079c4 <USBD_StdEPReq+0x140>
        break;
 80079c2:	bf00      	nop
      }
      break;
 80079c4:	e0aa      	b.n	8007b1c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d002      	beq.n	80079d6 <USBD_StdEPReq+0x152>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d032      	beq.n	8007a3a <USBD_StdEPReq+0x1b6>
 80079d4:	e097      	b.n	8007b06 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <USBD_StdEPReq+0x168>
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d004      	beq.n	80079ec <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fbf5 	bl	80081d4 <USBD_CtlError>
          break;
 80079ea:	e091      	b.n	8007b10 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0b      	bge.n	8007a0c <USBD_StdEPReq+0x188>
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	3310      	adds	r3, #16
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	e00b      	b.n	8007a24 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fc3f 	bl	80082b6 <USBD_CtlSendData>
        break;
 8007a38:	e06a      	b.n	8007b10 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da11      	bge.n	8007a66 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	f003 020f 	and.w	r2, r3, #15
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	440b      	add	r3, r1
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d117      	bne.n	8007a8c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fbb8 	bl	80081d4 <USBD_CtlError>
            break;
 8007a64:	e054      	b.n	8007b10 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	f003 020f 	and.w	r2, r3, #15
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fba5 	bl	80081d4 <USBD_CtlError>
            break;
 8007a8a:	e041      	b.n	8007b10 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da0b      	bge.n	8007aac <USBD_StdEPReq+0x228>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	3310      	adds	r3, #16
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	e00b      	b.n	8007ac4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <USBD_StdEPReq+0x24e>
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b80      	cmp	r3, #128	; 0x80
 8007ad0:	d103      	bne.n	8007ada <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e00e      	b.n	8007af8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 f8c4 	bl	8008c6c <USBD_LL_IsStallEP>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2202      	movs	r2, #2
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fbd9 	bl	80082b6 <USBD_CtlSendData>
          break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb63 	bl	80081d4 <USBD_CtlError>
        break;
 8007b0e:	bf00      	nop
      }
      break;
 8007b10:	e004      	b.n	8007b1c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fb5d 	bl	80081d4 <USBD_CtlError>
      break;
 8007b1a:	bf00      	nop
    }
    break;
 8007b1c:	e004      	b.n	8007b28 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fb57 	bl	80081d4 <USBD_CtlError>
    break;
 8007b26:	bf00      	nop
  }

  return ret;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	885b      	ldrh	r3, [r3, #2]
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	2b0e      	cmp	r3, #14
 8007b56:	f200 8152 	bhi.w	8007dfe <USBD_GetDescriptor+0x2ca>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <USBD_GetDescriptor+0x2c>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007bd1 	.word	0x08007bd1
 8007b64:	08007be9 	.word	0x08007be9
 8007b68:	08007c29 	.word	0x08007c29
 8007b6c:	08007dff 	.word	0x08007dff
 8007b70:	08007dff 	.word	0x08007dff
 8007b74:	08007d9f 	.word	0x08007d9f
 8007b78:	08007dcb 	.word	0x08007dcb
 8007b7c:	08007dff 	.word	0x08007dff
 8007b80:	08007dff 	.word	0x08007dff
 8007b84:	08007dff 	.word	0x08007dff
 8007b88:	08007dff 	.word	0x08007dff
 8007b8c:	08007dff 	.word	0x08007dff
 8007b90:	08007dff 	.word	0x08007dff
 8007b94:	08007dff 	.word	0x08007dff
 8007b98:	08007b9d 	.word	0x08007b9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007bbe:	e126      	b.n	8007e0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fb06 	bl	80081d4 <USBD_CtlError>
      err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
    break;
 8007bce:	e11e      	b.n	8007e0e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
    break;
 8007be6:	e112      	b.n	8007e0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7c1b      	ldrb	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	f107 0208 	add.w	r2, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	2202      	movs	r2, #2
 8007c08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c0a:	e100      	b.n	8007e0e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	f107 0208 	add.w	r2, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	2202      	movs	r2, #2
 8007c24:	701a      	strb	r2, [r3, #0]
    break;
 8007c26:	e0f2      	b.n	8007e0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	f200 80ac 	bhi.w	8007d8c <USBD_GetDescriptor+0x258>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <USBD_GetDescriptor+0x108>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c55 	.word	0x08007c55
 8007c40:	08007c89 	.word	0x08007c89
 8007c44:	08007cbd 	.word	0x08007cbd
 8007c48:	08007cf1 	.word	0x08007cf1
 8007c4c:	08007d25 	.word	0x08007d25
 8007c50:	08007d59 	.word	0x08007d59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c76:	e091      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 faaa 	bl	80081d4 <USBD_CtlError>
        err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
      break;
 8007c86:	e089      	b.n	8007d9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007caa:	e077      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa90 	bl	80081d4 <USBD_CtlError>
        err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cba:	e06f      	b.n	8007d9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cde:	e05d      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa76 	bl	80081d4 <USBD_CtlError>
        err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
      break;
 8007cee:	e055      	b.n	8007d9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d12:	e043      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa5c 	bl	80081d4 <USBD_CtlError>
        err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
      break;
 8007d22:	e03b      	b.n	8007d9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d46:	e029      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa42 	bl	80081d4 <USBD_CtlError>
        err++;
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	3301      	adds	r3, #1
 8007d54:	72fb      	strb	r3, [r7, #11]
      break;
 8007d56:	e021      	b.n	8007d9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d7a:	e00f      	b.n	8007d9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa28 	bl	80081d4 <USBD_CtlError>
        err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
      break;
 8007d8a:	e007      	b.n	8007d9c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa20 	bl	80081d4 <USBD_CtlError>
      err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d9a:	bf00      	nop
    }
    break;
 8007d9c:	e037      	b.n	8007e0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7c1b      	ldrb	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	f107 0208 	add.w	r2, r7, #8
 8007db2:	4610      	mov	r0, r2
 8007db4:	4798      	blx	r3
 8007db6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007db8:	e029      	b.n	8007e0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa09 	bl	80081d4 <USBD_CtlError>
      err++;
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	72fb      	strb	r3, [r7, #11]
    break;
 8007dc8:	e021      	b.n	8007e0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7c1b      	ldrb	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10d      	bne.n	8007dee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	4610      	mov	r0, r2
 8007de0:	4798      	blx	r3
 8007de2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	2207      	movs	r2, #7
 8007dea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007dec:	e00f      	b.n	8007e0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9ef 	bl	80081d4 <USBD_CtlError>
      err++;
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	72fb      	strb	r3, [r7, #11]
    break;
 8007dfc:	e007      	b.n	8007e0e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9e7 	bl	80081d4 <USBD_CtlError>
    err++;
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e0c:	bf00      	nop
  }

  if (err != 0U)
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11e      	bne.n	8007e52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d016      	beq.n	8007e4a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007e1c:	893b      	ldrh	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00e      	beq.n	8007e40 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	88da      	ldrh	r2, [r3, #6]
 8007e26:	893b      	ldrh	r3, [r7, #8]
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	bf28      	it	cs
 8007e2c:	4613      	movcs	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa3c 	bl	80082b6 <USBD_CtlSendData>
 8007e3e:	e009      	b.n	8007e54 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9c6 	bl	80081d4 <USBD_CtlError>
 8007e48:	e004      	b.n	8007e54 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa8d 	bl	800836a <USBD_CtlSendStatus>
 8007e50:	e000      	b.n	8007e54 <USBD_GetDescriptor+0x320>
    return;
 8007e52:	bf00      	nop
    }
  }
}
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop

08007e5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	889b      	ldrh	r3, [r3, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d130      	bne.n	8007ed0 <USBD_SetAddress+0x74>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d12c      	bne.n	8007ed0 <USBD_SetAddress+0x74>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e7c:	d828      	bhi.n	8007ed0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d104      	bne.n	8007e9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f99c 	bl	80081d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9c:	e01c      	b.n	8007ed8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7bfa      	ldrb	r2, [r7, #15]
 8007ea2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 ff0c 	bl	8008cc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa5a 	bl	800836a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec4:	e008      	b.n	8007ed8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	e003      	b.n	8007ed8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f97e 	bl	80081d4 <USBD_CtlError>
  }
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	4b4b      	ldr	r3, [pc, #300]	; (8008024 <USBD_SetConfig+0x144>)
 8007ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ef8:	4b4a      	ldr	r3, [pc, #296]	; (8008024 <USBD_SetConfig+0x144>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d905      	bls.n	8007f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f966 	bl	80081d4 <USBD_CtlError>
    return USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e087      	b.n	800801c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d002      	beq.n	8007f1c <USBD_SetConfig+0x3c>
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d025      	beq.n	8007f66 <USBD_SetConfig+0x86>
 8007f1a:	e071      	b.n	8008000 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f1c:	4b41      	ldr	r3, [pc, #260]	; (8008024 <USBD_SetConfig+0x144>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01c      	beq.n	8007f5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007f24:	4b3f      	ldr	r3, [pc, #252]	; (8008024 <USBD_SetConfig+0x144>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f2e:	4b3d      	ldr	r3, [pc, #244]	; (8008024 <USBD_SetConfig+0x144>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff f9bd 	bl	80072b4 <USBD_SetClassConfig>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f944 	bl	80081d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f4c:	e065      	b.n	800801a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa0b 	bl	800836a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2203      	movs	r2, #3
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f5c:	e05d      	b.n	800801a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa03 	bl	800836a <USBD_CtlSendStatus>
    break;
 8007f64:	e059      	b.n	800801a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <USBD_SetConfig+0x144>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d112      	bne.n	8007f94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f76:	4b2b      	ldr	r3, [pc, #172]	; (8008024 <USBD_SetConfig+0x144>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f80:	4b28      	ldr	r3, [pc, #160]	; (8008024 <USBD_SetConfig+0x144>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f9b0 	bl	80072ec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9ec 	bl	800836a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f92:	e042      	b.n	800801a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <USBD_SetConfig+0x144>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d02a      	beq.n	8007ff8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff f99e 	bl	80072ec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <USBD_SetConfig+0x144>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fba:	4b1a      	ldr	r3, [pc, #104]	; (8008024 <USBD_SetConfig+0x144>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff f977 	bl	80072b4 <USBD_SetClassConfig>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00f      	beq.n	8007ff0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8fe 	bl	80081d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff f983 	bl	80072ec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fee:	e014      	b.n	800801a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9ba 	bl	800836a <USBD_CtlSendStatus>
    break;
 8007ff6:	e010      	b.n	800801a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9b6 	bl	800836a <USBD_CtlSendStatus>
    break;
 8007ffe:	e00c      	b.n	800801a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8e6 	bl	80081d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <USBD_SetConfig+0x144>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff f96c 	bl	80072ec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	73fb      	strb	r3, [r7, #15]
    break;
 8008018:	bf00      	nop
  }

  return ret;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000214 	.word	0x20000214

08008028 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	88db      	ldrh	r3, [r3, #6]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d004      	beq.n	8008044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8c9 	bl	80081d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008042:	e021      	b.n	8008088 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804a:	2b01      	cmp	r3, #1
 800804c:	db17      	blt.n	800807e <USBD_GetConfig+0x56>
 800804e:	2b02      	cmp	r3, #2
 8008050:	dd02      	ble.n	8008058 <USBD_GetConfig+0x30>
 8008052:	2b03      	cmp	r3, #3
 8008054:	d00b      	beq.n	800806e <USBD_GetConfig+0x46>
 8008056:	e012      	b.n	800807e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3308      	adds	r3, #8
 8008062:	2201      	movs	r2, #1
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f925 	bl	80082b6 <USBD_CtlSendData>
      break;
 800806c:	e00c      	b.n	8008088 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	2201      	movs	r2, #1
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f91d 	bl	80082b6 <USBD_CtlSendData>
      break;
 800807c:	e004      	b.n	8008088 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8a7 	bl	80081d4 <USBD_CtlError>
      break;
 8008086:	bf00      	nop
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d81e      	bhi.n	80080e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88db      	ldrh	r3, [r3, #6]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d004      	beq.n	80080b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f88f 	bl	80081d4 <USBD_CtlError>
      break;
 80080b6:	e01a      	b.n	80080ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f043 0202 	orr.w	r2, r3, #2
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	330c      	adds	r3, #12
 80080d8:	2202      	movs	r2, #2
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8ea 	bl	80082b6 <USBD_CtlSendData>
    break;
 80080e2:	e004      	b.n	80080ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f874 	bl	80081d4 <USBD_CtlError>
    break;
 80080ec:	bf00      	nop
  }
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	885b      	ldrh	r3, [r3, #2]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d106      	bne.n	8008116 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f92a 	bl	800836a <USBD_CtlSendStatus>
  }
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812e:	3b01      	subs	r3, #1
 8008130:	2b02      	cmp	r3, #2
 8008132:	d80b      	bhi.n	800814c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	885b      	ldrh	r3, [r3, #2]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d10c      	bne.n	8008156 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f910 	bl	800836a <USBD_CtlSendStatus>
      }
      break;
 800814a:	e004      	b.n	8008156 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f840 	bl	80081d4 <USBD_CtlError>
      break;
 8008154:	e000      	b.n	8008158 <USBD_ClrFeature+0x3a>
      break;
 8008156:	bf00      	nop
  }
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff faa8 	bl	80076e0 <SWAPBYTE>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fa9b 	bl	80076e0 <SWAPBYTE>
 80081aa:	4603      	mov	r3, r0
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff fa8e 	bl	80076e0 <SWAPBYTE>
 80081c4:	4603      	mov	r3, r0
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	80da      	strh	r2, [r3, #6]
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081de:	2180      	movs	r1, #128	; 0x80
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fcd7 	bl	8008b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081e6:	2100      	movs	r1, #0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fcd3 	bl	8008b94 <USBD_LL_StallEP>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d036      	beq.n	800827a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008210:	6938      	ldr	r0, [r7, #16]
 8008212:	f000 f836 	bl	8008282 <USBD_GetLen>
 8008216:	4603      	mov	r3, r0
 8008218:	3301      	adds	r3, #1
 800821a:	b29b      	uxth	r3, r3
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	7812      	ldrb	r2, [r2, #0]
 800822e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	3301      	adds	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	4413      	add	r3, r2
 800823c:	2203      	movs	r2, #3
 800823e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	3301      	adds	r3, #1
 8008244:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008246:	e013      	b.n	8008270 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	7812      	ldrb	r2, [r2, #0]
 8008252:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3301      	adds	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
    idx++;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	3301      	adds	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
    idx++;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	3301      	adds	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e7      	bne.n	8008248 <USBD_GetString+0x52>
 8008278:	e000      	b.n	800827c <USBD_GetString+0x86>
    return;
 800827a:	bf00      	nop
  }
}
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008292:	e005      	b.n	80082a0 <USBD_GetLen+0x1e>
  {
    len++;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	3301      	adds	r3, #1
 8008298:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	3301      	adds	r3, #1
 800829e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f5      	bne.n	8008294 <USBD_GetLen+0x12>
  }

  return len;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fd29 	bl	8008d34 <USBD_LL_Transmit>

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	2100      	movs	r1, #0
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fd18 	bl	8008d34 <USBD_LL_Transmit>

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2203      	movs	r2, #3
 800831e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	2100      	movs	r1, #0
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fd33 	bl	8008da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	2100      	movs	r1, #0
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fd22 	bl	8008da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2204      	movs	r2, #4
 8008376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800837a:	2300      	movs	r3, #0
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fcd7 	bl	8008d34 <USBD_LL_Transmit>

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2205      	movs	r2, #5
 800839c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083a0:	2300      	movs	r3, #0
 80083a2:	2200      	movs	r2, #0
 80083a4:	2100      	movs	r1, #0
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fcfc 	bl	8008da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083bc:	2200      	movs	r2, #0
 80083be:	4912      	ldr	r1, [pc, #72]	; (8008408 <MX_USB_DEVICE_Init+0x50>)
 80083c0:	4812      	ldr	r0, [pc, #72]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe ff09 	bl	80071d8 <USBD_Init>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083cc:	f7f8 facb 	bl	8000966 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083d0:	490f      	ldr	r1, [pc, #60]	; (8008410 <MX_USB_DEVICE_Init+0x58>)
 80083d2:	480e      	ldr	r0, [pc, #56]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083d4:	f7fe ff30 	bl	8007238 <USBD_RegisterClass>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083de:	f7f8 fac2 	bl	8000966 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083e2:	490c      	ldr	r1, [pc, #48]	; (8008414 <MX_USB_DEVICE_Init+0x5c>)
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083e6:	f7fe fe8b 	bl	8007100 <USBD_CDC_RegisterInterface>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083f0:	f7f8 fab9 	bl	8000966 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083f4:	4805      	ldr	r0, [pc, #20]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083f6:	f7fe ff46 	bl	8007286 <USBD_Start>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008400:	f7f8 fab1 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008404:	bf00      	nop
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000130 	.word	0x20000130
 800840c:	200003b8 	.word	0x200003b8
 8008410:	20000018 	.word	0x20000018
 8008414:	2000011c 	.word	0x2000011c

08008418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800841c:	2200      	movs	r2, #0
 800841e:	4905      	ldr	r1, [pc, #20]	; (8008434 <CDC_Init_FS+0x1c>)
 8008420:	4805      	ldr	r0, [pc, #20]	; (8008438 <CDC_Init_FS+0x20>)
 8008422:	f7fe fe82 	bl	800712a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008426:	4905      	ldr	r1, [pc, #20]	; (800843c <CDC_Init_FS+0x24>)
 8008428:	4803      	ldr	r0, [pc, #12]	; (8008438 <CDC_Init_FS+0x20>)
 800842a:	f7fe fe97 	bl	800715c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800842e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000e88 	.word	0x20000e88
 8008438:	200003b8 	.word	0x200003b8
 800843c:	20000688 	.word	0x20000688

08008440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
 800845c:	4613      	mov	r3, r2
 800845e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b23      	cmp	r3, #35	; 0x23
 8008464:	d84a      	bhi.n	80084fc <CDC_Control_FS+0xac>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <CDC_Control_FS+0x1c>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084fd 	.word	0x080084fd
 8008470:	080084fd 	.word	0x080084fd
 8008474:	080084fd 	.word	0x080084fd
 8008478:	080084fd 	.word	0x080084fd
 800847c:	080084fd 	.word	0x080084fd
 8008480:	080084fd 	.word	0x080084fd
 8008484:	080084fd 	.word	0x080084fd
 8008488:	080084fd 	.word	0x080084fd
 800848c:	080084fd 	.word	0x080084fd
 8008490:	080084fd 	.word	0x080084fd
 8008494:	080084fd 	.word	0x080084fd
 8008498:	080084fd 	.word	0x080084fd
 800849c:	080084fd 	.word	0x080084fd
 80084a0:	080084fd 	.word	0x080084fd
 80084a4:	080084fd 	.word	0x080084fd
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	080084fd 	.word	0x080084fd
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	080084fd 	.word	0x080084fd
 80084bc:	080084fd 	.word	0x080084fd
 80084c0:	080084fd 	.word	0x080084fd
 80084c4:	080084fd 	.word	0x080084fd
 80084c8:	080084fd 	.word	0x080084fd
 80084cc:	080084fd 	.word	0x080084fd
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	080084fd 	.word	0x080084fd
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	080084fd 	.word	0x080084fd
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	080084fd 	.word	0x080084fd
 80084f0:	080084fd 	.word	0x080084fd
 80084f4:	080084fd 	.word	0x080084fd
 80084f8:	080084fd 	.word	0x080084fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084fc:	bf00      	nop
  }

  return (USBD_OK);
 80084fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4805      	ldr	r0, [pc, #20]	; (8008530 <CDC_Receive_FS+0x24>)
 800851a:	f7fe fe1f 	bl	800715c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800851e:	4804      	ldr	r0, [pc, #16]	; (8008530 <CDC_Receive_FS+0x24>)
 8008520:	f7fe fe30 	bl	8007184 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200003b8 	.word	0x200003b8

08008534 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800854a:	4618      	mov	r0, r3
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2212      	movs	r2, #18
 8008568:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800856a:	4b03      	ldr	r3, [pc, #12]	; (8008578 <USBD_FS_DeviceDescriptor+0x20>)
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	20000150 	.word	0x20000150

0800857c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2204      	movs	r2, #4
 800858c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800858e:	4b03      	ldr	r3, [pc, #12]	; (800859c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	20000170 	.word	0x20000170

080085a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d105      	bne.n	80085be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4907      	ldr	r1, [pc, #28]	; (80085d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085b6:	4808      	ldr	r0, [pc, #32]	; (80085d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085b8:	f7ff fe1d 	bl	80081f6 <USBD_GetString>
 80085bc:	e004      	b.n	80085c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4904      	ldr	r1, [pc, #16]	; (80085d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085c2:	4805      	ldr	r0, [pc, #20]	; (80085d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085c4:	f7ff fe17 	bl	80081f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20001688 	.word	0x20001688
 80085d8:	080090c4 	.word	0x080090c4

080085dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085ec:	4804      	ldr	r0, [pc, #16]	; (8008600 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085ee:	f7ff fe02 	bl	80081f6 <USBD_GetString>
  return USBD_StrDesc;
 80085f2:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20001688 	.word	0x20001688
 8008600:	080090d4 	.word	0x080090d4

08008604 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	221a      	movs	r2, #26
 8008614:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008616:	f000 f855 	bl	80086c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800861a:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000174 	.word	0x20000174

08008628 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4907      	ldr	r1, [pc, #28]	; (800865c <USBD_FS_ConfigStrDescriptor+0x34>)
 800863e:	4808      	ldr	r0, [pc, #32]	; (8008660 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008640:	f7ff fdd9 	bl	80081f6 <USBD_GetString>
 8008644:	e004      	b.n	8008650 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4904      	ldr	r1, [pc, #16]	; (800865c <USBD_FS_ConfigStrDescriptor+0x34>)
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800864c:	f7ff fdd3 	bl	80081f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20001688 	.word	0x20001688
 8008660:	080090e8 	.word	0x080090e8

08008664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	4907      	ldr	r1, [pc, #28]	; (8008698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867a:	4808      	ldr	r0, [pc, #32]	; (800869c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800867c:	f7ff fdbb 	bl	80081f6 <USBD_GetString>
 8008680:	e004      	b.n	800868c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4904      	ldr	r1, [pc, #16]	; (8008698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008686:	4805      	ldr	r0, [pc, #20]	; (800869c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008688:	f7ff fdb5 	bl	80081f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20001688 	.word	0x20001688
 800869c:	080090f4 	.word	0x080090f4

080086a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	220c      	movs	r2, #12
 80086b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80086b2:	4b03      	ldr	r3, [pc, #12]	; (80086c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000164 	.word	0x20000164

080086c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <Get_SerialNum+0x44>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <Get_SerialNum+0x48>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <Get_SerialNum+0x4c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ea:	2208      	movs	r2, #8
 80086ec:	4909      	ldr	r1, [pc, #36]	; (8008714 <Get_SerialNum+0x50>)
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f814 	bl	800871c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f4:	2204      	movs	r2, #4
 80086f6:	4908      	ldr	r1, [pc, #32]	; (8008718 <Get_SerialNum+0x54>)
 80086f8:	68b8      	ldr	r0, [r7, #8]
 80086fa:	f000 f80f 	bl	800871c <IntToUnicode>
  }
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	1fff7590 	.word	0x1fff7590
 800870c:	1fff7594 	.word	0x1fff7594
 8008710:	1fff7598 	.word	0x1fff7598
 8008714:	20000176 	.word	0x20000176
 8008718:	20000186 	.word	0x20000186

0800871c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
 8008732:	e027      	b.n	8008784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	2b09      	cmp	r3, #9
 800873a:	d80b      	bhi.n	8008754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0f1b      	lsrs	r3, r3, #28
 8008740:	b2da      	uxtb	r2, r3
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	4619      	mov	r1, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	440b      	add	r3, r1
 800874c:	3230      	adds	r2, #48	; 0x30
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e00a      	b.n	800876a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	0f1b      	lsrs	r3, r3, #28
 8008758:	b2da      	uxtb	r2, r3
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4619      	mov	r1, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	440b      	add	r3, r1
 8008764:	3237      	adds	r2, #55	; 0x37
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	3301      	adds	r3, #1
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	3301      	adds	r3, #1
 8008782:	75fb      	strb	r3, [r7, #23]
 8008784:	7dfa      	ldrb	r2, [r7, #23]
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	429a      	cmp	r2, r3
 800878a:	d3d3      	bcc.n	8008734 <IntToUnicode+0x18>
  }
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1c      	ldr	r2, [pc, #112]	; (8008828 <HAL_PCD_MspInit+0x90>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d131      	bne.n	800881e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ba:	4b1c      	ldr	r3, [pc, #112]	; (800882c <HAL_PCD_MspInit+0x94>)
 80087bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087be:	4a1b      	ldr	r2, [pc, #108]	; (800882c <HAL_PCD_MspInit+0x94>)
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087c6:	4b19      	ldr	r3, [pc, #100]	; (800882c <HAL_PCD_MspInit+0x94>)
 80087c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d8:	2302      	movs	r3, #2
 80087da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087e0:	2303      	movs	r3, #3
 80087e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80087e4:	230a      	movs	r3, #10
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4619      	mov	r1, r3
 80087ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087f2:	f7f8 fc85 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <HAL_PCD_MspInit+0x94>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <HAL_PCD_MspInit+0x94>)
 80087fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008800:	6593      	str	r3, [r2, #88]	; 0x58
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <HAL_PCD_MspInit+0x94>)
 8008804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008806:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	2043      	movs	r0, #67	; 0x43
 8008814:	f7f8 fc3d 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008818:	2043      	movs	r0, #67	; 0x43
 800881a:	f7f8 fc56 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800881e:	bf00      	nop
 8008820:	3728      	adds	r7, #40	; 0x28
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40006800 	.word	0x40006800
 800882c:	40021000 	.word	0x40021000

08008830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fe fd68 	bl	800731c <USBD_LL_SetupStage>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	440b      	add	r3, r1
 8008874:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	4619      	mov	r1, r3
 800887e:	f7fe fda0 	bl	80073c2 <USBD_LL_DataOutStage>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	440b      	add	r3, r1
 80088aa:	333c      	adds	r3, #60	; 0x3c
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7fe fde9 	bl	8007488 <USBD_LL_DataInStage>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe feed 	bl	80076ac <USBD_LL_SOF>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d001      	beq.n	80088f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088ee:	f7f8 f83a 	bl	8000966 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088f8:	7bfa      	ldrb	r2, [r7, #15]
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fe9a 	bl	8007636 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe fe53 	bl	80075b4 <USBD_LL_Reset>
}
 800890e:	bf00      	nop
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fe95 	bl	8007656 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <HAL_PCD_SuspendCallback+0x30>)
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	4a03      	ldr	r2, [pc, #12]	; (8008948 <HAL_PCD_SuspendCallback+0x30>)
 800893a:	f043 0306 	orr.w	r3, r3, #6
 800893e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed00 	.word	0xe000ed00

0800894c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <HAL_PCD_ResumeCallback+0x34>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	4a07      	ldr	r2, [pc, #28]	; (8008980 <HAL_PCD_ResumeCallback+0x34>)
 8008962:	f023 0306 	bic.w	r3, r3, #6
 8008966:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008968:	f000 fa9e 	bl	8008ea8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fe84 	bl	8007680 <USBD_LL_Resume>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	e000ed00 	.word	0xe000ed00

08008984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800898c:	f7fa f954 	bl	8002c38 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008990:	4a2b      	ldr	r2, [pc, #172]	; (8008a40 <USBD_LL_Init+0xbc>)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a29      	ldr	r2, [pc, #164]	; (8008a40 <USBD_LL_Init+0xbc>)
 800899c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80089a0:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089a2:	4a28      	ldr	r2, [pc, #160]	; (8008a44 <USBD_LL_Init+0xc0>)
 80089a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089a6:	4b26      	ldr	r3, [pc, #152]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089a8:	2208      	movs	r2, #8
 80089aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089ae:	2202      	movs	r2, #2
 80089b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089b2:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089b4:	2202      	movs	r2, #2
 80089b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80089b8:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089ca:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089d0:	481b      	ldr	r0, [pc, #108]	; (8008a40 <USBD_LL_Init+0xbc>)
 80089d2:	f7f8 fd27 	bl	8001424 <HAL_PCD_Init>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80089dc:	f7f7 ffc3 	bl	8000966 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089e6:	2318      	movs	r3, #24
 80089e8:	2200      	movs	r2, #0
 80089ea:	2100      	movs	r1, #0
 80089ec:	f7fa f842 	bl	8002a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089f6:	2358      	movs	r3, #88	; 0x58
 80089f8:	2200      	movs	r2, #0
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	f7fa f83a 	bl	8002a74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a06:	23c0      	movs	r3, #192	; 0xc0
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2181      	movs	r1, #129	; 0x81
 8008a0c:	f7fa f832 	bl	8002a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a16:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7fa f829 	bl	8002a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2182      	movs	r1, #130	; 0x82
 8008a30:	f7fa f820 	bl	8002a74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001888 	.word	0x20001888
 8008a44:	40006800 	.word	0x40006800

08008a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f8 fdf2 	bl	8001648 <HAL_PCD_Start>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d816      	bhi.n	8008a9c <USBD_LL_Start+0x54>
 8008a6e:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <USBD_LL_Start+0x2c>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a8b 	.word	0x08008a8b
 8008a7c:	08008a91 	.word	0x08008a91
 8008a80:	08008a97 	.word	0x08008a97
    case HAL_OK :
      usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e00b      	b.n	8008aa2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	e008      	b.n	8008aa2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	e005      	b.n	8008aa2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a96:	2303      	movs	r3, #3
 8008a98:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9a:	e002      	b.n	8008aa2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa0:	bf00      	nop
  }
  return usb_status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	70fb      	strb	r3, [r7, #3]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70bb      	strb	r3, [r7, #2]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ad4:	78bb      	ldrb	r3, [r7, #2]
 8008ad6:	883a      	ldrh	r2, [r7, #0]
 8008ad8:	78f9      	ldrb	r1, [r7, #3]
 8008ada:	f7f8 ff4a 	bl	8001972 <HAL_PCD_EP_Open>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d817      	bhi.n	8008b18 <USBD_LL_OpenEP+0x6c>
 8008ae8:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <USBD_LL_OpenEP+0x44>)
 8008aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aee:	bf00      	nop
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b07 	.word	0x08008b07
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b13 	.word	0x08008b13
    case HAL_OK :
      usb_status = USBD_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
    break;
 8008b04:	e00b      	b.n	8008b1e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b06:	2303      	movs	r3, #3
 8008b08:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0a:	e008      	b.n	8008b1e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b10:	e005      	b.n	8008b1e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	73fb      	strb	r3, [r7, #15]
    break;
 8008b16:	e002      	b.n	8008b1e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1c:	bf00      	nop
  }
  return usb_status;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f8 ff79 	bl	8001a3e <HAL_PCD_EP_Close>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d816      	bhi.n	8008b84 <USBD_LL_CloseEP+0x5c>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_LL_CloseEP+0x34>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008b73 	.word	0x08008b73
 8008b64:	08008b79 	.word	0x08008b79
 8008b68:	08008b7f 	.word	0x08008b7f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	e00b      	b.n	8008b8a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b72:	2303      	movs	r3, #3
 8008b74:	73fb      	strb	r3, [r7, #15]
    break;
 8008b76:	e008      	b.n	8008b8a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7c:	e005      	b.n	8008b8a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	73fb      	strb	r3, [r7, #15]
    break;
 8008b82:	e002      	b.n	8008b8a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b84:	2303      	movs	r3, #3
 8008b86:	73fb      	strb	r3, [r7, #15]
    break;
 8008b88:	bf00      	nop
  }
  return usb_status;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f9 f823 	bl	8001bfe <HAL_PCD_EP_SetStall>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d816      	bhi.n	8008bf0 <USBD_LL_StallEP+0x5c>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <USBD_LL_StallEP+0x34>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bdf 	.word	0x08008bdf
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008beb 	.word	0x08008beb
    case HAL_OK :
      usb_status = USBD_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
    break;
 8008bdc:	e00b      	b.n	8008bf6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bde:	2303      	movs	r3, #3
 8008be0:	73fb      	strb	r3, [r7, #15]
    break;
 8008be2:	e008      	b.n	8008bf6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
    break;
 8008be8:	e005      	b.n	8008bf6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bea:	2303      	movs	r3, #3
 8008bec:	73fb      	strb	r3, [r7, #15]
    break;
 8008bee:	e002      	b.n	8008bf6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf4:	bf00      	nop
  }
  return usb_status;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f9 f84d 	bl	8001cbe <HAL_PCD_EP_ClrStall>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d816      	bhi.n	8008c5c <USBD_LL_ClearStallEP+0x5c>
 8008c2e:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <USBD_LL_ClearStallEP+0x34>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008c4b 	.word	0x08008c4b
 8008c3c:	08008c51 	.word	0x08008c51
 8008c40:	08008c57 	.word	0x08008c57
    case HAL_OK :
      usb_status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e00b      	b.n	8008c62 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e008      	b.n	8008c62 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e005      	b.n	8008c62 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c56:	2303      	movs	r3, #3
 8008c58:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5a:	e002      	b.n	8008c62 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	bf00      	nop
  }
  return usb_status;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da0c      	bge.n	8008ca2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8e:	68f9      	ldr	r1, [r7, #12]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	e00b      	b.n	8008cba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca8:	68f9      	ldr	r1, [r7, #12]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	440b      	add	r3, r1
 8008cb4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008cb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f8 fe1e 	bl	8001928 <HAL_PCD_SetAddress>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d816      	bhi.n	8008d24 <USBD_LL_SetUSBAddress+0x5c>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USBD_LL_SetUSBAddress+0x34>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d13 	.word	0x08008d13
 8008d04:	08008d19 	.word	0x08008d19
 8008d08:	08008d1f 	.word	0x08008d1f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	e00b      	b.n	8008d2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d12:	2303      	movs	r3, #3
 8008d14:	73fb      	strb	r3, [r7, #15]
    break;
 8008d16:	e008      	b.n	8008d2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1c:	e005      	b.n	8008d2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
    break;
 8008d22:	e002      	b.n	8008d2a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	bf00      	nop
  }
  return usb_status;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	460b      	mov	r3, r1
 8008d42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d52:	7af9      	ldrb	r1, [r7, #11]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	f7f8 ff0e 	bl	8001b78 <HAL_PCD_EP_Transmit>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d60:	7dbb      	ldrb	r3, [r7, #22]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d816      	bhi.n	8008d94 <USBD_LL_Transmit+0x60>
 8008d66:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBD_LL_Transmit+0x38>)
 8008d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d83 	.word	0x08008d83
 8008d74:	08008d89 	.word	0x08008d89
 8008d78:	08008d8f 	.word	0x08008d8f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d80:	e00b      	b.n	8008d9a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d82:	2303      	movs	r3, #3
 8008d84:	75fb      	strb	r3, [r7, #23]
    break;
 8008d86:	e008      	b.n	8008d9a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d8c:	e005      	b.n	8008d9a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	75fb      	strb	r3, [r7, #23]
    break;
 8008d92:	e002      	b.n	8008d9a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	75fb      	strb	r3, [r7, #23]
    break;
 8008d98:	bf00      	nop
  }
  return usb_status;
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	607a      	str	r2, [r7, #4]
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	460b      	mov	r3, r1
 8008db2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dc2:	7af9      	ldrb	r1, [r7, #11]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	f7f8 fe81 	bl	8001ace <HAL_PCD_EP_Receive>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d816      	bhi.n	8008e04 <USBD_LL_PrepareReceive+0x60>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <USBD_LL_PrepareReceive+0x38>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008df3 	.word	0x08008df3
 8008de4:	08008df9 	.word	0x08008df9
 8008de8:	08008dff 	.word	0x08008dff
    case HAL_OK :
      usb_status = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	75fb      	strb	r3, [r7, #23]
    break;
 8008df0:	e00b      	b.n	8008e0a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008df2:	2303      	movs	r3, #3
 8008df4:	75fb      	strb	r3, [r7, #23]
    break;
 8008df6:	e008      	b.n	8008e0a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
    break;
 8008dfc:	e005      	b.n	8008e0a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	75fb      	strb	r3, [r7, #23]
    break;
 8008e02:	e002      	b.n	8008e0a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e04:	2303      	movs	r3, #3
 8008e06:	75fb      	strb	r3, [r7, #23]
    break;
 8008e08:	bf00      	nop
  }
  return usb_status;
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f8 fe8c 	bl	8001b48 <HAL_PCD_EP_GetRxCount>
 8008e30:	4603      	mov	r3, r0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <HAL_PCDEx_LPM_Callback+0x18>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d013      	beq.n	8008e7a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e52:	e023      	b.n	8008e9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e5c:	f000 f824 	bl	8008ea8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	4a0f      	ldr	r2, [pc, #60]	; (8008ea4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e66:	f023 0306 	bic.w	r3, r3, #6
 8008e6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fc04 	bl	8007680 <USBD_LL_Resume>
    break;
 8008e78:	e010      	b.n	8008e9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fbe8 	bl	8007656 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e94:	f043 0306 	orr.w	r3, r3, #6
 8008e98:	6113      	str	r3, [r2, #16]
    break;
 8008e9a:	bf00      	nop
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed00 	.word	0xe000ed00

08008ea8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008eac:	f7f7 fb2c 	bl	8000508 <SystemClock_Config>
}
 8008eb0:	bf00      	nop
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000190 	.word	0x20000190

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4e0d      	ldr	r6, [pc, #52]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1ba4      	subs	r4, r4, r6
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2500      	movs	r5, #0
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4e0b      	ldr	r6, [pc, #44]	; (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	; (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f000 f8ea 	bl	80090ac <_init>
 8008ed8:	1ba4      	subs	r4, r4, r6
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2500      	movs	r5, #0
 8008ede:	42a5      	cmp	r5, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee8:	4798      	blx	r3
 8008eea:	3501      	adds	r5, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ef2:	4798      	blx	r3
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	08009154 	.word	0x08009154
 8008efc:	08009154 	.word	0x08009154
 8008f00:	08009154 	.word	0x08009154
 8008f04:	08009158 	.word	0x08009158

08008f08 <malloc>:
 8008f08:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <malloc+0xc>)
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f000 b861 	b.w	8008fd4 <_malloc_r>
 8008f12:	bf00      	nop
 8008f14:	20000190 	.word	0x20000190

08008f18 <free>:
 8008f18:	4b02      	ldr	r3, [pc, #8]	; (8008f24 <free+0xc>)
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f000 b80b 	b.w	8008f38 <_free_r>
 8008f22:	bf00      	nop
 8008f24:	20000190 	.word	0x20000190

08008f28 <memset>:
 8008f28:	4402      	add	r2, r0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d100      	bne.n	8008f32 <memset+0xa>
 8008f30:	4770      	bx	lr
 8008f32:	f803 1b01 	strb.w	r1, [r3], #1
 8008f36:	e7f9      	b.n	8008f2c <memset+0x4>

08008f38 <_free_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d045      	beq.n	8008fcc <_free_r+0x94>
 8008f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f44:	1f0c      	subs	r4, r1, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	18e4      	addlt	r4, r4, r3
 8008f4c:	f000 f8ac 	bl	80090a8 <__malloc_lock>
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <_free_r+0x98>)
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	4610      	mov	r0, r2
 8008f56:	b933      	cbnz	r3, 8008f66 <_free_r+0x2e>
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	6014      	str	r4, [r2, #0]
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f000 b8a2 	b.w	80090aa <__malloc_unlock>
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	d90c      	bls.n	8008f84 <_free_r+0x4c>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	1862      	adds	r2, r4, r1
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bf04      	itt	eq
 8008f72:	681a      	ldreq	r2, [r3, #0]
 8008f74:	685b      	ldreq	r3, [r3, #4]
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	bf04      	itt	eq
 8008f7a:	1852      	addeq	r2, r2, r1
 8008f7c:	6022      	streq	r2, [r4, #0]
 8008f7e:	6004      	str	r4, [r0, #0]
 8008f80:	e7ec      	b.n	8008f5c <_free_r+0x24>
 8008f82:	4613      	mov	r3, r2
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	b10a      	cbz	r2, 8008f8c <_free_r+0x54>
 8008f88:	42a2      	cmp	r2, r4
 8008f8a:	d9fa      	bls.n	8008f82 <_free_r+0x4a>
 8008f8c:	6819      	ldr	r1, [r3, #0]
 8008f8e:	1858      	adds	r0, r3, r1
 8008f90:	42a0      	cmp	r0, r4
 8008f92:	d10b      	bne.n	8008fac <_free_r+0x74>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	4401      	add	r1, r0
 8008f98:	1858      	adds	r0, r3, r1
 8008f9a:	4282      	cmp	r2, r0
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	d1dd      	bne.n	8008f5c <_free_r+0x24>
 8008fa0:	6810      	ldr	r0, [r2, #0]
 8008fa2:	6852      	ldr	r2, [r2, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	4401      	add	r1, r0
 8008fa8:	6019      	str	r1, [r3, #0]
 8008faa:	e7d7      	b.n	8008f5c <_free_r+0x24>
 8008fac:	d902      	bls.n	8008fb4 <_free_r+0x7c>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	e7d3      	b.n	8008f5c <_free_r+0x24>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	1821      	adds	r1, r4, r0
 8008fb8:	428a      	cmp	r2, r1
 8008fba:	bf04      	itt	eq
 8008fbc:	6811      	ldreq	r1, [r2, #0]
 8008fbe:	6852      	ldreq	r2, [r2, #4]
 8008fc0:	6062      	str	r2, [r4, #4]
 8008fc2:	bf04      	itt	eq
 8008fc4:	1809      	addeq	r1, r1, r0
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	605c      	str	r4, [r3, #4]
 8008fca:	e7c7      	b.n	8008f5c <_free_r+0x24>
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000218 	.word	0x20000218

08008fd4 <_malloc_r>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	1ccd      	adds	r5, r1, #3
 8008fd8:	f025 0503 	bic.w	r5, r5, #3
 8008fdc:	3508      	adds	r5, #8
 8008fde:	2d0c      	cmp	r5, #12
 8008fe0:	bf38      	it	cc
 8008fe2:	250c      	movcc	r5, #12
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	db01      	blt.n	8008fee <_malloc_r+0x1a>
 8008fea:	42a9      	cmp	r1, r5
 8008fec:	d903      	bls.n	8008ff6 <_malloc_r+0x22>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
 8008ff6:	f000 f857 	bl	80090a8 <__malloc_lock>
 8008ffa:	4a21      	ldr	r2, [pc, #132]	; (8009080 <_malloc_r+0xac>)
 8008ffc:	6814      	ldr	r4, [r2, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	b991      	cbnz	r1, 8009028 <_malloc_r+0x54>
 8009002:	4c20      	ldr	r4, [pc, #128]	; (8009084 <_malloc_r+0xb0>)
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	b91b      	cbnz	r3, 8009010 <_malloc_r+0x3c>
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f83d 	bl	8009088 <_sbrk_r>
 800900e:	6020      	str	r0, [r4, #0]
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f838 	bl	8009088 <_sbrk_r>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d124      	bne.n	8009066 <_malloc_r+0x92>
 800901c:	230c      	movs	r3, #12
 800901e:	6033      	str	r3, [r6, #0]
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f842 	bl	80090aa <__malloc_unlock>
 8009026:	e7e4      	b.n	8008ff2 <_malloc_r+0x1e>
 8009028:	680b      	ldr	r3, [r1, #0]
 800902a:	1b5b      	subs	r3, r3, r5
 800902c:	d418      	bmi.n	8009060 <_malloc_r+0x8c>
 800902e:	2b0b      	cmp	r3, #11
 8009030:	d90f      	bls.n	8009052 <_malloc_r+0x7e>
 8009032:	600b      	str	r3, [r1, #0]
 8009034:	50cd      	str	r5, [r1, r3]
 8009036:	18cc      	adds	r4, r1, r3
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f836 	bl	80090aa <__malloc_unlock>
 800903e:	f104 000b 	add.w	r0, r4, #11
 8009042:	1d23      	adds	r3, r4, #4
 8009044:	f020 0007 	bic.w	r0, r0, #7
 8009048:	1ac3      	subs	r3, r0, r3
 800904a:	d0d3      	beq.n	8008ff4 <_malloc_r+0x20>
 800904c:	425a      	negs	r2, r3
 800904e:	50e2      	str	r2, [r4, r3]
 8009050:	e7d0      	b.n	8008ff4 <_malloc_r+0x20>
 8009052:	428c      	cmp	r4, r1
 8009054:	684b      	ldr	r3, [r1, #4]
 8009056:	bf16      	itet	ne
 8009058:	6063      	strne	r3, [r4, #4]
 800905a:	6013      	streq	r3, [r2, #0]
 800905c:	460c      	movne	r4, r1
 800905e:	e7eb      	b.n	8009038 <_malloc_r+0x64>
 8009060:	460c      	mov	r4, r1
 8009062:	6849      	ldr	r1, [r1, #4]
 8009064:	e7cc      	b.n	8009000 <_malloc_r+0x2c>
 8009066:	1cc4      	adds	r4, r0, #3
 8009068:	f024 0403 	bic.w	r4, r4, #3
 800906c:	42a0      	cmp	r0, r4
 800906e:	d005      	beq.n	800907c <_malloc_r+0xa8>
 8009070:	1a21      	subs	r1, r4, r0
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f808 	bl	8009088 <_sbrk_r>
 8009078:	3001      	adds	r0, #1
 800907a:	d0cf      	beq.n	800901c <_malloc_r+0x48>
 800907c:	6025      	str	r5, [r4, #0]
 800907e:	e7db      	b.n	8009038 <_malloc_r+0x64>
 8009080:	20000218 	.word	0x20000218
 8009084:	2000021c 	.word	0x2000021c

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4c06      	ldr	r4, [pc, #24]	; (80090a4 <_sbrk_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4605      	mov	r5, r0
 8009090:	4608      	mov	r0, r1
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	f7f7 fe18 	bl	8000cc8 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001b7c 	.word	0x20001b7c

080090a8 <__malloc_lock>:
 80090a8:	4770      	bx	lr

080090aa <__malloc_unlock>:
 80090aa:	4770      	bx	lr

080090ac <_init>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	bf00      	nop
 80090b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b2:	bc08      	pop	{r3}
 80090b4:	469e      	mov	lr, r3
 80090b6:	4770      	bx	lr

080090b8 <_fini>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr
