
self_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ebc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a050  0800a050  0001a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e4  0800a0e4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0e4  0800a0e4  0001a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ec  0800a0ec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ec  0800a0ec  0001a0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0f0  0800a0f0  0001a0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001f4  0800a2e8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800a2e8  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c010  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037a7  00000000  00000000  0003c234  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00040d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002604e  00000000  00000000  00041ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123c7  00000000  00000000  00067f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8bbe  00000000  00000000  0007a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  00152f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a038 	.word	0x0800a038

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	0800a038 	.word	0x0800a038

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fd1c 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f87b 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9e7 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004e6:	f000 f977 	bl	80007d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f9b3 	bl	8000854 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 ff29 	bl	8009344 <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 80004f2:	f000 f907 	bl	8000704 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80004f6:	f000 f931 	bl	800075c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //start up LED sequence
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 80004fa:	4b34      	ldr	r3, [pc, #208]	; (80005cc <main+0xf8>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a33      	ldr	r2, [pc, #204]	; (80005cc <main+0xf8>)
 8000500:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000504:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000506:	20fa      	movs	r0, #250	; 0xfa
 8000508:	f000 fd7a 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0xf8>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <main+0xf8>)
 8000512:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000516:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f000 fd71 	bl	8001000 <HAL_Delay>
  GPIOB->ODR |= (LED1_Pin | LED2_Pin); //mask on both LEDs at once
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <main+0xf8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <main+0xf8>)
 8000524:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000528:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800052a:	20fa      	movs	r0, #250	; 0xfa
 800052c:	f000 fd68 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //mask off both LEDs at once
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0xf8>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <main+0xf8>)
 8000536:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 800053a:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 800053c:	20fa      	movs	r0, #250	; 0xfa
 800053e:	f000 fd5f 	bl	8001000 <HAL_Delay>


  char test_phrase[] = "Testing...";
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <main+0xfc>)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	c303      	stmia	r3!, {r0, r1}
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	3302      	adds	r3, #2
 800054e:	0c12      	lsrs	r2, r2, #16
 8000550:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *) &test_phrase, sizeof test_phrase, HAL_MAX_DELAY);
 8000552:	1d39      	adds	r1, r7, #4
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	220b      	movs	r2, #11
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <main+0x100>)
 800055c:	f004 fdf0 	bl	8005140 <HAL_UART_Transmit>

  uint8_t test = query();
 8000560:	f000 fa58 	bl	8000a14 <query>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]


  GPIOB->ODR |= (LED1_Pin); //mask LED1
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <main+0xf8>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a17      	ldr	r2, [pc, #92]	; (80005cc <main+0xf8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000574:	20fa      	movs	r0, #250	; 0xfa
 8000576:	f000 fd43 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //swap to LED2
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0xf8>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a13      	ldr	r2, [pc, #76]	; (80005cc <main+0xf8>)
 8000580:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000584:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000586:	20fa      	movs	r0, #250	; 0xfa
 8000588:	f000 fd3a 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED1
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xf8>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <main+0xf8>)
 8000592:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 8000596:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f000 fd31 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED1_Pin | LED2_Pin); //back to LED2
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0xf8>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0xf8>)
 80005a4:	f483 43c0 	eor.w	r3, r3, #24576	; 0x6000
 80005a8:	6153      	str	r3, [r2, #20]
  HAL_Delay(250);
 80005aa:	20fa      	movs	r0, #250	; 0xfa
 80005ac:	f000 fd28 	bl	8001000 <HAL_Delay>
  GPIOB->ODR ^= (LED2_Pin); //end sequence
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <main+0xf8>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <main+0xf8>)
 80005b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005ba:	6153      	str	r3, [r2, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  report(test);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fa58 	bl	8000a74 <report>
	  HAL_Delay(250);
 80005c4:	20fa      	movs	r0, #250	; 0xfa
 80005c6:	f000 fd1b 	bl	8001000 <HAL_Delay>
	  report(test);
 80005ca:	e7f7      	b.n	80005bc <main+0xe8>
 80005cc:	48000400 	.word	0x48000400
 80005d0:	0800a050 	.word	0x0800a050
 80005d4:	200002e8 	.word	0x200002e8

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b0      	sub	sp, #192	; 0xc0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 fc64 	bl	8009eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2268      	movs	r2, #104	; 0x68
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fc56 	bl	8009eb4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000608:	f002 fb70 	bl	8002cec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <SystemClock_Config+0x128>)
 800060e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000612:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <SystemClock_Config+0x128>)
 8000614:	f023 0318 	bic.w	r3, r3, #24
 8000618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800061c:	2314      	movs	r3, #20
 800061e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fc86 	bl	8002f78 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 fa0a 	bl	8000a8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f003 f891 	bl	80037b8 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800069c:	f000 f9f5 	bl	8000a8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80006a0:	f242 0301 	movw	r3, #8193	; 0x2001
 80006a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006b8:	2318      	movs	r3, #24
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006cc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fa75 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80006dc:	f000 f9d5 	bl	8000a8a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f002 fb20 	bl	8002d28 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80006ee:	f000 f9cc 	bl	8000a8a <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f2:	f003 fccf 	bl	8004094 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f6:	bf00      	nop
 80006f8:	37c0      	adds	r7, #192	; 0xc0
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_QUADSPI_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000716:	2201      	movs	r2, #1
 8000718:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000722:	2201      	movs	r2, #1
 8000724:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_QUADSPI_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_QUADSPI_Init+0x50>)
 8000740:	f002 fb58 	bl	8002df4 <HAL_QSPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f99e 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000368 	.word	0x20000368
 8000758:	a0001000 	.word	0xa0001000

0800075c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_SPI2_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000776:	f44f 7240 	mov.w	r2, #768	; 0x300
 800077a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI2_Init+0x74>)
 800078a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI2_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SPI2_Init+0x74>)
 80007bc:	f003 fd6a 	bl	8004294 <HAL_SPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f960 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000220 	.word	0x20000220
 80007d4:	40003800 	.word	0x40003800

080007d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x74>)
 80007f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x74>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x74>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x74>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0x74>)
 8000838:	f003 fd2c 	bl	8004294 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f922 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000284 	.word	0x20000284
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f004 fc04 	bl	80050a4 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f8f2 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002e8 	.word	0x200002e8
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a4c      	ldr	r2, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a46      	ldr	r2, [pc, #280]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <MX_GPIO_Init+0x14c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a3a      	ldr	r2, [pc, #232]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <MX_GPIO_Init+0x14c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a34      	ldr	r2, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <MX_GPIO_Init+0x14c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2110      	movs	r1, #16
 8000946:	482f      	ldr	r0, [pc, #188]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000948:	f000 fe08 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 800094c:	2200      	movs	r2, #0
 800094e:	f246 3140 	movw	r1, #25408	; 0x6340
 8000952:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000954:	f000 fe02 	bl	800155c <HAL_GPIO_WritePin>
                          |ADS_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_PWDN_GPIO_Port, ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	4829      	ldr	r0, [pc, #164]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000960:	f000 fdfc 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APWR_EN_GPIO_Port, APWR_EN_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2104      	movs	r1, #4
 8000968:	4828      	ldr	r0, [pc, #160]	; (8000a0c <MX_GPIO_Init+0x158>)
 800096a:	f000 fdf7 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADXL_CS_Pin ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin|ADS_PWDN_Pin;
 800096e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	481f      	ldr	r0, [pc, #124]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000988:	f000 fc6e 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin SPI3_CS_Pin ADS_START_Pin
                           ADS_RST_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|SPI3_CS_Pin|ADS_START_Pin
 800098c:	f246 3340 	movw	r3, #25408	; 0x6340
 8000990:	617b      	str	r3, [r7, #20]
                          |ADS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x154>)
 80009a6:	f000 fc5f 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : APWR_EN_Pin */
  GPIO_InitStruct.Pin = APWR_EN_Pin;
 80009aa:	2304      	movs	r3, #4
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x158>)
 80009c2:	f000 fc51 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_GPIO_Init+0x154>)
 80009da:	f000 fc45 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80009de:	2308      	movs	r3, #8
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_GPIO_Init+0x15c>)
 80009f2:	f000 fc39 	bl	8001268 <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000800 	.word	0x48000800
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	48000c00 	.word	0x48000c00
 8000a10:	48001c00 	.word	0x48001c00

08000a14 <query>:

/* USER CODE BEGIN 4 */
static uint8_t query(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
			uint8_t mem_pass : 1;
			uint8_t apwr_pass : 1;
		} bits;
	} report_bit_field;

	report_bit_field.report = 0x00;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	713b      	strb	r3, [r7, #4]

	//query ADXL372

	uint8_t ad_tx = (PRODUCT_R << 1) | 0x01;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	70fb      	strb	r3, [r7, #3]
	uint8_t ad_token;

	HAL_GPIO_TogglePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin);
 8000a22:	2110      	movs	r1, #16
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <query+0x58>)
 8000a26:	f000 fdb1 	bl	800158c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(&hspi2, &ad_tx, 1, HAL_MAX_DELAY);
 8000a2a:	1cf9      	adds	r1, r7, #3
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2201      	movs	r2, #1
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <query+0x5c>)
 8000a34:	f003 fcd1 	bl	80043da <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &ad_token, 1, HAL_MAX_DELAY);
 8000a38:	1cb9      	adds	r1, r7, #2
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	2201      	movs	r2, #1
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <query+0x5c>)
 8000a42:	f003 fe38 	bl	80046b6 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin);
 8000a46:	2110      	movs	r1, #16
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <query+0x58>)
 8000a4a:	f000 fd9f 	bl	800158c <HAL_GPIO_TogglePin>

	report_bit_field.bits.accel_pass = (DEVID_PRODUCT == ad_token);
 8000a4e:	78bb      	ldrb	r3, [r7, #2]
 8000a50:	2bfa      	cmp	r3, #250	; 0xfa
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	793b      	ldrb	r3, [r7, #4]
 8000a5c:	f362 1304 	bfi	r3, r2, #4, #1
 8000a60:	713b      	strb	r3, [r7, #4]

	//query MX25R64



	return report_bit_field.report;
 8000a62:	793b      	ldrb	r3, [r7, #4]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	20000220 	.word	0x20000220

08000a74 <report>:

static void report(uint8_t test_reg) {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	//send uart

	//send USB

	//blink pattern
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x6>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <HAL_QSPI_MspInit+0xb4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d144      	bne.n	8000b88 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6513      	str	r3, [r2, #80]	; 0x50
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_QSPI_MspInit+0xb8>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000b46:	23cc      	movs	r3, #204	; 0xcc
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b56:	230a      	movs	r3, #10
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fb80 	bl	8001268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_QSPI_MspInit+0xbc>)
 8000b84:	f000 fb70 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	a0001000 	.word	0xa0001000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a4b      	ldr	r2, [pc, #300]	; (8000ce8 <HAL_SPI_MspInit+0x14c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d145      	bne.n	8000c4a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a4a      	ldr	r2, [pc, #296]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b48      	ldr	r3, [pc, #288]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b45      	ldr	r3, [pc, #276]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a44      	ldr	r2, [pc, #272]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c06:	230c      	movs	r3, #12
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c16:	2305      	movs	r3, #5
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4833      	ldr	r0, [pc, #204]	; (8000cf0 <HAL_SPI_MspInit+0x154>)
 8000c22:	f000 fb21 	bl	8001268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <HAL_SPI_MspInit+0x158>)
 8000c44:	f000 fb10 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c48:	e049      	b.n	8000cde <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <HAL_SPI_MspInit+0x15c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d144      	bne.n	8000cde <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_SPI_MspInit+0x150>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <HAL_SPI_MspInit+0x154>)
 8000cba:	f000 fad5 	bl	8001268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cbe:	2330      	movs	r3, #48	; 0x30
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_SPI_MspInit+0x158>)
 8000cda:	f000 fac5 	bl	8001268 <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	; 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40003800 	.word	0x40003800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	40003c00 	.word	0x40003c00

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d129      	bne.n	8000d72 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fa7b 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8f6 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USB_IRQHandler+0x10>)
 8000dde:	f000 fd23 	bl	8001828 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20001888 	.word	0x20001888

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f009 f810 	bl	8009e40 <__errno>
 8000e20:	4602      	mov	r2, r0
 8000e22:	230c      	movs	r3, #12
 8000e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20028000 	.word	0x20028000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000210 	.word	0x20000210
 8000e54:	20001b80 	.word	0x20001b80

08000e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <SystemInit+0x64>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <SystemInit+0x64>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <SystemInit+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <SystemInit+0x68>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <SystemInit+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <SystemInit+0x68>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <SystemInit+0x68>)
 8000e84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <SystemInit+0x68>)
 8000e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <SystemInit+0x68>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <SystemInit+0x68>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <SystemInit+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SystemInit+0x64>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff ffc6 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <LoopForever+0x16>)
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f008 ffab 	bl	8009e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff faed 	bl	80004d4 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000efc:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000f00:	0800a0f4 	.word	0x0800a0f4
	ldr	r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f08:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000f0c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000f10:	20001b80 	.word	0x20001b80

08000f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_IRQHandler>

08000f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f95f 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f80e 	bl	8000f48 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e001      	b.n	8000f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f38:	f7ff fdac 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f96b 	bl	800124e <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f935 	bl	80011fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200003b4 	.word	0x200003b4

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200003b4 	.word	0x200003b4

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff29 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff3e 	bl	800108c <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff31 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e154      	b.n	8001522 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8146 	beq.w	800151c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d00b      	beq.n	80012b0 <HAL_GPIO_Init+0x48>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a4:	2b11      	cmp	r3, #17
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0201 	and.w	r2, r3, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0xea>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d123      	bne.n	800139a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0203 	and.w	r2, r3, #3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a0 	beq.w	800151c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_GPIO_Init+0x2d8>)
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	4a57      	ldr	r2, [pc, #348]	; (8001540 <HAL_GPIO_Init+0x2d8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6613      	str	r3, [r2, #96]	; 0x60
 80013e8:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_GPIO_Init+0x2d8>)
 80013ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x2dc>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800141e:	d019      	beq.n	8001454 <HAL_GPIO_Init+0x1ec>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a49      	ldr	r2, [pc, #292]	; (8001548 <HAL_GPIO_Init+0x2e0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d013      	beq.n	8001450 <HAL_GPIO_Init+0x1e8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a48      	ldr	r2, [pc, #288]	; (800154c <HAL_GPIO_Init+0x2e4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00d      	beq.n	800144c <HAL_GPIO_Init+0x1e4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a47      	ldr	r2, [pc, #284]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x1e0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_Init+0x1dc>
 8001440:	2304      	movs	r3, #4
 8001442:	e008      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001444:	2307      	movs	r3, #7
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001448:	2303      	movs	r3, #3
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001454:	2300      	movs	r3, #0
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001466:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_GPIO_Init+0x2dc>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001498:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ec:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	f47f aea3 	bne.w	8001278 <HAL_GPIO_Init+0x10>
  }
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001578:	e002      	b.n	8001580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43d9      	mvns	r1, r3
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	400b      	ands	r3, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af06      	add	r7, sp, #24
 80015c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e104      	b.n	80017dc <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f008 f89c 	bl	8009724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fa1d 	bl	8005a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	687e      	ldr	r6, [r7, #4]
 8001606:	466d      	mov	r5, sp
 8001608:	f106 0410 	add.w	r4, r6, #16
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	1d33      	adds	r3, r6, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f004 f9e5 	bl	80059e8 <USB_CoreInit>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0d5      	b.n	80017dc <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fa19 	bl	8005a6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e04c      	b.n	80016dc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3301      	adds	r3, #1
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	b298      	uxth	r0, r3
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3336      	adds	r3, #54	; 0x36
 8001680:	4602      	mov	r2, r0
 8001682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3303      	adds	r3, #3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3338      	adds	r3, #56	; 0x38
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333c      	adds	r3, #60	; 0x3c
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3340      	adds	r3, #64	; 0x40
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3301      	adds	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3ad      	bcc.n	8001642 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e044      	b.n	8001776 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3b5      	bcc.n	80016ec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	687e      	ldr	r6, [r7, #4]
 8001788:	466d      	mov	r5, sp
 800178a:	f106 0410 	add.w	r4, r6, #16
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	1d33      	adds	r3, r6, #4
 8001798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	f004 f974 	bl	8005a88 <USB_DevInit>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e014      	b.n	80017dc <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f001 fa63 	bl	8002c96 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f006 f92d 	bl	8007a34 <USB_DevDisconnect>

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_Start+0x16>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e012      	b.n	8001820 <HAL_PCD_Start+0x3c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 f8ff 	bl	8005a0a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f006 f8f8 	bl	8007a06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f912 	bl	8007a5e <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001844:	d102      	bne.n	800184c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fb5b 	bl	8001f02 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f006 f904 	bl	8007a5e <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d112      	bne.n	8001888 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001874:	b292      	uxth	r2, r2
 8001876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f007 fff3 	bl	8009866 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f91e 	bl	8001ac4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f006 f8e6 	bl	8007a5e <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800189c:	d10b      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 f8cf 	bl	8007a5e <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d10b      	bne.n	80018e4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f006 f8b8 	bl	8007a5e <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f8:	d133      	bne.n	8001962 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	b292      	uxth	r2, r2
 800190e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	b292      	uxth	r2, r2
 8001926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f008 fa42 	bl	8009dc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f007 ffc7 	bl	80098d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f006 f879 	bl	8007a5e <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001976:	d126      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0208 	orr.w	r2, r2, #8
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0204 	orr.w	r2, r2, #4
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f007 ff6f 	bl	80098a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 f847 	bl	8007a5e <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b80      	cmp	r3, #128	; 0x80
 80019d8:	d13f      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ec:	b292      	uxth	r2, r2
 80019ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d12b      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0204 	orr.w	r2, r2, #4
 8001a0e:	b292      	uxth	r2, r2
 8001a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0208 	orr.w	r2, r2, #8
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f008 f9bb 	bl	8009dc8 <HAL_PCDEx_LPM_Callback>
 8001a52:	e002      	b.n	8001a5a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f007 ff25 	bl	80098a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fffd 	bl	8007a5e <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6e:	d10e      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a82:	b292      	uxth	r2, r2
 8001a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f007 fede 	bl	800984a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 ffe3 	bl	8007a5e <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa2:	d10b      	bne.n	8001abc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_PCD_SetAddress+0x1a>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e013      	b.n	8001b06 <HAL_PCD_SetAddress+0x42>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f005 ff71 	bl	80079de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	4608      	mov	r0, r1
 8001b18:	4611      	mov	r1, r2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	70fb      	strb	r3, [r7, #3]
 8001b20:	460b      	mov	r3, r1
 8001b22:	803b      	strh	r3, [r7, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da0e      	bge.n	8001b52 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	705a      	strb	r2, [r3, #1]
 8001b50:	e00e      	b.n	8001b70 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 0207 	and.w	r2, r3, #7
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b7c:	883a      	ldrh	r2, [r7, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_PCD_EP_Open+0xa6>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e00e      	b.n	8001bd2 <HAL_PCD_EP_Open+0xc4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 ff82 	bl	8005acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da0e      	bge.n	8001c0c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	705a      	strb	r2, [r3, #1]
 8001c0a:	e00e      	b.n	8001c2a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 0207 	and.w	r2, r3, #7
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_EP_Close+0x6a>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00e      	b.n	8001c62 <HAL_PCD_EP_Close+0x88>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 faa8 	bl	80061a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	460b      	mov	r3, r1
 8001c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	f003 0207 	and.w	r2, r3, #7
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6979      	ldr	r1, [r7, #20]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fc5b 	bl	8006582 <USB_EPStartXfer>
 8001ccc:	e005      	b.n	8001cda <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 fc54 	bl	8006582 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 0207 	and.w	r2, r3, #7
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	460b      	mov	r3, r1
 8001d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6979      	ldr	r1, [r7, #20]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fc00 	bl	8006582 <USB_EPStartXfer>
 8001d82:	e005      	b.n	8001d90 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fbf9 	bl	8006582 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 0207 	and.w	r2, r3, #7
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d901      	bls.n	8001db8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04c      	b.n	8001e52 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da0e      	bge.n	8001dde <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	705a      	strb	r2, [r3, #1]
 8001ddc:	e00c      	b.n	8001df8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_EP_SetStall+0x7e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e01c      	b.n	8001e52 <HAL_PCD_EP_SetStall+0xb8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 fcda 	bl	80077e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f005 fe1b 	bl	8007a7e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d901      	bls.n	8001e78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e040      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da0e      	bge.n	8001e9e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e00e      	b.n	8001ebc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 0207 	and.w	r2, r3, #7
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_EP_ClrStall+0x82>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e00e      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 fcc9 	bl	8007882 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08e      	sub	sp, #56	; 0x38
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f0a:	e2d1      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8152 	bne.w	80021d0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d150      	bne.n	8001fd8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	81fb      	strh	r3, [r7, #14]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	89fb      	ldrh	r3, [r7, #14]
 8001f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3328      	adds	r3, #40	; 0x28
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	441a      	add	r2, r3
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f96:	2100      	movs	r1, #0
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f007 fc3c 	bl	8009816 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8282 	beq.w	80024b0 <PCD_EP_ISR_Handler+0x5ae>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 827d 	bne.w	80024b0 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fd6:	e26b      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fe8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d032      	beq.n	8002058 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4413      	add	r3, r2
 800200c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800202c:	b29b      	uxth	r3, r3
 800202e:	f005 fd73 	bl	8007b18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29a      	uxth	r2, r3
 800203a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800203e:	4013      	ands	r3, r2
 8002040:	823b      	strh	r3, [r7, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	8a3a      	ldrh	r2, [r7, #16]
 8002048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204c:	b292      	uxth	r2, r2
 800204e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f007 fbb3 	bl	80097bc <HAL_PCD_SetupStageCallback>
 8002056:	e22b      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002058:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800205c:	2b00      	cmp	r3, #0
 800205e:	f280 8227 	bge.w	80024b0 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800206e:	4013      	ands	r3, r2
 8002070:	83bb      	strh	r3, [r7, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	8bba      	ldrh	r2, [r7, #28]
 8002078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d019      	beq.n	80020e4 <PCD_EP_ISR_Handler+0x1e2>
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	f005 fd25 	bl	8007b18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	441a      	add	r2, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020dc:	2100      	movs	r1, #0
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f007 fb7e 	bl	80097e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4413      	add	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d112      	bne.n	8002132 <PCD_EP_ISR_Handler+0x230>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002116:	b29a      	uxth	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212a:	b29a      	uxth	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	e02f      	b.n	8002192 <PCD_EP_ISR_Handler+0x290>
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b3e      	cmp	r3, #62	; 0x3e
 8002138:	d813      	bhi.n	8002162 <PCD_EP_ISR_Handler+0x260>
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <PCD_EP_ISR_Handler+0x252>
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	3301      	adds	r3, #1
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	b29b      	uxth	r3, r3
 8002158:	029b      	lsls	r3, r3, #10
 800215a:	b29a      	uxth	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	e017      	b.n	8002192 <PCD_EP_ISR_Handler+0x290>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <PCD_EP_ISR_Handler+0x27a>
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	3b01      	subs	r3, #1
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	b29b      	uxth	r3, r3
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	b29b      	uxth	r3, r3
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29a      	uxth	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	827b      	strh	r3, [r7, #18]
 80021a4:	8a7b      	ldrh	r3, [r7, #18]
 80021a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021aa:	827b      	strh	r3, [r7, #18]
 80021ac:	8a7b      	ldrh	r3, [r7, #18]
 80021ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021b2:	827b      	strh	r3, [r7, #18]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	8a7b      	ldrh	r3, [r7, #18]
 80021ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	8013      	strh	r3, [r2, #0]
 80021ce:	e16f      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f280 80e4 	bge.w	80023b4 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002202:	4013      	ands	r3, r2
 8002204:	853b      	strh	r3, [r7, #40]	; 0x28
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221a:	b292      	uxth	r2, r2
 800221c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800221e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	7b1b      	ldrb	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d120      	bne.n	800227e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002260:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002262:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8083 	beq.w	8002370 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	88da      	ldrh	r2, [r3, #6]
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	f005 fc4e 	bl	8007b18 <USB_ReadPMA>
 800227c:	e078      	b.n	8002370 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	78db      	ldrb	r3, [r3, #3]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d108      	bne.n	8002298 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002288:	461a      	mov	r2, r3
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f91d 	bl	80024cc <HAL_PCD_EP_DB_Receive>
 8002292:	4603      	mov	r3, r0
 8002294:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002296:	e06b      	b.n	8002370 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	4413      	add	r3, r2
 800230c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002316:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002318:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231a:	2b00      	cmp	r3, #0
 800231c:	d028      	beq.n	8002370 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	891a      	ldrh	r2, [r3, #8]
 800232a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800232c:	f005 fbf4 	bl	8007b18 <USB_ReadPMA>
 8002330:	e01e      	b.n	8002370 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4413      	add	r3, r2
 800234c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002356:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002358:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	6959      	ldr	r1, [r3, #20]
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	895a      	ldrh	r2, [r3, #10]
 800236a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236c:	f005 fbd4 	bl	8007b18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002376:	441a      	add	r2, r3
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002382:	441a      	add	r2, r3
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <PCD_EP_ISR_Handler+0x498>
 8002390:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d206      	bcs.n	80023a8 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f007 fa1d 	bl	80097e0 <HAL_PCD_DataOutStageCallback>
 80023a6:	e005      	b.n	80023b4 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 f8e7 	bl	8006582 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d078      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80023be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	843b      	strh	r3, [r7, #32]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	8c3b      	ldrh	r3, [r7, #32]
 80023fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002406:	b29b      	uxth	r3, r3
 8002408:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d108      	bne.n	8002424 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002416:	2b02      	cmp	r3, #2
 8002418:	d144      	bne.n	80024a4 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800241a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d13f      	bne.n	80024a4 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	4413      	add	r3, r2
 800243e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002448:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	8bfb      	ldrh	r3, [r7, #30]
 8002450:	429a      	cmp	r2, r3
 8002452:	d906      	bls.n	8002462 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	8bfb      	ldrh	r3, [r7, #30]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	619a      	str	r2, [r3, #24]
 8002460:	e002      	b.n	8002468 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f007 f9cd 	bl	8009816 <HAL_PCD_DataInStageCallback>
 800247c:	e018      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	8bfb      	ldrh	r3, [r7, #30]
 8002484:	441a      	add	r2, r3
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	8bfb      	ldrh	r3, [r7, #30]
 8002490:	441a      	add	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f870 	bl	8006582 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024a2:	e005      	b.n	80024b0 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f917 	bl	80026de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f6ff ad25 	blt.w	8001f0c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d07c      	beq.n	80025de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002508:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	429a      	cmp	r2, r3
 8002512:	d306      	bcc.n	8002522 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	8b7b      	ldrh	r3, [r7, #26]
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	619a      	str	r2, [r3, #24]
 8002520:	e002      	b.n	8002528 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d123      	bne.n	8002578 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	833b      	strh	r3, [r7, #24]
 800254c:	8b3b      	ldrh	r3, [r7, #24]
 800254e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002552:	833b      	strh	r3, [r7, #24]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	8b3b      	ldrh	r3, [r7, #24]
 8002564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01f      	beq.n	80025c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259c:	82fb      	strh	r3, [r7, #22]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	8afb      	ldrh	r3, [r7, #22]
 80025ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025c2:	8b7b      	ldrh	r3, [r7, #26]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8085 	beq.w	80026d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6959      	ldr	r1, [r3, #20]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	891a      	ldrh	r2, [r3, #8]
 80025d6:	8b7b      	ldrh	r3, [r7, #26]
 80025d8:	f005 fa9e 	bl	8007b18 <USB_ReadPMA>
 80025dc:	e07a      	b.n	80026d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002602:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	8b7b      	ldrh	r3, [r7, #26]
 800260a:	429a      	cmp	r2, r3
 800260c:	d306      	bcc.n	800261c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	8b7b      	ldrh	r3, [r7, #26]
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	e002      	b.n	8002622 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d123      	bne.n	8002672 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	83fb      	strh	r3, [r7, #30]
 8002646:	8bfb      	ldrh	r3, [r7, #30]
 8002648:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800264c:	83fb      	strh	r3, [r7, #30]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	8bfb      	ldrh	r3, [r7, #30]
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11f      	bne.n	80026bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	83bb      	strh	r3, [r7, #28]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	8bbb      	ldrh	r3, [r7, #28]
 80026a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026bc:	8b7b      	ldrh	r3, [r7, #26]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6959      	ldr	r1, [r3, #20]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	895a      	ldrh	r2, [r3, #10]
 80026ce:	8b7b      	ldrh	r3, [r7, #26]
 80026d0:	f005 fa22 	bl	8007b18 <USB_ReadPMA>
    }
  }

  return count;
 80026d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b092      	sub	sp, #72	; 0x48
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8130 	beq.w	8002958 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002724:	429a      	cmp	r2, r3
 8002726:	d906      	bls.n	8002736 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	e002      	b.n	800273c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12c      	bne.n	800279e <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f007 f863 	bl	8009816 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 822d 	beq.w	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	827b      	strh	r3, [r7, #18]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	8a7b      	ldrh	r3, [r7, #18]
 8002788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]
 800279c:	e20b      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01f      	beq.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 81e1 	bne.w	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027fa:	441a      	add	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002806:	441a      	add	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d309      	bcc.n	800282c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	621a      	str	r2, [r3, #32]
 800282a:	e014      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002840:	e009      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d155      	bne.n	800290a <HAL_PCD_EP_DB_Transmit+0x22c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	00da      	lsls	r2, r3, #3
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d112      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x1d4>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002896:	b29a      	uxth	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e047      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x264>
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	2b3e      	cmp	r3, #62	; 0x3e
 80028b6:	d811      	bhi.n	80028dc <HAL_PCD_EP_DB_Transmit+0x1fe>
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_PCD_EP_DB_Transmit+0x1f0>
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	3301      	adds	r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e032      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x264>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x214>
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002902:	b29a      	uxth	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e01b      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x264>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d117      	bne.n	8002942 <HAL_PCD_EP_DB_Transmit+0x264>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	4413      	add	r3, r2
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	00da      	lsls	r2, r3, #3
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	4413      	add	r3, r2
 8002934:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	b29a      	uxth	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6959      	ldr	r1, [r3, #20]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	891a      	ldrh	r2, [r3, #8]
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	b29b      	uxth	r3, r3
 8002952:	f005 f8a0 	bl	8007a96 <USB_WritePMA>
 8002956:	e12e      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	4413      	add	r3, r2
 8002972:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002984:	429a      	cmp	r2, r3
 8002986:	d306      	bcc.n	8002996 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	619a      	str	r2, [r3, #24]
 8002994:	e002      	b.n	800299c <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12c      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f006 ff33 	bl	8009816 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80fd 	bne.w	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	8013      	strh	r3, [r2, #0]
 80029fc:	e0db      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11f      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f040 80b1 	bne.w	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a66:	441a      	add	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d309      	bcc.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	621a      	str	r2, [r3, #32]
 8002a8a:	e014      	b.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d106      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aa0:	e009      	b.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d155      	bne.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x492>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad8:	4413      	add	r3, r2
 8002ada:	647b      	str	r3, [r7, #68]	; 0x44
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00da      	lsls	r2, r3, #3
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d112      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e044      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b1c:	d811      	bhi.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x464>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	3301      	adds	r3, #1
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e02f      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b54:	3b01      	subs	r3, #1
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	e018      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d114      	bne.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	4413      	add	r3, r2
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	00da      	lsls	r2, r3, #3
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	4413      	add	r3, r2
 8002b94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6959      	ldr	r1, [r3, #20]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	895a      	ldrh	r2, [r3, #10]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f004 ff70 	bl	8007a96 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd0:	823b      	strh	r3, [r7, #16]
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	f083 0310 	eor.w	r3, r3, #16
 8002bd8:	823b      	strh	r3, [r7, #16]
 8002bda:	8a3b      	ldrh	r3, [r7, #16]
 8002bdc:	f083 0320 	eor.w	r3, r3, #32
 8002be0:	823b      	strh	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	8a3b      	ldrh	r3, [r7, #16]
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3748      	adds	r7, #72	; 0x48
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4413      	add	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e009      	b.n	8002c5a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c46:	897a      	ldrh	r2, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c5a:	893b      	ldrh	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2200      	movs	r2, #0
 8002c64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	80da      	strh	r2, [r3, #6]
 8002c6e:	e00b      	b.n	8002c88 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2201      	movs	r2, #1
 8002c74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40007000 	.word	0x40007000

08002d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40007000 	.word	0x40007000

08002d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d36:	d130      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d44:	d038      	beq.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2232      	movs	r2, #50	; 0x32
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6c:	e002      	b.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d80:	d102      	bne.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f2      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d110      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e00f      	b.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d007      	beq.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6053      	str	r3, [r2, #4]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40007000 	.word	0x40007000

08002df4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7fe f8f4 	bl	8000fe8 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e069      	b.n	8002ee0 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fd fe5b 	bl	8000adc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e26:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f85e 	bl	8002eec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	2120      	movs	r1, #32
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f856 	bl	8002f08 <QSPI_WaitFlagStateUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d137      	bne.n	8002ed6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e70:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	0611      	lsls	r1, r2, #24
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	69d2      	ldr	r2, [r2, #28]
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a12      	ldr	r2, [r2, #32]
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_QSPI_Init+0xf4>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6912      	ldr	r2, [r2, #16]
 8002ea2:	0411      	lsls	r1, r2, #16
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6952      	ldr	r2, [r2, #20]
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6992      	ldr	r2, [r2, #24]
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002ede:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffe0f8fe 	.word	0xffe0f8fe

08002eec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f18:	e01a      	b.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d016      	beq.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe f861 	bl	8000fe8 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00e      	b.n	8002f6e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1d6      	bne.n	8002f1a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f000 bc11 	b.w	80037ae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8c:	4ba0      	ldr	r3, [pc, #640]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f96:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80e4 	beq.w	8003176 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4c>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	f040 808b 	bne.w	80030d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	f040 8087 	bne.w	80030d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc4:	4b92      	ldr	r3, [pc, #584]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x64>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e3e8      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x7e>
 8002fec:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	e005      	b.n	8003002 <HAL_RCC_OscConfig+0x8a>
 8002ff6:	4b86      	ldr	r3, [pc, #536]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	4293      	cmp	r3, r2
 8003004:	d223      	bcs.n	800304e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fd78 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e3c9      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7c      	ldr	r2, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4977      	ldr	r1, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003038:	4b75      	ldr	r3, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	4972      	ldr	r1, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
 800304c:	e025      	b.n	800309a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304e:	4b70      	ldr	r3, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6f      	ldr	r2, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	496a      	ldr	r1, [pc, #424]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	4965      	ldr	r1, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fd38 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e389      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309a:	f000 fc6f 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800309e:	4601      	mov	r1, r0
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a5a      	ldr	r2, [pc, #360]	; (8003214 <HAL_RCC_OscConfig+0x29c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	fa21 f303 	lsr.w	r3, r1, r3
 80030b6:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_OscConfig+0x2a0>)
 80030b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ba:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x2a4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd ff42 	bl	8000f48 <HAL_InitTick>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d052      	beq.n	8003174 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	e36d      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d032      	beq.n	8003140 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e6:	f7fd ff7f 	bl	8000fe8 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ee:	f7fd ff7b 	bl	8000fe8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e356      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310c:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3f      	ldr	r2, [pc, #252]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	493a      	ldr	r1, [pc, #232]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4935      	ldr	r1, [pc, #212]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	e01a      	b.n	8003176 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a32      	ldr	r2, [pc, #200]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314c:	f7fd ff4c 	bl	8000fe8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003154:	f7fd ff48 	bl	8000fe8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e323      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1dc>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d073      	beq.n	800326a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x21c>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d10e      	bne.n	80031ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10b      	bne.n	80031ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d063      	beq.n	8003268 <HAL_RCC_OscConfig+0x2f0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d15f      	bne.n	8003268 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e300      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x24c>
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0x288>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x270>
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x288>
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01b      	beq.n	8003240 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd feee 	bl	8000fe8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	e010      	b.n	8003232 <HAL_RCC_OscConfig+0x2ba>
 8003210:	40021000 	.word	0x40021000
 8003214:	0800a09c 	.word	0x0800a09c
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fee2 	bl	8000fe8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e2bd      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003232:	4baf      	ldr	r3, [pc, #700]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x2a8>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fed2 	bl	8000fe8 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fece 	bl	8000fe8 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2a9      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	4ba5      	ldr	r3, [pc, #660]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x2d0>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d060      	beq.n	8003338 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x310>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d119      	bne.n	80032b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d116      	bne.n	80032b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	4b99      	ldr	r3, [pc, #612]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x328>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e286      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b93      	ldr	r3, [pc, #588]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4990      	ldr	r1, [pc, #576]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b4:	e040      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d023      	beq.n	8003306 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032be:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a8b      	ldr	r2, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd fe8d 	bl	8000fe8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fd fe89 	bl	8000fe8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e264      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	4b82      	ldr	r3, [pc, #520]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	497c      	ldr	r1, [pc, #496]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	e018      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b7a      	ldr	r3, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a79      	ldr	r2, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fd fe69 	bl	8000fe8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7fd fe65 	bl	8000fe8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e240      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332c:	4b70      	ldr	r3, [pc, #448]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03c      	beq.n	80033be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003352:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd fe44 	bl	8000fe8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd fe40 	bl	8000fe8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e21b      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCC_OscConfig+0x3ec>
 8003384:	e01b      	b.n	80033be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fd fe27 	bl	8000fe8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fd fe23 	bl	8000fe8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1fe      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ef      	bne.n	800339e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80a6 	beq.w	8003518 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
 80033e8:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f8:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d118      	bne.n	8003436 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003410:	f7fd fdea 	bl	8000fe8 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fd fde6 	bl	8000fe8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1c1      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342a:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <HAL_RCC_OscConfig+0x4d8>
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344e:	e024      	b.n	800349a <HAL_RCC_OscConfig+0x522>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d110      	bne.n	800347a <HAL_RCC_OscConfig+0x502>
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003478:	e00f      	b.n	800349a <HAL_RCC_OscConfig+0x522>
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fd fda1 	bl	8000fe8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fd9d 	bl	8000fe8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e176      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCC_OscConfig+0x532>
 80034ce:	e01a      	b.n	8003506 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fd8a 	bl	8000fe8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d6:	e00f      	b.n	80034f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fd86 	bl	8000fe8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d906      	bls.n	80034f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e15f      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	4baa      	ldr	r3, [pc, #680]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e8      	bne.n	80034d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003506:	7ffb      	ldrb	r3, [r7, #31]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350c:	4ba5      	ldr	r3, [pc, #660]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4aa4      	ldr	r2, [pc, #656]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03c      	beq.n	800359e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01c      	beq.n	8003566 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800352c:	4b9d      	ldr	r3, [pc, #628]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800352e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003532:	4a9c      	ldr	r2, [pc, #624]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd fd54 	bl	8000fe8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003544:	f7fd fd50 	bl	8000fe8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e12b      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003556:	4b93      	ldr	r3, [pc, #588]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCC_OscConfig+0x5cc>
 8003564:	e01b      	b.n	800359e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003566:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356c:	4a8d      	ldr	r2, [pc, #564]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fd fd37 	bl	8000fe8 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357e:	f7fd fd33 	bl	8000fe8 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e10e      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003590:	4b84      	ldr	r3, [pc, #528]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ef      	bne.n	800357e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8102 	beq.w	80037ac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f040 80c5 	bne.w	800373c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035b2:	4b7c      	ldr	r3, [pc, #496]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0203 	and.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d12c      	bne.n	8003620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	3b01      	subs	r3, #1
 80035d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d123      	bne.n	8003620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d11b      	bne.n	8003620 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d113      	bne.n	8003620 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d109      	bne.n	8003620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d067      	beq.n	80036f0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d062      	beq.n	80036ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003626:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0bb      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800363c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003640:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003642:	f7fd fcd1 	bl	8000fe8 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd fccd 	bl	8000fe8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0a8      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365c:	4b51      	ldr	r3, [pc, #324]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <HAL_RCC_OscConfig+0x830>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003678:	3a01      	subs	r2, #1
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003682:	0212      	lsls	r2, r2, #8
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800368a:	0852      	lsrs	r2, r2, #1
 800368c:	3a01      	subs	r2, #1
 800368e:	0552      	lsls	r2, r2, #21
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003696:	0852      	lsrs	r2, r2, #1
 8003698:	3a01      	subs	r2, #1
 800369a:	0652      	lsls	r2, r2, #25
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036a2:	06d2      	lsls	r2, r2, #27
 80036a4:	430a      	orrs	r2, r1
 80036a6:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036ac:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a39      	ldr	r2, [pc, #228]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c4:	f7fd fc90 	bl	8000fe8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd fc8c 	bl	8000fe8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e067      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ea:	e05f      	b.n	80037ac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e05e      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003714:	f7fd fc68 	bl	8000fe8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fc64 	bl	8000fe8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e03f      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x7a4>
 800373a:	e037      	b.n	80037ac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d02d      	beq.n	800379e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003760:	f023 0303 	bic.w	r3, r3, #3
 8003764:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 800376c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd fc37 	bl	8000fe8 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fd fc33 	bl	8000fe8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e00e      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <HAL_RCC_OscConfig+0x82c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x806>
 800379c:	e006      	b.n	80037ac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e005      	b.n	80037ae <HAL_RCC_OscConfig+0x836>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0c8      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037cc:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d910      	bls.n	80037fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	4961      	ldr	r1, [pc, #388]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b0      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d04c      	beq.n	80038a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003810:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d121      	bne.n	8003860 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e09e      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d115      	bne.n	8003860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e092      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003840:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e086      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e07e      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003860:	4b42      	ldr	r3, [pc, #264]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 0203 	bic.w	r2, r3, #3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	493f      	ldr	r1, [pc, #252]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003872:	f7fd fbb9 	bl	8000fe8 <HAL_GetTick>
 8003876:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003878:	e00a      	b.n	8003890 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387a:	f7fd fbb5 	bl	8000fe8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e066      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 020c 	and.w	r2, r3, #12
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	429a      	cmp	r2, r3
 80038a0:	d1eb      	bne.n	800387a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ae:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	492c      	ldr	r1, [pc, #176]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d210      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4924      	ldr	r1, [pc, #144]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e036      	b.n	800395e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4918      	ldr	r1, [pc, #96]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4910      	ldr	r1, [pc, #64]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800392e:	f000 f825 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003932:	4601      	mov	r1, r0
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	fa21 f303 	lsr.w	r3, r1, r3
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd faf8 	bl	8000f48 <HAL_InitTick>
 8003958:	4603      	mov	r3, r0
 800395a:	72fb      	strb	r3, [r7, #11]

  return status;
 800395c:	7afb      	ldrb	r3, [r7, #11]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40022000 	.word	0x40022000
 800396c:	40021000 	.word	0x40021000
 8003970:	0800a09c 	.word	0x0800a09c
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398a:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003994:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d11e      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039bc:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039d8:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e004      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d133      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0xaa>
 8003a1e:	e005      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a22:	617b      	str	r3, [r7, #20]
      break;
 8003a24:	e005      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a26:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a28:	617b      	str	r3, [r7, #20]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	617b      	str	r3, [r7, #20]
      break;
 8003a30:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	fb02 f203 	mul.w	r2, r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0e5b      	lsrs	r3, r3, #25
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a72:	69bb      	ldr	r3, [r7, #24]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3724      	adds	r7, #36	; 0x24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800a0b4 	.word	0x0800a0b4
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	0800a0ac 	.word	0x0800a0ac

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ad8:	f7ff ffda 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003adc:	4601      	mov	r1, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800a0ac 	.word	0x0800a0ac

08003b00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f8f8 	bl	8002d0c <HAL_PWREx_GetVoltageRange>
 8003b1c:	6178      	str	r0, [r7, #20]
 8003b1e:	e014      	b.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b38:	f7ff f8e8 	bl	8002d0c <HAL_PWREx_GetVoltageRange>
 8003b3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d10b      	bne.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	; 0x80
 8003b56:	d919      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b5c:	d902      	bls.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e013      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e010      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d902      	bls.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b70:	2303      	movs	r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e00a      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d102      	bne.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e004      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d101      	bne.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 0207 	bic.w	r2, r3, #7
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40022000 	.word	0x40022000

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02f      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003be6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bea:	d015      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003bf0:	e00f      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a5c      	ldr	r2, [pc, #368]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfe:	e00c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa54 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	74fb      	strb	r3, [r7, #19]
      break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	494e      	ldr	r1, [pc, #312]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 809e 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd f9ac 	bl	8000fe8 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fd f9a8 	bl	8000fe8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d15a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cba:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d019      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d02:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d016      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd f968 	bl	8000fe8 <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd f964 	bl	8000fe8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	74fb      	strb	r3, [r7, #19]
            break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ec      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	4904      	ldr	r1, [pc, #16]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d74:	7c7b      	ldrb	r3, [r7, #17]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b9e      	ldr	r3, [pc, #632]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4a9d      	ldr	r2, [pc, #628]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d92:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f023 0203 	bic.w	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4994      	ldr	r1, [pc, #592]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 020c 	bic.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	498c      	ldr	r1, [pc, #560]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	4983      	ldr	r1, [pc, #524]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df8:	4b7e      	ldr	r3, [pc, #504]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	497b      	ldr	r1, [pc, #492]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4972      	ldr	r1, [pc, #456]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3c:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	496a      	ldr	r1, [pc, #424]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e5e:	4b65      	ldr	r3, [pc, #404]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	4961      	ldr	r1, [pc, #388]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e80:	4b5c      	ldr	r3, [pc, #368]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	4959      	ldr	r1, [pc, #356]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea2:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	4950      	ldr	r1, [pc, #320]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec4:	4b4b      	ldr	r3, [pc, #300]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	4948      	ldr	r1, [pc, #288]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eec:	f023 0203 	bic.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	493f      	ldr	r1, [pc, #252]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d028      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f08:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	4937      	ldr	r1, [pc, #220]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f26:	d106      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a31      	ldr	r2, [pc, #196]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	e011      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f8b4 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d028      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	491f      	ldr	r1, [pc, #124]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f84:	d106      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f90:	60d3      	str	r3, [r2, #12]
 8003f92:	e011      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f885 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe2:	d109      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a02      	ldr	r2, [pc, #8]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
 8003ff0:	e014      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f853 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004046:	d10c      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f830 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004084:	7cbb      	ldrb	r3, [r7, #18]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000

080040b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ce:	4b70      	ldr	r3, [pc, #448]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0203 	and.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
       ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040e6:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
       ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d044      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e041      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d00c      	beq.n	8004122 <RCCEx_PLLSAI1_Config+0x6e>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d013      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x80>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d120      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004110:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11d      	bne.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e01a      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004122:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e013      	b.n	800415c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004134:	4b56      	ldr	r3, [pc, #344]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10f      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004140:	4b53      	ldr	r3, [pc, #332]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004150:	e006      	b.n	8004160 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e004      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004160:	bf00      	nop
    }

    if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10d      	bne.n	8004184 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004168:	4b49      	ldr	r3, [pc, #292]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	3b01      	subs	r3, #1
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	430b      	orrs	r3, r1
 800417e:	4944      	ldr	r1, [pc, #272]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d17c      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a40      	ldr	r2, [pc, #256]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004196:	f7fc ff27 	bl	8000fe8 <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419c:	e009      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419e:	f7fc ff23 	bl	8000fe8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d902      	bls.n	80041b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	73fb      	strb	r3, [r7, #15]
        break;
 80041b0:	e005      	b.n	80041be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ef      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d15f      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d110      	bne.n	80041ec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6892      	ldr	r2, [r2, #8]
 80041da:	0211      	lsls	r1, r2, #8
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68d2      	ldr	r2, [r2, #12]
 80041e0:	06d2      	lsls	r2, r2, #27
 80041e2:	430a      	orrs	r2, r1
 80041e4:	492a      	ldr	r1, [pc, #168]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
 80041ea:	e027      	b.n	800423c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d112      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f2:	4b27      	ldr	r3, [pc, #156]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	0211      	lsls	r1, r2, #8
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6912      	ldr	r2, [r2, #16]
 8004208:	0852      	lsrs	r2, r2, #1
 800420a:	3a01      	subs	r2, #1
 800420c:	0552      	lsls	r2, r2, #21
 800420e:	430a      	orrs	r2, r1
 8004210:	491f      	ldr	r1, [pc, #124]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]
 8004216:	e011      	b.n	800423c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	0211      	lsls	r1, r2, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6952      	ldr	r2, [r2, #20]
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	3a01      	subs	r2, #1
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	430a      	orrs	r2, r1
 8004236:	4916      	ldr	r1, [pc, #88]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004246:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fc fece 	bl	8000fe8 <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424e:	e009      	b.n	8004264 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004250:	f7fc feca 	bl	8000fe8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d902      	bls.n	8004264 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	73fb      	strb	r3, [r7, #15]
          break;
 8004262:	e005      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ef      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4904      	ldr	r1, [pc, #16]	; (8004290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e095      	b.n	80043d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fc58 	bl	8000b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800430c:	d902      	bls.n	8004314 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e002      	b.n	800431a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004322:	d007      	beq.n	8004334 <HAL_SPI_Init+0xa0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0204 	and.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_SPI_Transmit+0x22>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e158      	b.n	80046ae <HAL_SPI_Transmit+0x2d4>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004404:	f7fc fdf0 	bl	8000fe8 <HAL_GetTick>
 8004408:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800441a:	2302      	movs	r3, #2
 800441c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800441e:	e13d      	b.n	800469c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_Transmit+0x52>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004430:	e134      	b.n	800469c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2203      	movs	r2, #3
 8004436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447c:	d10f      	bne.n	800449e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d007      	beq.n	80044bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044c4:	d94b      	bls.n	800455e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Transmit+0xfa>
 80044ce:	8afb      	ldrh	r3, [r7, #22]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d13e      	bne.n	8004552 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044f8:	e02b      	b.n	8004552 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d112      	bne.n	800452e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800452c:	e011      	b.n	8004552 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800452e:	f7fc fd5b 	bl	8000fe8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d803      	bhi.n	8004546 <HAL_SPI_Transmit+0x16c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d102      	bne.n	800454c <HAL_SPI_Transmit+0x172>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004550:	e0a4      	b.n	800469c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ce      	bne.n	80044fa <HAL_SPI_Transmit+0x120>
 800455c:	e07c      	b.n	8004658 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_SPI_Transmit+0x192>
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d170      	bne.n	800464e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d912      	bls.n	800459c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b02      	subs	r3, #2
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	87da      	strh	r2, [r3, #62]	; 0x3e
 800459a:	e058      	b.n	800464e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045c2:	e044      	b.n	800464e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d12b      	bne.n	800462a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d912      	bls.n	8004602 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	881a      	ldrh	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	1c9a      	adds	r2, r3, #2
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b02      	subs	r3, #2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004600:	e025      	b.n	800464e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004628:	e011      	b.n	800464e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462a:	f7fc fcdd 	bl	8000fe8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d803      	bhi.n	8004642 <HAL_SPI_Transmit+0x268>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Transmit+0x26e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800464c:	e026      	b.n	800469c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1b5      	bne.n	80045c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fcdb 	bl	8005018 <SPI_EndRxTxTransaction>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e000      	b.n	800469c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800469a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d112      	bne.n	80046fa <HAL_SPI_Receive+0x44>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2204      	movs	r2, #4
 80046e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f910 	bl	8004916 <HAL_SPI_TransmitReceive>
 80046f6:	4603      	mov	r3, r0
 80046f8:	e109      	b.n	800490e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_SPI_Receive+0x52>
 8004704:	2302      	movs	r3, #2
 8004706:	e102      	b.n	800490e <HAL_SPI_Receive+0x258>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004710:	f7fc fc6a 	bl	8000fe8 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004726:	e0e9      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_SPI_Receive+0x7e>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004738:	e0e0      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2204      	movs	r2, #4
 800473e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004784:	d908      	bls.n	8004798 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e007      	b.n	80047a8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d10f      	bne.n	80047d2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d007      	beq.n	80047f0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f8:	d867      	bhi.n	80048ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047fa:	e030      	b.n	800485e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d117      	bne.n	800483a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f103 020c 	add.w	r2, r3, #12
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004838:	e011      	b.n	800485e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483a:	f7fc fbd5 	bl	8000fe8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d803      	bhi.n	8004852 <HAL_SPI_Receive+0x19c>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Receive+0x1a2>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800485c:	e04e      	b.n	80048fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1c8      	bne.n	80047fc <HAL_SPI_Receive+0x146>
 800486a:	e034      	b.n	80048d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d115      	bne.n	80048a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	b292      	uxth	r2, r2
 8004886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048a4:	e011      	b.n	80048ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a6:	f7fc fb9f 	bl	8000fe8 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d803      	bhi.n	80048be <HAL_SPI_Receive+0x208>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d102      	bne.n	80048c4 <HAL_SPI_Receive+0x20e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048c8:	e018      	b.n	80048fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ca      	bne.n	800486c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fb44 	bl	8004f68 <SPI_EndRxTransaction>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e000      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

error :
 80048fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b08a      	sub	sp, #40	; 0x28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_SPI_TransmitReceive+0x26>
 8004938:	2302      	movs	r3, #2
 800493a:	e1fb      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x41e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004944:	f7fc fb50 	bl	8000fe8 <HAL_GetTick>
 8004948:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004950:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004960:	7efb      	ldrb	r3, [r7, #27]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d00e      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x6e>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496c:	d106      	bne.n	800497c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_SPI_TransmitReceive+0x66>
 8004976:	7efb      	ldrb	r3, [r7, #27]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d003      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004982:	e1cd      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x80>
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800499c:	e1c0      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	887a      	ldrh	r2, [r7, #2]
 80049ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049f4:	d802      	bhi.n	80049fc <HAL_SPI_TransmitReceive+0xe6>
 80049f6:	8a3b      	ldrh	r3, [r7, #16]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d908      	bls.n	8004a0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	e007      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d007      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a44:	d97c      	bls.n	8004b40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x13e>
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d169      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a78:	e056      	b.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d11b      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d113      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d11c      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x1f2>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b04:	2301      	movs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b08:	f7fc fa6e 	bl	8000fe8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d807      	bhi.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d003      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b26:	e0fb      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1a3      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x164>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d19d      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x164>
 8004b3e:	e0df      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x23a>
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	f040 80cb 	bne.w	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d912      	bls.n	8004b80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	881a      	ldrh	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	1c9a      	adds	r2, r3, #2
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b02      	subs	r3, #2
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b7e:	e0b2      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba6:	e09e      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d134      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12c      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d912      	bls.n	8004bf6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b02      	subs	r3, #2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e012      	b.n	8004c1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d148      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x3aa>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d042      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d923      	bls.n	8004c8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	b292      	uxth	r2, r2
 8004c52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b02      	subs	r3, #2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d81f      	bhi.n	8004cbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e016      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f103 020c 	add.w	r2, r3, #12
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc0:	f7fc f992 	bl	8000fe8 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d803      	bhi.n	8004cd8 <HAL_SPI_TransmitReceive+0x3c2>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x3c8>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ce4:	e01c      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f af5b 	bne.w	8004ba8 <HAL_SPI_TransmitReceive+0x292>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f47f af54 	bne.w	8004ba8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f987 	bl	8005018 <SPI_EndRxTxTransaction>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d1c:	e000      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	; 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d4c:	f7fc f94c 	bl	8000fe8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5c:	f7fc f944 	bl	8000fe8 <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	015b      	lsls	r3, r3, #5
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	e054      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d050      	beq.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d7c:	f7fc f934 	bl	8000fe8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004daa:	d111      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db4:	d004      	beq.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d107      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d10f      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e017      	b.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d19b      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000000 	.word	0x20000000

08004e4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e5a:	f7fc f8c5 	bl	8000fe8 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e6a:	f7fc f8bd 	bl	8000fe8 <HAL_GetTick>
 8004e6e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e70:	4b3c      	ldr	r3, [pc, #240]	; (8004f64 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	0d1b      	lsrs	r3, r3, #20
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e88:	e05f      	b.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e90:	d106      	bne.n	8004ea0 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d050      	beq.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea8:	f7fc f89e 	bl	8000fe8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <SPI_WaitFifoStateUntilTimeout+0x72>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d13d      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed6:	d111      	bne.n	8004efc <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee0:	d004      	beq.n	8004eec <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d107      	bne.n	8004efc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f04:	d10f      	bne.n	8004f26 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e010      	b.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d197      	bne.n	8004e8a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000000 	.word	0x20000000

08004f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7c:	d111      	bne.n	8004fa2 <SPI_EndRxTransaction+0x3a>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	d004      	beq.n	8004f92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d107      	bne.n	8004fa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff fec5 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e023      	b.n	8005010 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd0:	d11d      	bne.n	800500e <SPI_EndRxTransaction+0xa6>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fda:	d004      	beq.n	8004fe6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d113      	bne.n	800500e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff2a 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e000      	b.n	8005010 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ff0b 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e027      	b.n	800509c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fe70 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	f043 0220 	orr.w	r2, r3, #32
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e014      	b.n	800509c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fee4 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e000      	b.n	800509c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e040      	b.n	8005138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb fe18 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8c0 	bl	8005268 <UART_SetConfig>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e022      	b.n	8005138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fb12 	bl	8005724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800510e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800511e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb99 	bl	8005868 <UART_CheckIdleState>
 8005136:	4603      	mov	r3, r0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	2b20      	cmp	r3, #32
 8005156:	f040 8081 	bne.w	800525c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_UART_Transmit+0x26>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e079      	b.n	800525e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Transmit+0x38>
 8005174:	2302      	movs	r3, #2
 8005176:	e072      	b.n	800525e <HAL_UART_Transmit+0x11e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2221      	movs	r2, #33	; 0x21
 800518a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800518c:	f7fb ff2c 	bl	8000fe8 <HAL_GetTick>
 8005190:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d108      	bne.n	80051be <HAL_UART_Transmit+0x7e>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e003      	b.n	80051c6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80051ce:	e02d      	b.n	800522c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fb89 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e039      	b.n	800525e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051fc:	b292      	uxth	r2, r2
 80051fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	3302      	adds	r3, #2
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e008      	b.n	800521a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b292      	uxth	r2, r2
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1cb      	bne.n	80051d0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fb55 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e005      	b.n	800525e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800526c:	b088      	sub	sp, #32
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4313      	orrs	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4ba4      	ldr	r3, [pc, #656]	; (8005528 <UART_SetConfig+0x2c0>)
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	69f9      	ldr	r1, [r7, #28]
 800529e:	430b      	orrs	r3, r1
 80052a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a9a      	ldr	r2, [pc, #616]	; (800552c <UART_SetConfig+0x2c4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a91      	ldr	r2, [pc, #580]	; (8005530 <UART_SetConfig+0x2c8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d121      	bne.n	8005334 <UART_SetConfig+0xcc>
 80052f0:	4b90      	ldr	r3, [pc, #576]	; (8005534 <UART_SetConfig+0x2cc>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d816      	bhi.n	800532c <UART_SetConfig+0xc4>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x9c>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	08005321 	.word	0x08005321
 800530c:	0800531b 	.word	0x0800531b
 8005310:	08005327 	.word	0x08005327
 8005314:	2301      	movs	r3, #1
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e0be      	b.n	8005498 <UART_SetConfig+0x230>
 800531a:	2302      	movs	r3, #2
 800531c:	76fb      	strb	r3, [r7, #27]
 800531e:	e0bb      	b.n	8005498 <UART_SetConfig+0x230>
 8005320:	2304      	movs	r3, #4
 8005322:	76fb      	strb	r3, [r7, #27]
 8005324:	e0b8      	b.n	8005498 <UART_SetConfig+0x230>
 8005326:	2308      	movs	r3, #8
 8005328:	76fb      	strb	r3, [r7, #27]
 800532a:	e0b5      	b.n	8005498 <UART_SetConfig+0x230>
 800532c:	2310      	movs	r3, #16
 800532e:	76fb      	strb	r3, [r7, #27]
 8005330:	bf00      	nop
 8005332:	e0b1      	b.n	8005498 <UART_SetConfig+0x230>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a7f      	ldr	r2, [pc, #508]	; (8005538 <UART_SetConfig+0x2d0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d134      	bne.n	80053a8 <UART_SetConfig+0x140>
 800533e:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <UART_SetConfig+0x2cc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d829      	bhi.n	80053a0 <UART_SetConfig+0x138>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0xec>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005389 	.word	0x08005389
 8005358:	080053a1 	.word	0x080053a1
 800535c:	080053a1 	.word	0x080053a1
 8005360:	080053a1 	.word	0x080053a1
 8005364:	08005395 	.word	0x08005395
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053a1 	.word	0x080053a1
 8005370:	080053a1 	.word	0x080053a1
 8005374:	0800538f 	.word	0x0800538f
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a1 	.word	0x080053a1
 8005384:	0800539b 	.word	0x0800539b
 8005388:	2300      	movs	r3, #0
 800538a:	76fb      	strb	r3, [r7, #27]
 800538c:	e084      	b.n	8005498 <UART_SetConfig+0x230>
 800538e:	2302      	movs	r3, #2
 8005390:	76fb      	strb	r3, [r7, #27]
 8005392:	e081      	b.n	8005498 <UART_SetConfig+0x230>
 8005394:	2304      	movs	r3, #4
 8005396:	76fb      	strb	r3, [r7, #27]
 8005398:	e07e      	b.n	8005498 <UART_SetConfig+0x230>
 800539a:	2308      	movs	r3, #8
 800539c:	76fb      	strb	r3, [r7, #27]
 800539e:	e07b      	b.n	8005498 <UART_SetConfig+0x230>
 80053a0:	2310      	movs	r3, #16
 80053a2:	76fb      	strb	r3, [r7, #27]
 80053a4:	bf00      	nop
 80053a6:	e077      	b.n	8005498 <UART_SetConfig+0x230>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a63      	ldr	r2, [pc, #396]	; (800553c <UART_SetConfig+0x2d4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d120      	bne.n	80053f4 <UART_SetConfig+0x18c>
 80053b2:	4b60      	ldr	r3, [pc, #384]	; (8005534 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d00f      	beq.n	80053e0 <UART_SetConfig+0x178>
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d802      	bhi.n	80053ca <UART_SetConfig+0x162>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <UART_SetConfig+0x16c>
 80053c8:	e010      	b.n	80053ec <UART_SetConfig+0x184>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d005      	beq.n	80053da <UART_SetConfig+0x172>
 80053ce:	2b30      	cmp	r3, #48	; 0x30
 80053d0:	d009      	beq.n	80053e6 <UART_SetConfig+0x17e>
 80053d2:	e00b      	b.n	80053ec <UART_SetConfig+0x184>
 80053d4:	2300      	movs	r3, #0
 80053d6:	76fb      	strb	r3, [r7, #27]
 80053d8:	e05e      	b.n	8005498 <UART_SetConfig+0x230>
 80053da:	2302      	movs	r3, #2
 80053dc:	76fb      	strb	r3, [r7, #27]
 80053de:	e05b      	b.n	8005498 <UART_SetConfig+0x230>
 80053e0:	2304      	movs	r3, #4
 80053e2:	76fb      	strb	r3, [r7, #27]
 80053e4:	e058      	b.n	8005498 <UART_SetConfig+0x230>
 80053e6:	2308      	movs	r3, #8
 80053e8:	76fb      	strb	r3, [r7, #27]
 80053ea:	e055      	b.n	8005498 <UART_SetConfig+0x230>
 80053ec:	2310      	movs	r3, #16
 80053ee:	76fb      	strb	r3, [r7, #27]
 80053f0:	bf00      	nop
 80053f2:	e051      	b.n	8005498 <UART_SetConfig+0x230>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a51      	ldr	r2, [pc, #324]	; (8005540 <UART_SetConfig+0x2d8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d120      	bne.n	8005440 <UART_SetConfig+0x1d8>
 80053fe:	4b4d      	ldr	r3, [pc, #308]	; (8005534 <UART_SetConfig+0x2cc>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d00f      	beq.n	800542c <UART_SetConfig+0x1c4>
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d802      	bhi.n	8005416 <UART_SetConfig+0x1ae>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <UART_SetConfig+0x1b8>
 8005414:	e010      	b.n	8005438 <UART_SetConfig+0x1d0>
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d005      	beq.n	8005426 <UART_SetConfig+0x1be>
 800541a:	2bc0      	cmp	r3, #192	; 0xc0
 800541c:	d009      	beq.n	8005432 <UART_SetConfig+0x1ca>
 800541e:	e00b      	b.n	8005438 <UART_SetConfig+0x1d0>
 8005420:	2300      	movs	r3, #0
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e038      	b.n	8005498 <UART_SetConfig+0x230>
 8005426:	2302      	movs	r3, #2
 8005428:	76fb      	strb	r3, [r7, #27]
 800542a:	e035      	b.n	8005498 <UART_SetConfig+0x230>
 800542c:	2304      	movs	r3, #4
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	e032      	b.n	8005498 <UART_SetConfig+0x230>
 8005432:	2308      	movs	r3, #8
 8005434:	76fb      	strb	r3, [r7, #27]
 8005436:	e02f      	b.n	8005498 <UART_SetConfig+0x230>
 8005438:	2310      	movs	r3, #16
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	bf00      	nop
 800543e:	e02b      	b.n	8005498 <UART_SetConfig+0x230>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a39      	ldr	r2, [pc, #228]	; (800552c <UART_SetConfig+0x2c4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d124      	bne.n	8005494 <UART_SetConfig+0x22c>
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <UART_SetConfig+0x2cc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d012      	beq.n	8005480 <UART_SetConfig+0x218>
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d802      	bhi.n	8005466 <UART_SetConfig+0x1fe>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <UART_SetConfig+0x20c>
 8005464:	e012      	b.n	800548c <UART_SetConfig+0x224>
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d006      	beq.n	800547a <UART_SetConfig+0x212>
 800546c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005470:	d009      	beq.n	8005486 <UART_SetConfig+0x21e>
 8005472:	e00b      	b.n	800548c <UART_SetConfig+0x224>
 8005474:	2300      	movs	r3, #0
 8005476:	76fb      	strb	r3, [r7, #27]
 8005478:	e00e      	b.n	8005498 <UART_SetConfig+0x230>
 800547a:	2302      	movs	r3, #2
 800547c:	76fb      	strb	r3, [r7, #27]
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x230>
 8005480:	2304      	movs	r3, #4
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e008      	b.n	8005498 <UART_SetConfig+0x230>
 8005486:	2308      	movs	r3, #8
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e005      	b.n	8005498 <UART_SetConfig+0x230>
 800548c:	2310      	movs	r3, #16
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	bf00      	nop
 8005492:	e001      	b.n	8005498 <UART_SetConfig+0x230>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <UART_SetConfig+0x2c4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f040 8085 	bne.w	80055ae <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054a4:	7efb      	ldrb	r3, [r7, #27]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d823      	bhi.n	80054f2 <UART_SetConfig+0x28a>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x248>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054f3 	.word	0x080054f3
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054e3 	.word	0x080054e3
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	080054f3 	.word	0x080054f3
 80054d0:	080054eb 	.word	0x080054eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fe fae8 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80054d8:	6178      	str	r0, [r7, #20]
        break;
 80054da:	e00f      	b.n	80054fc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <UART_SetConfig+0x2dc>)
 80054de:	617b      	str	r3, [r7, #20]
        break;
 80054e0:	e00c      	b.n	80054fc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe fa4b 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80054e6:	6178      	str	r0, [r7, #20]
        break;
 80054e8:	e008      	b.n	80054fc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	617b      	str	r3, [r7, #20]
        break;
 80054f0:	e004      	b.n	80054fc <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	76bb      	strb	r3, [r7, #26]
        break;
 80054fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8102 	beq.w	8005708 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	429a      	cmp	r2, r3
 8005512:	d305      	bcc.n	8005520 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	429a      	cmp	r2, r3
 800551e:	d913      	bls.n	8005548 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	76bb      	strb	r3, [r7, #26]
 8005524:	e0f0      	b.n	8005708 <UART_SetConfig+0x4a0>
 8005526:	bf00      	nop
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40008000 	.word	0x40008000
 8005530:	40013800 	.word	0x40013800
 8005534:	40021000 	.word	0x40021000
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	40004c00 	.word	0x40004c00
 8005544:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4619      	mov	r1, r3
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	0214      	lsls	r4, r2, #8
 800555a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800555e:	020b      	lsls	r3, r1, #8
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	0852      	lsrs	r2, r2, #1
 8005566:	4611      	mov	r1, r2
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	eb13 0b01 	adds.w	fp, r3, r1
 8005570:	eb44 0c02 	adc.w	ip, r4, r2
 8005574:	4658      	mov	r0, fp
 8005576:	4661      	mov	r1, ip
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	461a      	mov	r2, r3
 8005582:	4623      	mov	r3, r4
 8005584:	f7fa fe26 	bl	80001d4 <__aeabi_uldivmod>
 8005588:	4603      	mov	r3, r0
 800558a:	460c      	mov	r4, r1
 800558c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005594:	d308      	bcc.n	80055a8 <UART_SetConfig+0x340>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559c:	d204      	bcs.n	80055a8 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e0af      	b.n	8005708 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	76bb      	strb	r3, [r7, #26]
 80055ac:	e0ac      	b.n	8005708 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b6:	d15b      	bne.n	8005670 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80055b8:	7efb      	ldrb	r3, [r7, #27]
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d827      	bhi.n	800560e <UART_SetConfig+0x3a6>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x35c>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fe fa5e 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80055ec:	6178      	str	r0, [r7, #20]
        break;
 80055ee:	e013      	b.n	8005618 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fe fa70 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 80055f4:	6178      	str	r0, [r7, #20]
        break;
 80055f6:	e00f      	b.n	8005618 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b49      	ldr	r3, [pc, #292]	; (8005720 <UART_SetConfig+0x4b8>)
 80055fa:	617b      	str	r3, [r7, #20]
        break;
 80055fc:	e00c      	b.n	8005618 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fe f9bd 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8005602:	6178      	str	r0, [r7, #20]
        break;
 8005604:	e008      	b.n	8005618 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	617b      	str	r3, [r7, #20]
        break;
 800560c:	e004      	b.n	8005618 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	76bb      	strb	r3, [r7, #26]
        break;
 8005616:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d074      	beq.n	8005708 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005a      	lsls	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	441a      	add	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d916      	bls.n	800566a <UART_SetConfig+0x402>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d212      	bcs.n	800566a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f023 030f 	bic.w	r3, r3, #15
 800564c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	b29a      	uxth	r2, r3
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	4313      	orrs	r3, r2
 800565e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	89fa      	ldrh	r2, [r7, #14]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e04e      	b.n	8005708 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	76bb      	strb	r3, [r7, #26]
 800566e:	e04b      	b.n	8005708 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005670:	7efb      	ldrb	r3, [r7, #27]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d827      	bhi.n	80056c6 <UART_SetConfig+0x45e>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x414>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fa02 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80056a4:	6178      	str	r0, [r7, #20]
        break;
 80056a6:	e013      	b.n	80056d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fa14 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 80056ac:	6178      	str	r0, [r7, #20]
        break;
 80056ae:	e00f      	b.n	80056d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <UART_SetConfig+0x4b8>)
 80056b2:	617b      	str	r3, [r7, #20]
        break;
 80056b4:	e00c      	b.n	80056d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe f961 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80056ba:	6178      	str	r0, [r7, #20]
        break;
 80056bc:	e008      	b.n	80056d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	617b      	str	r3, [r7, #20]
        break;
 80056c4:	e004      	b.n	80056d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	76bb      	strb	r3, [r7, #26]
        break;
 80056ce:	bf00      	nop
    }

    if (pclk != 0U)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d018      	beq.n	8005708 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	085a      	lsrs	r2, r3, #1
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	441a      	add	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d908      	bls.n	8005704 <UART_SetConfig+0x49c>
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d204      	bcs.n	8005704 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	e001      	b.n	8005708 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005714:	7ebb      	ldrb	r3, [r7, #26]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005720:	00f42400 	.word	0x00f42400

08005724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01a      	beq.n	800583a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005822:	d10a      	bne.n	800583a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af02      	add	r7, sp, #8
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005876:	f7fb fbb7 	bl	8000fe8 <HAL_GetTick>
 800587a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b08      	cmp	r3, #8
 8005888:	d10e      	bne.n	80058a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f82a 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e020      	b.n	80058ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d10e      	bne.n	80058d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f814 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e00a      	b.n	80058ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005902:	e05d      	b.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d059      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fb fb6c 	bl	8000fe8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <UART_WaitOnFlagUntilTimeout+0x30>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11b      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005930:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e042      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02b      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d123      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005980:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005990:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e00f      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4013      	ands	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d092      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 0014 	add.w	r0, r7, #20
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	b004      	add	sp, #16
 8005a08:	4770      	bx	lr

08005a0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a1a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4013      	ands	r3, r2
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a88:	b084      	sub	sp, #16
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	f107 0014 	add.w	r0, r7, #20
 8005a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	b004      	add	sp, #16
 8005ac8:	4770      	bx	lr
	...

08005acc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b09b      	sub	sp, #108	; 0x6c
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	78db      	ldrb	r3, [r3, #3]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d81f      	bhi.n	8005b3e <USB_ActivateEndpoint+0x72>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <USB_ActivateEndpoint+0x38>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b47 	.word	0x08005b47
 8005b10:	08005b23 	.word	0x08005b23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b20:	e012      	b.n	8005b48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b2e:	e00b      	b.n	8005b48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b3c:	e004      	b.n	8005b48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005b44:	e000      	b.n	8005b48 <USB_ActivateEndpoint+0x7c>
      break;
 8005b46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	b21a      	sxth	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b21b      	sxth	r3, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	7b1b      	ldrb	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 8149 	bne.w	8005e50 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8084 	beq.w	8005cd0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	00da      	lsls	r2, r3, #3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	88db      	ldrh	r3, [r3, #6]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	81fb      	strh	r3, [r7, #14]
 8005c0a:	89fb      	ldrh	r3, [r7, #14]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <USB_ActivateEndpoint+0x180>
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	81bb      	strh	r3, [r7, #12]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	89bb      	ldrh	r3, [r7, #12]
 8005c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d020      	beq.n	8005c96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6a:	813b      	strh	r3, [r7, #8]
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	f083 0320 	eor.w	r3, r3, #32
 8005c72:	813b      	strh	r3, [r7, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
 8005c94:	e27f      	b.n	8006196 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cac:	817b      	strh	r3, [r7, #10]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	897b      	ldrh	r3, [r7, #10]
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
 8005cce:	e262      	b.n	8006196 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	4413      	add	r3, r2
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	00da      	lsls	r2, r3, #3
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	88db      	ldrh	r3, [r3, #6]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	4413      	add	r3, r2
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d112      	bne.n	8005d56 <USB_ActivateEndpoint+0x28a>
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e02f      	b.n	8005db6 <USB_ActivateEndpoint+0x2ea>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5c:	d813      	bhi.n	8005d86 <USB_ActivateEndpoint+0x2ba>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	663b      	str	r3, [r7, #96]	; 0x60
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <USB_ActivateEndpoint+0x2ac>
 8005d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d74:	3301      	adds	r3, #1
 8005d76:	663b      	str	r3, [r7, #96]	; 0x60
 8005d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	029b      	lsls	r3, r3, #10
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e017      	b.n	8005db6 <USB_ActivateEndpoint+0x2ea>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <USB_ActivateEndpoint+0x2d4>
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	83fb      	strh	r3, [r7, #30]
 8005dc4:	8bfb      	ldrh	r3, [r7, #30]
 8005dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01b      	beq.n	8005e06 <USB_ActivateEndpoint+0x33a>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de4:	83bb      	strh	r3, [r7, #28]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	8bbb      	ldrh	r3, [r7, #28]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	837b      	strh	r3, [r7, #26]
 8005e1e:	8b7b      	ldrh	r3, [r7, #26]
 8005e20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e24:	837b      	strh	r3, [r7, #26]
 8005e26:	8b7b      	ldrh	r3, [r7, #26]
 8005e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e2c:	837b      	strh	r3, [r7, #26]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	8b7b      	ldrh	r3, [r7, #26]
 8005e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]
 8005e4e:	e1a2      	b.n	8006196 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e9c:	4413      	add	r3, r2
 8005e9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	00da      	lsls	r2, r3, #3
 8005ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	891b      	ldrh	r3, [r3, #8]
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed0:	4413      	add	r3, r2
 8005ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	895b      	ldrh	r3, [r3, #10]
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 8091 	bne.w	8006020 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01b      	beq.n	8005f4e <USB_ActivateEndpoint+0x482>
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01b      	beq.n	8005f9e <USB_ActivateEndpoint+0x4d2>
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffc:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
 800601e:	e0ba      	b.n	8006196 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01d      	beq.n	8006078 <USB_ActivateEndpoint+0x5ac>
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01d      	beq.n	80060d0 <USB_ActivateEndpoint+0x604>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	78db      	ldrb	r3, [r3, #3]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d024      	beq.n	8006122 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060f6:	f083 0320 	eor.w	r3, r3, #32
 80060fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
 8006120:	e01d      	b.n	800615e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006138:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800619a:	4618      	mov	r0, r3
 800619c:	376c      	adds	r7, #108	; 0x6c
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b08d      	sub	sp, #52	; 0x34
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	7b1b      	ldrb	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 808e 	bne.w	80062d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d044      	beq.n	800624e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	81bb      	strh	r3, [r7, #12]
 80061d2:	89bb      	ldrh	r3, [r7, #12]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <USB_DeactivateEndpoint+0x6c>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	817b      	strh	r3, [r7, #10]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	813b      	strh	r3, [r7, #8]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	893b      	ldrh	r3, [r7, #8]
 8006238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006248:	b29b      	uxth	r3, r3
 800624a:	8013      	strh	r3, [r2, #0]
 800624c:	e192      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	827b      	strh	r3, [r7, #18]
 800625c:	8a7b      	ldrh	r3, [r7, #18]
 800625e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01b      	beq.n	800629e <USB_DeactivateEndpoint+0xf6>
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	823b      	strh	r3, [r7, #16]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8a3b      	ldrh	r3, [r7, #16]
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b4:	81fb      	strh	r3, [r7, #14]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	89fb      	ldrh	r3, [r7, #14]
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	e14d      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 80a5 	bne.w	800642c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	843b      	strh	r3, [r7, #32]
 80062f0:	8c3b      	ldrh	r3, [r7, #32]
 80062f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01b      	beq.n	8006332 <USB_DeactivateEndpoint+0x18a>
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	83fb      	strh	r3, [r7, #30]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	83bb      	strh	r3, [r7, #28]
 8006340:	8bbb      	ldrh	r3, [r7, #28]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01b      	beq.n	8006382 <USB_DeactivateEndpoint+0x1da>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	837b      	strh	r3, [r7, #26]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	8b7b      	ldrh	r3, [r7, #26]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	833b      	strh	r3, [r7, #24]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	8b3b      	ldrh	r3, [r7, #24]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	82fb      	strh	r3, [r7, #22]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	8afb      	ldrh	r3, [r7, #22]
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	82bb      	strh	r3, [r7, #20]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	8abb      	ldrh	r3, [r7, #20]
 8006416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006426:	b29b      	uxth	r3, r3
 8006428:	8013      	strh	r3, [r2, #0]
 800642a:	e0a3      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800643a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <USB_DeactivateEndpoint+0x2d4>
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	857b      	strh	r3, [r7, #42]	; 0x2a
 800648a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <USB_DeactivateEndpoint+0x324>
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	847b      	strh	r3, [r7, #34]	; 0x22
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3734      	adds	r7, #52	; 0x34
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b0c4      	sub	sp, #272	; 0x110
 8006586:	af00      	add	r7, sp, #0
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	6018      	str	r0, [r3, #0]
 800658c:	463b      	mov	r3, r7
 800658e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8566 	bne.w	8007068 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d905      	bls.n	80065b8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065b6:	e004      	b.n	80065c2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	7b1b      	ldrb	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d12c      	bne.n	8006626 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6959      	ldr	r1, [r3, #20]
 80065d2:	463b      	mov	r3, r7
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	88da      	ldrh	r2, [r3, #6]
 80065d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065dc:	b29b      	uxth	r3, r3
 80065de:	1d38      	adds	r0, r7, #4
 80065e0:	6800      	ldr	r0, [r0, #0]
 80065e2:	f001 fa58 	bl	8007a96 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	1d3b      	adds	r3, r7, #4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	4413      	add	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	463b      	mov	r3, r7
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	00da      	lsls	r2, r3, #3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006618:	b29a      	uxth	r2, r3
 800661a:	f107 0310 	add.w	r3, r7, #16
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f000 bcec 	b.w	8006ffe <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b02      	cmp	r3, #2
 800662e:	f040 8356 	bne.w	8006cde <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a1a      	ldr	r2, [r3, #32]
 8006638:	463b      	mov	r3, r7
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	f240 82fa 	bls.w	8006c38 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	463b      	mov	r3, r7
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	441a      	add	r2, r3
 8006670:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 815e 	beq.w	800697c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d164      	bne.n	800679a <USB_EPStartXfer+0x218>
 80066d0:	1d3b      	adds	r3, r7, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	4413      	add	r3, r2
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d112      	bne.n	8006728 <USB_EPStartXfer+0x1a6>
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670c:	b29a      	uxth	r2, r3
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	e054      	b.n	80067d2 <USB_EPStartXfer+0x250>
 8006728:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800672c:	2b3e      	cmp	r3, #62	; 0x3e
 800672e:	d817      	bhi.n	8006760 <USB_EPStartXfer+0x1de>
 8006730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800673a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <USB_EPStartXfer+0x1ce>
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674a:	3301      	adds	r3, #1
 800674c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	b29b      	uxth	r3, r3
 8006756:	029b      	lsls	r3, r3, #10
 8006758:	b29a      	uxth	r2, r3
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e038      	b.n	80067d2 <USB_EPStartXfer+0x250>
 8006760:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800676a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <USB_EPStartXfer+0x1fe>
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677a:	3b01      	subs	r3, #1
 800677c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006784:	b29b      	uxth	r3, r3
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	b29b      	uxth	r3, r3
 800678a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006792:	b29a      	uxth	r2, r3
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e01b      	b.n	80067d2 <USB_EPStartXfer+0x250>
 800679a:	463b      	mov	r3, r7
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d116      	bne.n	80067d2 <USB_EPStartXfer+0x250>
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	4413      	add	r3, r2
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	00da      	lsls	r2, r3, #3
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30
 80067c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067d2:	463b      	mov	r3, r7
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	895b      	ldrh	r3, [r3, #10]
 80067d8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6959      	ldr	r1, [r3, #20]
 80067e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067ec:	1d38      	adds	r0, r7, #4
 80067ee:	6800      	ldr	r0, [r0, #0]
 80067f0:	f001 f951 	bl	8007a96 <USB_WritePMA>
            ep->xfer_buff += len;
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fe:	441a      	add	r2, r3
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d90e      	bls.n	8006834 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	621a      	str	r2, [r3, #32]
 8006832:	e008      	b.n	8006846 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d164      	bne.n	800691a <USB_EPStartXfer+0x398>
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	00da      	lsls	r2, r3, #3
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	2b00      	cmp	r3, #0
 8006880:	d112      	bne.n	80068a8 <USB_EPStartXfer+0x326>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800688c:	b29a      	uxth	r2, r3
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	e057      	b.n	8006958 <USB_EPStartXfer+0x3d6>
 80068a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ac:	2b3e      	cmp	r3, #62	; 0x3e
 80068ae:	d817      	bhi.n	80068e0 <USB_EPStartXfer+0x35e>
 80068b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <USB_EPStartXfer+0x34e>
 80068c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ca:	3301      	adds	r3, #1
 80068cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	b29a      	uxth	r2, r3
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e03b      	b.n	8006958 <USB_EPStartXfer+0x3d6>
 80068e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <USB_EPStartXfer+0x37e>
 80068f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068fa:	3b01      	subs	r3, #1
 80068fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006900:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006904:	b29b      	uxth	r3, r3
 8006906:	029b      	lsls	r3, r3, #10
 8006908:	b29b      	uxth	r3, r3
 800690a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006912:	b29a      	uxth	r2, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	e01e      	b.n	8006958 <USB_EPStartXfer+0x3d6>
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d119      	bne.n	8006958 <USB_EPStartXfer+0x3d6>
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	4413      	add	r3, r2
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	00da      	lsls	r2, r3, #3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	4413      	add	r3, r2
 8006948:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006952:	b29a      	uxth	r2, r3
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	891b      	ldrh	r3, [r3, #8]
 800695e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006962:	463b      	mov	r3, r7
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6959      	ldr	r1, [r3, #20]
 8006968:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800696c:	b29b      	uxth	r3, r3
 800696e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006972:	1d38      	adds	r0, r7, #4
 8006974:	6800      	ldr	r0, [r0, #0]
 8006976:	f001 f88e 	bl	8007a96 <USB_WritePMA>
 800697a:	e340      	b.n	8006ffe <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d164      	bne.n	8006a50 <USB_EPStartXfer+0x4ce>
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	4413      	add	r3, r2
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d112      	bne.n	80069de <USB_EPStartXfer+0x45c>
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e057      	b.n	8006a8e <USB_EPStartXfer+0x50c>
 80069de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e2:	2b3e      	cmp	r3, #62	; 0x3e
 80069e4:	d817      	bhi.n	8006a16 <USB_EPStartXfer+0x494>
 80069e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <USB_EPStartXfer+0x484>
 80069fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e03b      	b.n	8006a8e <USB_EPStartXfer+0x50c>
 8006a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <USB_EPStartXfer+0x4b4>
 8006a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a30:	3b01      	subs	r3, #1
 8006a32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e01e      	b.n	8006a8e <USB_EPStartXfer+0x50c>
 8006a50:	463b      	mov	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d119      	bne.n	8006a8e <USB_EPStartXfer+0x50c>
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6e:	4413      	add	r3, r2
 8006a70:	657b      	str	r3, [r7, #84]	; 0x54
 8006a72:	463b      	mov	r3, r7
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a82:	653b      	str	r3, [r7, #80]	; 0x50
 8006a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	891b      	ldrh	r3, [r3, #8]
 8006a94:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6959      	ldr	r1, [r3, #20]
 8006a9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006aa8:	1d38      	adds	r0, r7, #4
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	f000 fff3 	bl	8007a96 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aba:	441a      	add	r2, r3
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a1a      	ldr	r2, [r3, #32]
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d90e      	bls.n	8006af0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a1a      	ldr	r2, [r3, #32]
 8006ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	463b      	mov	r3, r7
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	621a      	str	r2, [r3, #32]
 8006aee:	e008      	b.n	8006b02 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006af0:	463b      	mov	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d164      	bne.n	8006bdc <USB_EPStartXfer+0x65a>
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b18:	1d3b      	adds	r3, r7, #4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	4413      	add	r3, r2
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	00da      	lsls	r2, r3, #3
 8006b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d112      	bne.n	8006b6a <USB_EPStartXfer+0x5e8>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	e054      	b.n	8006c14 <USB_EPStartXfer+0x692>
 8006b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b70:	d817      	bhi.n	8006ba2 <USB_EPStartXfer+0x620>
 8006b72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <USB_EPStartXfer+0x610>
 8006b88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	029b      	lsls	r3, r3, #10
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e038      	b.n	8006c14 <USB_EPStartXfer+0x692>
 8006ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <USB_EPStartXfer+0x640>
 8006bb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	029b      	lsls	r3, r3, #10
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e01b      	b.n	8006c14 <USB_EPStartXfer+0x692>
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d116      	bne.n	8006c14 <USB_EPStartXfer+0x692>
 8006be6:	1d3b      	adds	r3, r7, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf4:	4413      	add	r3, r2
 8006bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	00da      	lsls	r2, r3, #3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c02:	4413      	add	r3, r2
 8006c04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	895b      	ldrh	r3, [r3, #10]
 8006c1a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6959      	ldr	r1, [r3, #20]
 8006c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c2e:	1d38      	adds	r0, r7, #4
 8006c30:	6800      	ldr	r0, [r0, #0]
 8006c32:	f000 ff30 	bl	8007a96 <USB_WritePMA>
 8006c36:	e1e2      	b.n	8006ffe <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	463b      	mov	r3, r7
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006c60:	1d3b      	adds	r3, r7, #4
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	463b      	mov	r3, r7
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c86:	1d3b      	adds	r3, r7, #4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c8c:	1d3b      	adds	r3, r7, #4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c9a:	4413      	add	r3, r2
 8006c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	00da      	lsls	r2, r3, #3
 8006ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca8:	4413      	add	r3, r2
 8006caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cba:	463b      	mov	r3, r7
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	891b      	ldrh	r3, [r3, #8]
 8006cc0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6959      	ldr	r1, [r3, #20]
 8006cca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cd4:	1d38      	adds	r0, r7, #4
 8006cd6:	6800      	ldr	r0, [r0, #0]
 8006cd8:	f000 fedd 	bl	8007a96 <USB_WritePMA>
 8006cdc:	e18f      	b.n	8006ffe <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 808f 	beq.w	8006e18 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d164      	bne.n	8006dd4 <USB_EPStartXfer+0x852>
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1e:	4413      	add	r3, r2
 8006d20:	673b      	str	r3, [r7, #112]	; 0x70
 8006d22:	463b      	mov	r3, r7
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	00da      	lsls	r2, r3, #3
 8006d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <USB_EPStartXfer+0x7e0>
 8006d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e054      	b.n	8006e0c <USB_EPStartXfer+0x88a>
 8006d62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d66:	2b3e      	cmp	r3, #62	; 0x3e
 8006d68:	d817      	bhi.n	8006d9a <USB_EPStartXfer+0x818>
 8006d6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <USB_EPStartXfer+0x808>
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e038      	b.n	8006e0c <USB_EPStartXfer+0x88a>
 8006d9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <USB_EPStartXfer+0x838>
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	029b      	lsls	r3, r3, #10
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e01b      	b.n	8006e0c <USB_EPStartXfer+0x88a>
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d116      	bne.n	8006e0c <USB_EPStartXfer+0x88a>
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dec:	4413      	add	r3, r2
 8006dee:	67bb      	str	r3, [r7, #120]	; 0x78
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	00da      	lsls	r2, r3, #3
 8006df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e00:	677b      	str	r3, [r7, #116]	; 0x74
 8006e02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	895b      	ldrh	r3, [r3, #10]
 8006e12:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006e16:	e097      	b.n	8006f48 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e18:	463b      	mov	r3, r7
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d168      	bne.n	8006ef4 <USB_EPStartXfer+0x972>
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00da      	lsls	r2, r3, #3
 8006e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d112      	bne.n	8006e82 <USB_EPStartXfer+0x900>
 8006e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e05d      	b.n	8006f3e <USB_EPStartXfer+0x9bc>
 8006e82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e86:	2b3e      	cmp	r3, #62	; 0x3e
 8006e88:	d817      	bhi.n	8006eba <USB_EPStartXfer+0x938>
 8006e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <USB_EPStartXfer+0x928>
 8006ea0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006eaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	029b      	lsls	r3, r3, #10
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e041      	b.n	8006f3e <USB_EPStartXfer+0x9bc>
 8006eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <USB_EPStartXfer+0x958>
 8006ed0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e024      	b.n	8006f3e <USB_EPStartXfer+0x9bc>
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d11f      	bne.n	8006f3e <USB_EPStartXfer+0x9bc>
 8006efe:	1d3b      	adds	r3, r7, #4
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f16:	4413      	add	r3, r2
 8006f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	00da      	lsls	r2, r3, #3
 8006f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	891b      	ldrh	r3, [r3, #8]
 8006f44:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6959      	ldr	r1, [r3, #20]
 8006f4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006f58:	1d38      	adds	r0, r7, #4
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	f000 fd9b 	bl	8007a96 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d122      	bne.n	8006fb0 <USB_EPStartXfer+0xa2e>
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f84:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8013      	strh	r3, [r2, #0]
 8006fae:	e026      	b.n	8006ffe <USB_EPStartXfer+0xa7c>
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d121      	bne.n	8006ffe <USB_EPStartXfer+0xa7c>
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006fd8:	1d3b      	adds	r3, r7, #4
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f107 020e 	add.w	r2, r7, #14
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	8013      	strh	r3, [r2, #0]
 800701e:	f107 030e 	add.w	r3, r7, #14
 8007022:	f107 020e 	add.w	r2, r7, #14
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	f082 0210 	eor.w	r2, r2, #16
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	f107 030e 	add.w	r3, r7, #14
 8007032:	f107 020e 	add.w	r2, r7, #14
 8007036:	8812      	ldrh	r2, [r2, #0]
 8007038:	f082 0220 	eor.w	r2, r2, #32
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	441a      	add	r2, r3
 800704c:	f107 030e 	add.w	r3, r7, #14
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e3b5      	b.n	80077d4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	7b1b      	ldrb	r3, [r3, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 8090 	bne.w	8007194 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007074:	463b      	mov	r3, r7
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	429a      	cmp	r2, r3
 8007082:	d90e      	bls.n	80070a2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007084:	463b      	mov	r3, r7
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800708e:	463b      	mov	r3, r7
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007098:	1ad2      	subs	r2, r2, r3
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	619a      	str	r2, [r3, #24]
 80070a0:	e008      	b.n	80070b4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80070ac:	463b      	mov	r3, r7
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2200      	movs	r2, #0
 80070b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070bc:	1d3b      	adds	r3, r7, #4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070cc:	4413      	add	r3, r2
 80070ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070d2:	463b      	mov	r3, r7
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00da      	lsls	r2, r3, #3
 80070da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d116      	bne.n	800711e <USB_EPStartXfer+0xb9c>
 80070f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e32c      	b.n	8007778 <USB_EPStartXfer+0x11f6>
 800711e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007122:	2b3e      	cmp	r3, #62	; 0x3e
 8007124:	d818      	bhi.n	8007158 <USB_EPStartXfer+0xbd6>
 8007126:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007130:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <USB_EPStartXfer+0xbc4>
 800713c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007140:	3301      	adds	r3, #1
 8007142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800714a:	b29b      	uxth	r3, r3
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	e30f      	b.n	8007778 <USB_EPStartXfer+0x11f6>
 8007158:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007162:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <USB_EPStartXfer+0xbf6>
 800716e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007172:	3b01      	subs	r3, #1
 8007174:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800717c:	b29b      	uxth	r3, r3
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e2f1      	b.n	8007778 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	78db      	ldrb	r3, [r3, #3]
 800719a:	2b02      	cmp	r3, #2
 800719c:	f040 818f 	bne.w	80074be <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d175      	bne.n	8007296 <USB_EPStartXfer+0xd14>
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071b2:	1d3b      	adds	r3, r7, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c2:	4413      	add	r3, r2
 80071c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071d4:	4413      	add	r3, r2
 80071d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071de:	463b      	mov	r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d116      	bne.n	8007216 <USB_EPStartXfer+0xc94>
 80071e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e065      	b.n	80072e2 <USB_EPStartXfer+0xd60>
 8007216:	463b      	mov	r3, r7
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b3e      	cmp	r3, #62	; 0x3e
 800721e:	d81a      	bhi.n	8007256 <USB_EPStartXfer+0xcd4>
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800722c:	463b      	mov	r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USB_EPStartXfer+0xcc2>
 800723a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723e:	3301      	adds	r3, #1
 8007240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007248:	b29b      	uxth	r3, r3
 800724a:	029b      	lsls	r3, r3, #10
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	e045      	b.n	80072e2 <USB_EPStartXfer+0xd60>
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	095b      	lsrs	r3, r3, #5
 800725e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007262:	463b      	mov	r3, r7
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <USB_EPStartXfer+0xcf8>
 8007270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007274:	3b01      	subs	r3, #1
 8007276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800727a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800727e:	b29b      	uxth	r3, r3
 8007280:	029b      	lsls	r3, r3, #10
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728c:	b29a      	uxth	r2, r3
 800728e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	e025      	b.n	80072e2 <USB_EPStartXfer+0xd60>
 8007296:	463b      	mov	r3, r7
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d120      	bne.n	80072e2 <USB_EPStartXfer+0xd60>
 80072a0:	1d3b      	adds	r3, r7, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072a8:	1d3b      	adds	r3, r7, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072b8:	4413      	add	r3, r2
 80072ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072be:	463b      	mov	r3, r7
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	00da      	lsls	r2, r3, #3
 80072c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072ea:	463b      	mov	r3, r7
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d175      	bne.n	80073e0 <USB_EPStartXfer+0xe5e>
 80072f4:	1d3b      	adds	r3, r7, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007304:	b29b      	uxth	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800730c:	4413      	add	r3, r2
 800730e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007312:	463b      	mov	r3, r7
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	00da      	lsls	r2, r3, #3
 800731a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800731e:	4413      	add	r3, r2
 8007320:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007328:	463b      	mov	r3, r7
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d116      	bne.n	8007360 <USB_EPStartXfer+0xdde>
 8007332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e061      	b.n	8007424 <USB_EPStartXfer+0xea2>
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b3e      	cmp	r3, #62	; 0x3e
 8007368:	d81a      	bhi.n	80073a0 <USB_EPStartXfer+0xe1e>
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <USB_EPStartXfer+0xe0c>
 8007384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007388:	3301      	adds	r3, #1
 800738a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	b29b      	uxth	r3, r3
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	b29a      	uxth	r2, r3
 8007398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	e041      	b.n	8007424 <USB_EPStartXfer+0xea2>
 80073a0:	463b      	mov	r3, r7
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <USB_EPStartXfer+0xe42>
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	3b01      	subs	r3, #1
 80073c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	029b      	lsls	r3, r3, #10
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	e021      	b.n	8007424 <USB_EPStartXfer+0xea2>
 80073e0:	463b      	mov	r3, r7
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d11c      	bne.n	8007424 <USB_EPStartXfer+0xea2>
 80073ea:	1d3b      	adds	r3, r7, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073fa:	4413      	add	r3, r2
 80073fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800740c:	4413      	add	r3, r2
 800740e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007416:	463b      	mov	r3, r7
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007422:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007424:	463b      	mov	r3, r7
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 81a4 	beq.w	8007778 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007444:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <USB_EPStartXfer+0xeda>
 8007450:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800745c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 8187 	bne.w	8007778 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800746a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 8180 	bne.w	8007778 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	463b      	mov	r3, r7
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	441a      	add	r2, r3
 80074a4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80074a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	8013      	strh	r3, [r2, #0]
 80074bc:	e15c      	b.n	8007778 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074be:	463b      	mov	r3, r7
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	f040 8155 	bne.w	8007774 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80074ca:	463b      	mov	r3, r7
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	463b      	mov	r3, r7
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d90e      	bls.n	80074f8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80074da:	463b      	mov	r3, r7
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80074e4:	463b      	mov	r3, r7
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	619a      	str	r2, [r3, #24]
 80074f6:	e008      	b.n	800750a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80074f8:	463b      	mov	r3, r7
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007502:	463b      	mov	r3, r7
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2200      	movs	r2, #0
 8007508:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d16f      	bne.n	80075f4 <USB_EPStartXfer+0x1072>
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800751c:	1d3b      	adds	r3, r7, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800752c:	4413      	add	r3, r2
 800752e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007532:	463b      	mov	r3, r7
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	00da      	lsls	r2, r3, #3
 800753a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800753e:	4413      	add	r3, r2
 8007540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007548:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800754c:	2b00      	cmp	r3, #0
 800754e:	d116      	bne.n	800757e <USB_EPStartXfer+0xffc>
 8007550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e05f      	b.n	800763e <USB_EPStartXfer+0x10bc>
 800757e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007582:	2b3e      	cmp	r3, #62	; 0x3e
 8007584:	d818      	bhi.n	80075b8 <USB_EPStartXfer+0x1036>
 8007586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <USB_EPStartXfer+0x1024>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	029b      	lsls	r3, r3, #10
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e042      	b.n	800763e <USB_EPStartXfer+0x10bc>
 80075b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <USB_EPStartXfer+0x1056>
 80075ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	b29b      	uxth	r3, r3
 80075de:	029b      	lsls	r3, r3, #10
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075f0:	801a      	strh	r2, [r3, #0]
 80075f2:	e024      	b.n	800763e <USB_EPStartXfer+0x10bc>
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d11f      	bne.n	800763e <USB_EPStartXfer+0x10bc>
 80075fe:	1d3b      	adds	r3, r7, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007616:	4413      	add	r3, r2
 8007618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	00da      	lsls	r2, r3, #3
 8007624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007628:	4413      	add	r3, r2
 800762a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800762e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007632:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007636:	b29a      	uxth	r2, r3
 8007638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007646:	463b      	mov	r3, r7
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d16f      	bne.n	8007730 <USB_EPStartXfer+0x11ae>
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800766e:	463b      	mov	r3, r7
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00da      	lsls	r2, r3, #3
 8007676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800767a:	4413      	add	r3, r2
 800767c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007688:	2b00      	cmp	r3, #0
 800768a:	d116      	bne.n	80076ba <USB_EPStartXfer+0x1138>
 800768c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007698:	b29a      	uxth	r2, r3
 800769a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e05e      	b.n	8007778 <USB_EPStartXfer+0x11f6>
 80076ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076be:	2b3e      	cmp	r3, #62	; 0x3e
 80076c0:	d818      	bhi.n	80076f4 <USB_EPStartXfer+0x1172>
 80076c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <USB_EPStartXfer+0x1160>
 80076d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076dc:	3301      	adds	r3, #1
 80076de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	029b      	lsls	r3, r3, #10
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e041      	b.n	8007778 <USB_EPStartXfer+0x11f6>
 80076f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USB_EPStartXfer+0x1192>
 800770a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770e:	3b01      	subs	r3, #1
 8007710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007718:	b29b      	uxth	r3, r3
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29a      	uxth	r2, r3
 8007728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e023      	b.n	8007778 <USB_EPStartXfer+0x11f6>
 8007730:	463b      	mov	r3, r7
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d11e      	bne.n	8007778 <USB_EPStartXfer+0x11f6>
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774a:	4413      	add	r3, r2
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007750:	463b      	mov	r3, r7
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	00da      	lsls	r2, r3, #3
 8007758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800775c:	4413      	add	r3, r2
 800775e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007766:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800776a:	b29a      	uxth	r2, r3
 800776c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	e001      	b.n	8007778 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e02e      	b.n	80077d6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007796:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800779a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800779e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80077a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	463b      	mov	r3, r7
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d020      	beq.n	8007834 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007808:	81bb      	strh	r3, [r7, #12]
 800780a:	89bb      	ldrh	r3, [r7, #12]
 800780c:	f083 0310 	eor.w	r3, r3, #16
 8007810:	81bb      	strh	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	89bb      	ldrh	r3, [r7, #12]
 800781e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782e:	b29b      	uxth	r3, r3
 8007830:	8013      	strh	r3, [r2, #0]
 8007832:	e01f      	b.n	8007874 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	81fb      	strh	r3, [r7, #14]
 800784c:	89fb      	ldrh	r3, [r7, #14]
 800784e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007852:	81fb      	strh	r3, [r7, #14]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	89fb      	ldrh	r3, [r7, #14]
 8007860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007870:	b29b      	uxth	r3, r3
 8007872:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007882:	b480      	push	{r7}
 8007884:	b087      	sub	sp, #28
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	7b1b      	ldrb	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 809d 	bne.w	80079d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d04c      	beq.n	8007938 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	823b      	strh	r3, [r7, #16]
 80078ac:	8a3b      	ldrh	r3, [r7, #16]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01b      	beq.n	80078ee <USB_EPClearStall+0x6c>
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	81fb      	strh	r3, [r7, #14]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	89fb      	ldrh	r3, [r7, #14]
 80078da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	78db      	ldrb	r3, [r3, #3]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d06c      	beq.n	80079d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	81bb      	strh	r3, [r7, #12]
 800790e:	89bb      	ldrh	r3, [r7, #12]
 8007910:	f083 0320 	eor.w	r3, r3, #32
 8007914:	81bb      	strh	r3, [r7, #12]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	441a      	add	r2, r3
 8007920:	89bb      	ldrh	r3, [r7, #12]
 8007922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]
 8007936:	e04b      	b.n	80079d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	82fb      	strh	r3, [r7, #22]
 8007946:	8afb      	ldrh	r3, [r7, #22]
 8007948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <USB_EPClearStall+0x106>
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	82bb      	strh	r3, [r7, #20]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	8abb      	ldrh	r3, [r7, #20]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	827b      	strh	r3, [r7, #18]
 80079a0:	8a7b      	ldrh	r3, [r7, #18]
 80079a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079a6:	827b      	strh	r3, [r7, #18]
 80079a8:	8a7b      	ldrh	r3, [r7, #18]
 80079aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079ae:	827b      	strh	r3, [r7, #18]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	8a7b      	ldrh	r3, [r7, #18]
 80079bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b08d      	sub	sp, #52	; 0x34
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	80fb      	strh	r3, [r7, #6]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007aac:	88bb      	ldrh	r3, [r7, #4]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007abc:	88fa      	ldrh	r2, [r7, #6]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007acc:	e01b      	b.n	8007b06 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	3302      	adds	r3, #2
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	3301      	adds	r3, #1
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	3b01      	subs	r3, #1
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e0      	bne.n	8007ace <USB_WritePMA+0x38>
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	3734      	adds	r7, #52	; 0x34
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b08b      	sub	sp, #44	; 0x2c
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	460b      	mov	r3, r1
 8007b28:	80fb      	strh	r3, [r7, #6]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b2e:	88bb      	ldrh	r3, [r7, #4]
 8007b30:	085b      	lsrs	r3, r3, #1
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4e:	e018      	b.n	8007b82 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e3      	bne.n	8007b50 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b88:	88bb      	ldrh	r3, [r7, #4]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	701a      	strb	r2, [r3, #0]
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	372c      	adds	r7, #44	; 0x2c
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bc0:	f002 f968 	bl	8009e94 <malloc>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e066      	b.n	8007ca8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7c1b      	ldrb	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d119      	bne.n	8007c1e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bee:	2202      	movs	r2, #2
 8007bf0:	2181      	movs	r1, #129	; 0x81
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 ff20 	bl	8009a38 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c02:	2202      	movs	r2, #2
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 ff16 	bl	8009a38 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2210      	movs	r2, #16
 8007c18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c1c:	e016      	b.n	8007c4c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	2202      	movs	r2, #2
 8007c22:	2181      	movs	r1, #129	; 0x81
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 ff07 	bl	8009a38 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	2202      	movs	r2, #2
 8007c34:	2101      	movs	r1, #1
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fefe 	bl	8009a38 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2210      	movs	r2, #16
 8007c48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	2203      	movs	r2, #3
 8007c50:	2182      	movs	r1, #130	; 0x82
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fef0 	bl	8009a38 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7c1b      	ldrb	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f002 f84e 	bl	8009d30 <USBD_LL_PrepareReceive>
 8007c94:	e007      	b.n	8007ca6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f002 f845 	bl	8009d30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cbc:	2181      	movs	r1, #129	; 0x81
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fef8 	bl	8009ab4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fef1 	bl	8009ab4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007cda:	2182      	movs	r1, #130	; 0x82
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fee9 	bl	8009ab4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f002 f8c9 	bl	8009ea4 <free>
    pdev->pClassData = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d03a      	beq.n	8007dc4 <USBD_CDC_Setup+0xa0>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	f040 8097 	bne.w	8007e82 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d029      	beq.n	8007db0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da11      	bge.n	8007d8a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	88d2      	ldrh	r2, [r2, #6]
 8007d78:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d7a:	6939      	ldr	r1, [r7, #16]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fa5d 	bl	8009242 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d88:	e082      	b.n	8007e90 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	785a      	ldrb	r2, [r3, #1]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	88db      	ldrh	r3, [r3, #6]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007da0:	6939      	ldr	r1, [r7, #16]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fa76 	bl	800929a <USBD_CtlPrepareRx>
      break;
 8007dae:	e06f      	b.n	8007e90 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	7850      	ldrb	r0, [r2, #1]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	4798      	blx	r3
      break;
 8007dc2:	e065      	b.n	8007e90 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b0b      	cmp	r3, #11
 8007dca:	d84f      	bhi.n	8007e6c <USBD_CDC_Setup+0x148>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBD_CDC_Setup+0xb0>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007e05 	.word	0x08007e05
 8007dd8:	08007e7b 	.word	0x08007e7b
 8007ddc:	08007e6d 	.word	0x08007e6d
 8007de0:	08007e6d 	.word	0x08007e6d
 8007de4:	08007e6d 	.word	0x08007e6d
 8007de8:	08007e6d 	.word	0x08007e6d
 8007dec:	08007e6d 	.word	0x08007e6d
 8007df0:	08007e6d 	.word	0x08007e6d
 8007df4:	08007e6d 	.word	0x08007e6d
 8007df8:	08007e6d 	.word	0x08007e6d
 8007dfc:	08007e2d 	.word	0x08007e2d
 8007e00:	08007e55 	.word	0x08007e55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d107      	bne.n	8007e1e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	2202      	movs	r2, #2
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fa13 	bl	8009242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e1c:	e030      	b.n	8007e80 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f99d 	bl	8009160 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e26:	2303      	movs	r3, #3
 8007e28:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2a:	e029      	b.n	8007e80 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d107      	bne.n	8007e46 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e36:	f107 030f 	add.w	r3, r7, #15
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f9ff 	bl	8009242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e44:	e01c      	b.n	8007e80 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f989 	bl	8009160 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	75fb      	strb	r3, [r7, #23]
          break;
 8007e52:	e015      	b.n	8007e80 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d00f      	beq.n	8007e7e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 f97d 	bl	8009160 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e66:	2303      	movs	r3, #3
 8007e68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e6a:	e008      	b.n	8007e7e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f976 	bl	8009160 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	75fb      	strb	r3, [r7, #23]
          break;
 8007e78:	e002      	b.n	8007e80 <USBD_CDC_Setup+0x15c>
          break;
 8007e7a:	bf00      	nop
 8007e7c:	e008      	b.n	8007e90 <USBD_CDC_Setup+0x16c>
          break;
 8007e7e:	bf00      	nop
      }
      break;
 8007e80:	e006      	b.n	8007e90 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f96b 	bl	8009160 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop

08007e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e04f      	b.n	8007f5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d029      	beq.n	8007f30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	3318      	adds	r3, #24
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	78f9      	ldrb	r1, [r7, #3]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4403      	add	r3, r0
 8007efc:	3338      	adds	r3, #56	; 0x38
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f04:	fb03 f301 	mul.w	r3, r3, r1
 8007f08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d110      	bne.n	8007f30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3318      	adds	r3, #24
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f22:	78f9      	ldrb	r1, [r7, #3]
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fec9 	bl	8009cc0 <USBD_LL_Transmit>
 8007f2e:	e015      	b.n	8007f5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e015      	b.n	8007fb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 ff07 	bl	8009da0 <USBD_LL_GetRxDataSize>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <USBD_CDC_EP0_RxReady+0x46>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fdc:	2bff      	cmp	r3, #255	; 0xff
 8007fde:	d010      	beq.n	8008002 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007fee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2243      	movs	r2, #67	; 0x43
 8008018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800801a:	4b03      	ldr	r3, [pc, #12]	; (8008028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	20000094 	.word	0x20000094

0800802c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2243      	movs	r2, #67	; 0x43
 8008038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800803a:	4b03      	ldr	r3, [pc, #12]	; (8008048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000050 	.word	0x20000050

0800804c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2243      	movs	r2, #67	; 0x43
 8008058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200000d8 	.word	0x200000d8

0800806c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	220a      	movs	r2, #10
 8008078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	2000000c 	.word	0x2000000c

0800808c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	e004      	b.n	80080aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b087      	sub	sp, #28
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800811e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e016      	b.n	800815c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7c1b      	ldrb	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	2101      	movs	r1, #1
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fdf4 	bl	8009d30 <USBD_LL_PrepareReceive>
 8008148:	e007      	b.n	800815a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	2101      	movs	r1, #1
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fdeb 	bl	8009d30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e01f      	b.n	80081bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	79fa      	ldrb	r2, [r7, #7]
 80081ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f001 fbad 	bl	8009910 <USBD_LL_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	e016      	b.n	800820a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	f107 020e 	add.w	r2, r7, #14
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fbda 	bl	80099d4 <USBD_LL_Start>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
  }

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 ff16 	bl	80090ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d00e      	beq.n	8008302 <USBD_LL_SetupStage+0x5a>
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d302      	bcc.n	80082ee <USBD_LL_SetupStage+0x46>
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d014      	beq.n	8008316 <USBD_LL_SetupStage+0x6e>
 80082ec:	e01d      	b.n	800832a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9d6 	bl	80086a8 <USBD_StdDevReq>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008300:	e020      	b.n	8008344 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa3a 	bl	8008784 <USBD_StdItfReq>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e016      	b.n	8008344 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa76 	bl	8008810 <USBD_StdEPReq>
 8008324:	4603      	mov	r3, r0
 8008326:	73fb      	strb	r3, [r7, #15]
      break;
 8008328:	e00c      	b.n	8008344 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fbf1 	bl	8009b20 <USBD_LL_StallEP>
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
      break;
 8008342:	bf00      	nop
  }

  return ret;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	460b      	mov	r3, r1
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d137      	bne.n	80083d2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008368:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008370:	2b03      	cmp	r3, #3
 8008372:	d14a      	bne.n	800840a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	429a      	cmp	r2, r3
 800837e:	d913      	bls.n	80083a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	1ad2      	subs	r2, r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	4293      	cmp	r3, r2
 8008398:	bf28      	it	cs
 800839a:	4613      	movcs	r3, r2
 800839c:	461a      	mov	r2, r3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 ff97 	bl	80092d4 <USBD_CtlContinueRx>
 80083a6:	e030      	b.n	800840a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d105      	bne.n	80083ca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 ff93 	bl	80092f6 <USBD_CtlSendStatus>
 80083d0:	e01b      	b.n	800840a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d013      	beq.n	8008406 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d10e      	bne.n	8008406 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	7afa      	ldrb	r2, [r7, #11]
 80083f2:	4611      	mov	r1, r2
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	e002      	b.n	800840c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008406:	2303      	movs	r3, #3
 8008408:	e000      	b.n	800840c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	460b      	mov	r3, r1
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d16a      	bne.n	80084fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3314      	adds	r3, #20
 800842c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008434:	2b02      	cmp	r3, #2
 8008436:	d155      	bne.n	80084e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d914      	bls.n	800846e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	461a      	mov	r2, r3
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 ff0c 	bl	8009278 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008460:	2300      	movs	r3, #0
 8008462:	2200      	movs	r2, #0
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f001 fc62 	bl	8009d30 <USBD_LL_PrepareReceive>
 800846c:	e03a      	b.n	80084e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	429a      	cmp	r2, r3
 8008478:	d11c      	bne.n	80084b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008482:	429a      	cmp	r2, r3
 8008484:	d316      	bcc.n	80084b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008490:	429a      	cmp	r2, r3
 8008492:	d20f      	bcs.n	80084b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 feed 	bl	8009278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a6:	2300      	movs	r3, #0
 80084a8:	2200      	movs	r2, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fc3f 	bl	8009d30 <USBD_LL_PrepareReceive>
 80084b2:	e017      	b.n	80084e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d105      	bne.n	80084d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084d6:	2180      	movs	r1, #128	; 0x80
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f001 fb21 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 ff1c 	bl	800931c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d123      	bne.n	8008536 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff fe9b 	bl	800822a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084fc:	e01b      	b.n	8008536 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d013      	beq.n	8008532 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008510:	2b03      	cmp	r3, #3
 8008512:	d10e      	bne.n	8008532 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	4611      	mov	r1, r2
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	e002      	b.n	8008538 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	e000      	b.n	8008538 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6852      	ldr	r2, [r2, #4]
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	4611      	mov	r1, r2
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 fa54 	bl	8009a38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2240      	movs	r2, #64	; 0x40
 800859c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085a0:	2340      	movs	r3, #64	; 0x40
 80085a2:	2200      	movs	r2, #0
 80085a4:	2180      	movs	r1, #128	; 0x80
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fa46 	bl	8009a38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2240      	movs	r2, #64	; 0x40
 80085b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2204      	movs	r2, #4
 80085fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	2b04      	cmp	r3, #4
 800861c:	d105      	bne.n	800862a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	2b03      	cmp	r3, #3
 8008648:	d10b      	bne.n	8008662 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	3301      	adds	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800868a:	8a3b      	ldrh	r3, [r7, #16]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	b21a      	sxth	r2, r3
 8008690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008694:	4313      	orrs	r3, r2
 8008696:	b21b      	sxth	r3, r3
 8008698:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800869a:	89fb      	ldrh	r3, [r7, #14]
}
 800869c:	4618      	mov	r0, r3
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d004      	beq.n	80086cc <USBD_StdDevReq+0x24>
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	d002      	beq.n	80086cc <USBD_StdDevReq+0x24>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <USBD_StdDevReq+0x38>
 80086ca:	e050      	b.n	800876e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
    break;
 80086de:	e04b      	b.n	8008778 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d83c      	bhi.n	8008762 <USBD_StdDevReq+0xba>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <USBD_StdDevReq+0x48>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008745 	.word	0x08008745
 80086f4:	08008759 	.word	0x08008759
 80086f8:	08008763 	.word	0x08008763
 80086fc:	0800874f 	.word	0x0800874f
 8008700:	08008763 	.word	0x08008763
 8008704:	08008723 	.word	0x08008723
 8008708:	08008719 	.word	0x08008719
 800870c:	08008763 	.word	0x08008763
 8008710:	0800873b 	.word	0x0800873b
 8008714:	0800872d 	.word	0x0800872d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f9d0 	bl	8008ac0 <USBD_GetDescriptor>
      break;
 8008720:	e024      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fb5f 	bl	8008de8 <USBD_SetAddress>
      break;
 800872a:	e01f      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fb9c 	bl	8008e6c <USBD_SetConfig>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e018      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc39 	bl	8008fb4 <USBD_GetConfig>
      break;
 8008742:	e013      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc68 	bl	800901c <USBD_GetStatus>
      break;
 800874c:	e00e      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fc96 	bl	8009082 <USBD_SetFeature>
      break;
 8008756:	e009      	b.n	800876c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fca5 	bl	80090aa <USBD_ClrFeature>
      break;
 8008760:	e004      	b.n	800876c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fcfb 	bl	8009160 <USBD_CtlError>
      break;
 800876a:	bf00      	nop
    }
    break;
 800876c:	e004      	b.n	8008778 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fcf5 	bl	8009160 <USBD_CtlError>
    break;
 8008776:	bf00      	nop
  }

  return ret;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop

08008784 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800879a:	2b20      	cmp	r3, #32
 800879c:	d003      	beq.n	80087a6 <USBD_StdItfReq+0x22>
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	d001      	beq.n	80087a6 <USBD_StdItfReq+0x22>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d12a      	bne.n	80087fc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ac:	3b01      	subs	r3, #1
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d81d      	bhi.n	80087ee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	889b      	ldrh	r3, [r3, #4]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d813      	bhi.n	80087e4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d110      	bne.n	80087f8 <USBD_StdItfReq+0x74>
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10d      	bne.n	80087f8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fd8a 	bl	80092f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80087e2:	e009      	b.n	80087f8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fcba 	bl	8009160 <USBD_CtlError>
      break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fcb5 	bl	8009160 <USBD_CtlError>
      break;
 80087f6:	e000      	b.n	80087fa <USBD_StdItfReq+0x76>
      break;
 80087f8:	bf00      	nop
    }
    break;
 80087fa:	e004      	b.n	8008806 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fcae 	bl	8009160 <USBD_CtlError>
    break;
 8008804:	bf00      	nop
  }

  return ret;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	889b      	ldrh	r3, [r3, #4]
 8008822:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882c:	2b20      	cmp	r3, #32
 800882e:	d004      	beq.n	800883a <USBD_StdEPReq+0x2a>
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d002      	beq.n	800883a <USBD_StdEPReq+0x2a>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <USBD_StdEPReq+0x3e>
 8008838:	e137      	b.n	8008aaa <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
    break;
 800884c:	e132      	b.n	8008ab4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d03e      	beq.n	80088d4 <USBD_StdEPReq+0xc4>
 8008856:	2b03      	cmp	r3, #3
 8008858:	d002      	beq.n	8008860 <USBD_StdEPReq+0x50>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d079      	beq.n	8008952 <USBD_StdEPReq+0x142>
 800885e:	e11e      	b.n	8008a9e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008866:	2b02      	cmp	r3, #2
 8008868:	d002      	beq.n	8008870 <USBD_StdEPReq+0x60>
 800886a:	2b03      	cmp	r3, #3
 800886c:	d015      	beq.n	800889a <USBD_StdEPReq+0x8a>
 800886e:	e02b      	b.n	80088c8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00c      	beq.n	8008890 <USBD_StdEPReq+0x80>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d009      	beq.n	8008890 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f94d 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008886:	2180      	movs	r1, #128	; 0x80
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f949 	bl	8009b20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800888e:	e020      	b.n	80088d2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc64 	bl	8009160 <USBD_CtlError>
        break;
 8008898:	e01b      	b.n	80088d2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10e      	bne.n	80088c0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_StdEPReq+0xb0>
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b80      	cmp	r3, #128	; 0x80
 80088ac:	d008      	beq.n	80088c0 <USBD_StdEPReq+0xb0>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88db      	ldrh	r3, [r3, #6]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d104      	bne.n	80088c0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 f930 	bl	8009b20 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fd18 	bl	80092f6 <USBD_CtlSendStatus>

        break;
 80088c6:	e004      	b.n	80088d2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fc48 	bl	8009160 <USBD_CtlError>
        break;
 80088d0:	bf00      	nop
      }
      break;
 80088d2:	e0e9      	b.n	8008aa8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d002      	beq.n	80088e4 <USBD_StdEPReq+0xd4>
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d015      	beq.n	800890e <USBD_StdEPReq+0xfe>
 80088e2:	e02f      	b.n	8008944 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <USBD_StdEPReq+0xf4>
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d009      	beq.n	8008904 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f913 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088fa:	2180      	movs	r1, #128	; 0x80
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f90f 	bl	8009b20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008902:	e025      	b.n	8008950 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fc2a 	bl	8009160 <USBD_CtlError>
        break;
 800890c:	e020      	b.n	8008950 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d11b      	bne.n	800894e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f931 	bl	8009b8c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fce3 	bl	80092f6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008942:	e004      	b.n	800894e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fc0a 	bl	8009160 <USBD_CtlError>
        break;
 800894c:	e000      	b.n	8008950 <USBD_StdEPReq+0x140>
        break;
 800894e:	bf00      	nop
      }
      break;
 8008950:	e0aa      	b.n	8008aa8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008958:	2b02      	cmp	r3, #2
 800895a:	d002      	beq.n	8008962 <USBD_StdEPReq+0x152>
 800895c:	2b03      	cmp	r3, #3
 800895e:	d032      	beq.n	80089c6 <USBD_StdEPReq+0x1b6>
 8008960:	e097      	b.n	8008a92 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <USBD_StdEPReq+0x168>
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b80      	cmp	r3, #128	; 0x80
 800896c:	d004      	beq.n	8008978 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fbf5 	bl	8009160 <USBD_CtlError>
          break;
 8008976:	e091      	b.n	8008a9c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897c:	2b00      	cmp	r3, #0
 800897e:	da0b      	bge.n	8008998 <USBD_StdEPReq+0x188>
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	3310      	adds	r3, #16
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	3304      	adds	r3, #4
 8008996:	e00b      	b.n	80089b0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	3304      	adds	r3, #4
 80089b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2202      	movs	r2, #2
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc3f 	bl	8009242 <USBD_CtlSendData>
        break;
 80089c4:	e06a      	b.n	8008a9c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80089c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da11      	bge.n	80089f2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3324      	adds	r3, #36	; 0x24
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d117      	bne.n	8008a18 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fbb8 	bl	8009160 <USBD_CtlError>
            break;
 80089f0:	e054      	b.n	8008a9c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	f003 020f 	and.w	r2, r3, #15
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fba5 	bl	8009160 <USBD_CtlError>
            break;
 8008a16:	e041      	b.n	8008a9c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da0b      	bge.n	8008a38 <USBD_StdEPReq+0x228>
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	3310      	adds	r3, #16
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	4413      	add	r3, r2
 8008a34:	3304      	adds	r3, #4
 8008a36:	e00b      	b.n	8008a50 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3304      	adds	r3, #4
 8008a50:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <USBD_StdEPReq+0x24e>
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d103      	bne.n	8008a66 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	e00e      	b.n	8008a84 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 f8c4 	bl	8009bf8 <USBD_LL_IsStallEP>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e002      	b.n	8008a84 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2202      	movs	r2, #2
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fbd9 	bl	8009242 <USBD_CtlSendData>
          break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fb63 	bl	8009160 <USBD_CtlError>
        break;
 8008a9a:	bf00      	nop
      }
      break;
 8008a9c:	e004      	b.n	8008aa8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb5d 	bl	8009160 <USBD_CtlError>
      break;
 8008aa6:	bf00      	nop
    }
    break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fb57 	bl	8009160 <USBD_CtlError>
    break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b0e      	cmp	r3, #14
 8008ae2:	f200 8152 	bhi.w	8008d8a <USBD_GetDescriptor+0x2ca>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <USBD_GetDescriptor+0x2c>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b5d 	.word	0x08008b5d
 8008af0:	08008b75 	.word	0x08008b75
 8008af4:	08008bb5 	.word	0x08008bb5
 8008af8:	08008d8b 	.word	0x08008d8b
 8008afc:	08008d8b 	.word	0x08008d8b
 8008b00:	08008d2b 	.word	0x08008d2b
 8008b04:	08008d57 	.word	0x08008d57
 8008b08:	08008d8b 	.word	0x08008d8b
 8008b0c:	08008d8b 	.word	0x08008d8b
 8008b10:	08008d8b 	.word	0x08008d8b
 8008b14:	08008d8b 	.word	0x08008d8b
 8008b18:	08008d8b 	.word	0x08008d8b
 8008b1c:	08008d8b 	.word	0x08008d8b
 8008b20:	08008d8b 	.word	0x08008d8b
 8008b24:	08008b29 	.word	0x08008b29
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	7c12      	ldrb	r2, [r2, #16]
 8008b40:	f107 0108 	add.w	r1, r7, #8
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
 8008b48:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b4a:	e126      	b.n	8008d9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fb06 	bl	8009160 <USBD_CtlError>
      err++;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	3301      	adds	r3, #1
 8008b58:	72fb      	strb	r3, [r7, #11]
    break;
 8008b5a:	e11e      	b.n	8008d9a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
    break;
 8008b72:	e112      	b.n	8008d9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7c1b      	ldrb	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
 8008b8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	2202      	movs	r2, #2
 8008b94:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008b96:	e100      	b.n	8008d9a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	f107 0208 	add.w	r2, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	2202      	movs	r2, #2
 8008bb0:	701a      	strb	r2, [r3, #0]
    break;
 8008bb2:	e0f2      	b.n	8008d9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	885b      	ldrh	r3, [r3, #2]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	f200 80ac 	bhi.w	8008d18 <USBD_GetDescriptor+0x258>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <USBD_GetDescriptor+0x108>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008c15 	.word	0x08008c15
 8008bd0:	08008c49 	.word	0x08008c49
 8008bd4:	08008c7d 	.word	0x08008c7d
 8008bd8:	08008cb1 	.word	0x08008cb1
 8008bdc:	08008ce5 	.word	0x08008ce5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	7c12      	ldrb	r2, [r2, #16]
 8008bf8:	f107 0108 	add.w	r1, r7, #8
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4798      	blx	r3
 8008c00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c02:	e091      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 faaa 	bl	8009160 <USBD_CtlError>
        err++;
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	72fb      	strb	r3, [r7, #11]
      break;
 8008c12:	e089      	b.n	8008d28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c36:	e077      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa90 	bl	8009160 <USBD_CtlError>
        err++;
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	3301      	adds	r3, #1
 8008c44:	72fb      	strb	r3, [r7, #11]
      break;
 8008c46:	e06f      	b.n	8008d28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c6a:	e05d      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa76 	bl	8009160 <USBD_CtlError>
        err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
      break;
 8008c7a:	e055      	b.n	8008d28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c9e:	e043      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa5c 	bl	8009160 <USBD_CtlError>
        err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
      break;
 8008cae:	e03b      	b.n	8008d28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd2:	e029      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa42 	bl	8009160 <USBD_CtlError>
        err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce2:	e021      	b.n	8008d28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d06:	e00f      	b.n	8008d28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa28 	bl	8009160 <USBD_CtlError>
        err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
      break;
 8008d16:	e007      	b.n	8008d28 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa20 	bl	8009160 <USBD_CtlError>
      err++;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	3301      	adds	r3, #1
 8008d24:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d26:	bf00      	nop
    }
    break;
 8008d28:	e037      	b.n	8008d9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7c1b      	ldrb	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	f107 0208 	add.w	r2, r7, #8
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4798      	blx	r3
 8008d42:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d44:	e029      	b.n	8008d9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa09 	bl	8009160 <USBD_CtlError>
      err++;
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	3301      	adds	r3, #1
 8008d52:	72fb      	strb	r3, [r7, #11]
    break;
 8008d54:	e021      	b.n	8008d9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7c1b      	ldrb	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10d      	bne.n	8008d7a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f107 0208 	add.w	r2, r7, #8
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4798      	blx	r3
 8008d6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	2207      	movs	r2, #7
 8008d76:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d78:	e00f      	b.n	8008d9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9ef 	bl	8009160 <USBD_CtlError>
      err++;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	3301      	adds	r3, #1
 8008d86:	72fb      	strb	r3, [r7, #11]
    break;
 8008d88:	e007      	b.n	8008d9a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f9e7 	bl	8009160 <USBD_CtlError>
    err++;
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	3301      	adds	r3, #1
 8008d96:	72fb      	strb	r3, [r7, #11]
    break;
 8008d98:	bf00      	nop
  }

  if (err != 0U)
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d11e      	bne.n	8008dde <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	88db      	ldrh	r3, [r3, #6]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d016      	beq.n	8008dd6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008da8:	893b      	ldrh	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00e      	beq.n	8008dcc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88da      	ldrh	r2, [r3, #6]
 8008db2:	893b      	ldrh	r3, [r7, #8]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	bf28      	it	cs
 8008db8:	4613      	movcs	r3, r2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa3c 	bl	8009242 <USBD_CtlSendData>
 8008dca:	e009      	b.n	8008de0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f9c6 	bl	8009160 <USBD_CtlError>
 8008dd4:	e004      	b.n	8008de0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa8d 	bl	80092f6 <USBD_CtlSendStatus>
 8008ddc:	e000      	b.n	8008de0 <USBD_GetDescriptor+0x320>
    return;
 8008dde:	bf00      	nop
    }
  }
}
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	889b      	ldrh	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d130      	bne.n	8008e5c <USBD_SetAddress+0x74>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	88db      	ldrh	r3, [r3, #6]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d12c      	bne.n	8008e5c <USBD_SetAddress+0x74>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b7f      	cmp	r3, #127	; 0x7f
 8008e08:	d828      	bhi.n	8008e5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d104      	bne.n	8008e2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f99c 	bl	8009160 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e28:	e01c      	b.n	8008e64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	7bfa      	ldrb	r2, [r7, #15]
 8008e2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 ff0c 	bl	8009c54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fa5a 	bl	80092f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e50:	e008      	b.n	8008e64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5a:	e003      	b.n	8008e64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f97e 	bl	8009160 <USBD_CtlError>
  }
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b4b      	ldr	r3, [pc, #300]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e84:	4b4a      	ldr	r3, [pc, #296]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d905      	bls.n	8008e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f966 	bl	8009160 <USBD_CtlError>
    return USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e087      	b.n	8008fa8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d002      	beq.n	8008ea8 <USBD_SetConfig+0x3c>
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d025      	beq.n	8008ef2 <USBD_SetConfig+0x86>
 8008ea6:	e071      	b.n	8008f8c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ea8:	4b41      	ldr	r3, [pc, #260]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01c      	beq.n	8008eea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff f9bd 	bl	8008240 <USBD_SetClassConfig>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f944 	bl	8009160 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ed8:	e065      	b.n	8008fa6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa0b 	bl	80092f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ee8:	e05d      	b.n	8008fa6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa03 	bl	80092f6 <USBD_CtlSendStatus>
    break;
 8008ef0:	e059      	b.n	8008fa6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008ef2:	4b2f      	ldr	r3, [pc, #188]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d112      	bne.n	8008f20 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f02:	4b2b      	ldr	r3, [pc, #172]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f0c:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff f9b0 	bl	8008278 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9ec 	bl	80092f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f1e:	e042      	b.n	8008fa6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f20:	4b23      	ldr	r3, [pc, #140]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d02a      	beq.n	8008f84 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff f99e 	bl	8008278 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f3c:	4b1c      	ldr	r3, [pc, #112]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff f977 	bl	8008240 <USBD_SetClassConfig>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00f      	beq.n	8008f7c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8fe 	bl	8009160 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff f983 	bl	8008278 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f7a:	e014      	b.n	8008fa6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f9ba 	bl	80092f6 <USBD_CtlSendStatus>
    break;
 8008f82:	e010      	b.n	8008fa6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f9b6 	bl	80092f6 <USBD_CtlSendStatus>
    break;
 8008f8a:	e00c      	b.n	8008fa6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f8e6 	bl	8009160 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <USBD_SetConfig+0x144>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff f96c 	bl	8008278 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	bf00      	nop
  }

  return ret;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000214 	.word	0x20000214

08008fb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	88db      	ldrh	r3, [r3, #6]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d004      	beq.n	8008fd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f8c9 	bl	8009160 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008fce:	e021      	b.n	8009014 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	db17      	blt.n	800900a <USBD_GetConfig+0x56>
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	dd02      	ble.n	8008fe4 <USBD_GetConfig+0x30>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d00b      	beq.n	8008ffa <USBD_GetConfig+0x46>
 8008fe2:	e012      	b.n	800900a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3308      	adds	r3, #8
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f925 	bl	8009242 <USBD_CtlSendData>
      break;
 8008ff8:	e00c      	b.n	8009014 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	2201      	movs	r2, #1
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f91d 	bl	8009242 <USBD_CtlSendData>
      break;
 8009008:	e004      	b.n	8009014 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8a7 	bl	8009160 <USBD_CtlError>
      break;
 8009012:	bf00      	nop
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	3b01      	subs	r3, #1
 800902e:	2b02      	cmp	r3, #2
 8009030:	d81e      	bhi.n	8009070 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d004      	beq.n	8009044 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f88f 	bl	8009160 <USBD_CtlError>
      break;
 8009042:	e01a      	b.n	800907a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f043 0202 	orr.w	r2, r3, #2
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	330c      	adds	r3, #12
 8009064:	2202      	movs	r2, #2
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f8ea 	bl	8009242 <USBD_CtlSendData>
    break;
 800906e:	e004      	b.n	800907a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f874 	bl	8009160 <USBD_CtlError>
    break;
 8009078:	bf00      	nop
  }
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d106      	bne.n	80090a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f92a 	bl	80092f6 <USBD_CtlSendStatus>
  }
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	3b01      	subs	r3, #1
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d80b      	bhi.n	80090d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10c      	bne.n	80090e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f910 	bl	80092f6 <USBD_CtlSendStatus>
      }
      break;
 80090d6:	e004      	b.n	80090e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f840 	bl	8009160 <USBD_CtlError>
      break;
 80090e0:	e000      	b.n	80090e4 <USBD_ClrFeature+0x3a>
      break;
 80090e2:	bf00      	nop
  }
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	781a      	ldrb	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3301      	adds	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff faa8 	bl	800866c <SWAPBYTE>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7ff fa9b 	bl	800866c <SWAPBYTE>
 8009136:	4603      	mov	r3, r0
 8009138:	461a      	mov	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fa8e 	bl	800866c <SWAPBYTE>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	80da      	strh	r2, [r3, #6]
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800916a:	2180      	movs	r1, #128	; 0x80
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fcd7 	bl	8009b20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009172:	2100      	movs	r1, #0
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fcd3 	bl	8009b20 <USBD_LL_StallEP>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d036      	beq.n	8009206 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800919c:	6938      	ldr	r0, [r7, #16]
 800919e:	f000 f836 	bl	800920e <USBD_GetLen>
 80091a2:	4603      	mov	r3, r0
 80091a4:	3301      	adds	r3, #1
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	4413      	add	r3, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	3301      	adds	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4413      	add	r3, r2
 80091c8:	2203      	movs	r2, #3
 80091ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	3301      	adds	r3, #1
 80091d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091d2:	e013      	b.n	80091fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3301      	adds	r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
    idx++;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	3301      	adds	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	3301      	adds	r3, #1
 80091fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e7      	bne.n	80091d4 <USBD_GetString+0x52>
 8009204:	e000      	b.n	8009208 <USBD_GetString+0x86>
    return;
 8009206:	bf00      	nop
  }
}
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800921e:	e005      	b.n	800922c <USBD_GetLen+0x1e>
  {
    len++;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	3301      	adds	r3, #1
 8009224:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	3301      	adds	r3, #1
 800922a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f5      	bne.n	8009220 <USBD_GetLen+0x12>
  }

  return len;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2202      	movs	r2, #2
 8009252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fd29 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	2100      	movs	r1, #0
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 fd18 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2203      	movs	r2, #3
 80092aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fd33 	bl	8009d30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	2100      	movs	r1, #0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fd22 	bl	8009d30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2204      	movs	r2, #4
 8009302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009306:	2300      	movs	r3, #0
 8009308:	2200      	movs	r2, #0
 800930a:	2100      	movs	r1, #0
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fcd7 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2205      	movs	r2, #5
 8009328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fcfc 	bl	8009d30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009348:	2200      	movs	r2, #0
 800934a:	4912      	ldr	r1, [pc, #72]	; (8009394 <MX_USB_DEVICE_Init+0x50>)
 800934c:	4812      	ldr	r0, [pc, #72]	; (8009398 <MX_USB_DEVICE_Init+0x54>)
 800934e:	f7fe ff09 	bl	8008164 <USBD_Init>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009358:	f7f7 fb97 	bl	8000a8a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800935c:	490f      	ldr	r1, [pc, #60]	; (800939c <MX_USB_DEVICE_Init+0x58>)
 800935e:	480e      	ldr	r0, [pc, #56]	; (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009360:	f7fe ff30 	bl	80081c4 <USBD_RegisterClass>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800936a:	f7f7 fb8e 	bl	8000a8a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800936e:	490c      	ldr	r1, [pc, #48]	; (80093a0 <MX_USB_DEVICE_Init+0x5c>)
 8009370:	4809      	ldr	r0, [pc, #36]	; (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009372:	f7fe fe8b 	bl	800808c <USBD_CDC_RegisterInterface>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800937c:	f7f7 fb85 	bl	8000a8a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009380:	4805      	ldr	r0, [pc, #20]	; (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009382:	f7fe ff46 	bl	8008212 <USBD_Start>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800938c:	f7f7 fb7d 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009390:	bf00      	nop
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000130 	.word	0x20000130
 8009398:	200003b8 	.word	0x200003b8
 800939c:	20000018 	.word	0x20000018
 80093a0:	2000011c 	.word	0x2000011c

080093a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093a8:	2200      	movs	r2, #0
 80093aa:	4905      	ldr	r1, [pc, #20]	; (80093c0 <CDC_Init_FS+0x1c>)
 80093ac:	4805      	ldr	r0, [pc, #20]	; (80093c4 <CDC_Init_FS+0x20>)
 80093ae:	f7fe fe82 	bl	80080b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093b2:	4905      	ldr	r1, [pc, #20]	; (80093c8 <CDC_Init_FS+0x24>)
 80093b4:	4803      	ldr	r0, [pc, #12]	; (80093c4 <CDC_Init_FS+0x20>)
 80093b6:	f7fe fe97 	bl	80080e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093bc:	4618      	mov	r0, r3
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000e88 	.word	0x20000e88
 80093c4:	200003b8 	.word	0x200003b8
 80093c8:	20000688 	.word	0x20000688

080093cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
 80093e8:	4613      	mov	r3, r2
 80093ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b23      	cmp	r3, #35	; 0x23
 80093f0:	d84a      	bhi.n	8009488 <CDC_Control_FS+0xac>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <CDC_Control_FS+0x1c>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009489 	.word	0x08009489
 80093fc:	08009489 	.word	0x08009489
 8009400:	08009489 	.word	0x08009489
 8009404:	08009489 	.word	0x08009489
 8009408:	08009489 	.word	0x08009489
 800940c:	08009489 	.word	0x08009489
 8009410:	08009489 	.word	0x08009489
 8009414:	08009489 	.word	0x08009489
 8009418:	08009489 	.word	0x08009489
 800941c:	08009489 	.word	0x08009489
 8009420:	08009489 	.word	0x08009489
 8009424:	08009489 	.word	0x08009489
 8009428:	08009489 	.word	0x08009489
 800942c:	08009489 	.word	0x08009489
 8009430:	08009489 	.word	0x08009489
 8009434:	08009489 	.word	0x08009489
 8009438:	08009489 	.word	0x08009489
 800943c:	08009489 	.word	0x08009489
 8009440:	08009489 	.word	0x08009489
 8009444:	08009489 	.word	0x08009489
 8009448:	08009489 	.word	0x08009489
 800944c:	08009489 	.word	0x08009489
 8009450:	08009489 	.word	0x08009489
 8009454:	08009489 	.word	0x08009489
 8009458:	08009489 	.word	0x08009489
 800945c:	08009489 	.word	0x08009489
 8009460:	08009489 	.word	0x08009489
 8009464:	08009489 	.word	0x08009489
 8009468:	08009489 	.word	0x08009489
 800946c:	08009489 	.word	0x08009489
 8009470:	08009489 	.word	0x08009489
 8009474:	08009489 	.word	0x08009489
 8009478:	08009489 	.word	0x08009489
 800947c:	08009489 	.word	0x08009489
 8009480:	08009489 	.word	0x08009489
 8009484:	08009489 	.word	0x08009489
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009488:	bf00      	nop
  }

  return (USBD_OK);
 800948a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4805      	ldr	r0, [pc, #20]	; (80094bc <CDC_Receive_FS+0x24>)
 80094a6:	f7fe fe1f 	bl	80080e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094aa:	4804      	ldr	r0, [pc, #16]	; (80094bc <CDC_Receive_FS+0x24>)
 80094ac:	f7fe fe30 	bl	8008110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	200003b8 	.word	0x200003b8

080094c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2212      	movs	r2, #18
 80094f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094f6:	4b03      	ldr	r3, [pc, #12]	; (8009504 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000150 	.word	0x20000150

08009508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2204      	movs	r2, #4
 8009518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800951a:	4b03      	ldr	r3, [pc, #12]	; (8009528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	20000170 	.word	0x20000170

0800952c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009544:	f7ff fe1d 	bl	8009182 <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009550:	f7ff fe17 	bl	8009182 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001688 	.word	0x20001688
 8009564:	0800a05c 	.word	0x0800a05c

08009568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	4904      	ldr	r1, [pc, #16]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800957a:	f7ff fe02 	bl	8009182 <USBD_GetString>
  return USBD_StrDesc;
 800957e:	4b02      	ldr	r3, [pc, #8]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20001688 	.word	0x20001688
 800958c:	0800a06c 	.word	0x0800a06c

08009590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	221a      	movs	r2, #26
 80095a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095a2:	f000 f855 	bl	8009650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095a6:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000174 	.word	0x20000174

080095b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4907      	ldr	r1, [pc, #28]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095cc:	f7ff fdd9 	bl	8009182 <USBD_GetString>
 80095d0:	e004      	b.n	80095dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d8:	f7ff fdd3 	bl	8009182 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20001688 	.word	0x20001688
 80095ec:	0800a080 	.word	0x0800a080

080095f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d105      	bne.n	800960e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009606:	4808      	ldr	r0, [pc, #32]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009608:	f7ff fdbb 	bl	8009182 <USBD_GetString>
 800960c:	e004      	b.n	8009618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009612:	4805      	ldr	r0, [pc, #20]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009614:	f7ff fdb5 	bl	8009182 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20001688 	.word	0x20001688
 8009628:	0800a08c 	.word	0x0800a08c

0800962c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	220c      	movs	r2, #12
 800963c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800963e:	4b03      	ldr	r3, [pc, #12]	; (800964c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	20000164 	.word	0x20000164

08009650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009656:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <Get_SerialNum+0x44>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800965c:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <Get_SerialNum+0x48>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009662:	4b0e      	ldr	r3, [pc, #56]	; (800969c <Get_SerialNum+0x4c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009676:	2208      	movs	r2, #8
 8009678:	4909      	ldr	r1, [pc, #36]	; (80096a0 <Get_SerialNum+0x50>)
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f814 	bl	80096a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009680:	2204      	movs	r2, #4
 8009682:	4908      	ldr	r1, [pc, #32]	; (80096a4 <Get_SerialNum+0x54>)
 8009684:	68b8      	ldr	r0, [r7, #8]
 8009686:	f000 f80f 	bl	80096a8 <IntToUnicode>
  }
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	1fff7590 	.word	0x1fff7590
 8009698:	1fff7594 	.word	0x1fff7594
 800969c:	1fff7598 	.word	0x1fff7598
 80096a0:	20000176 	.word	0x20000176
 80096a4:	20000186 	.word	0x20000186

080096a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096ba:	2300      	movs	r3, #0
 80096bc:	75fb      	strb	r3, [r7, #23]
 80096be:	e027      	b.n	8009710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	0f1b      	lsrs	r3, r3, #28
 80096c4:	2b09      	cmp	r3, #9
 80096c6:	d80b      	bhi.n	80096e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	0f1b      	lsrs	r3, r3, #28
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	4619      	mov	r1, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	440b      	add	r3, r1
 80096d8:	3230      	adds	r2, #48	; 0x30
 80096da:	b2d2      	uxtb	r2, r2
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e00a      	b.n	80096f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	0f1b      	lsrs	r3, r3, #28
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	4619      	mov	r1, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	440b      	add	r3, r1
 80096f0:	3237      	adds	r2, #55	; 0x37
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	3301      	adds	r3, #1
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	4413      	add	r3, r2
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	3301      	adds	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
 8009710:	7dfa      	ldrb	r2, [r7, #23]
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	429a      	cmp	r2, r3
 8009716:	d3d3      	bcc.n	80096c0 <IntToUnicode+0x18>
  }
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800972c:	f107 0314 	add.w	r3, r7, #20
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1c      	ldr	r2, [pc, #112]	; (80097b4 <HAL_PCD_MspInit+0x90>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d131      	bne.n	80097aa <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009746:	4b1c      	ldr	r3, [pc, #112]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009752:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800975e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009764:	2302      	movs	r3, #2
 8009766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800976c:	2303      	movs	r3, #3
 800976e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8009770:	230a      	movs	r3, #10
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009774:	f107 0314 	add.w	r3, r7, #20
 8009778:	4619      	mov	r1, r3
 800977a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800977e:	f7f7 fd73 	bl	8001268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009782:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 8009784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009786:	4a0c      	ldr	r2, [pc, #48]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 8009788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800978c:	6593      	str	r3, [r2, #88]	; 0x58
 800978e:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <HAL_PCD_MspInit+0x94>)
 8009790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	2043      	movs	r0, #67	; 0x43
 80097a0:	f7f7 fd2b 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80097a4:	2043      	movs	r0, #67	; 0x43
 80097a6:	f7f7 fd44 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097aa:	bf00      	nop
 80097ac:	3728      	adds	r7, #40	; 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40006800 	.word	0x40006800
 80097b8:	40021000 	.word	0x40021000

080097bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fe fd68 	bl	80082a8 <USBD_LL_SetupStage>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	440b      	add	r3, r1
 8009800:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	4619      	mov	r1, r3
 800980a:	f7fe fda0 	bl	800834e <USBD_LL_DataOutStage>
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	440b      	add	r3, r1
 8009836:	333c      	adds	r3, #60	; 0x3c
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	4619      	mov	r1, r3
 800983e:	f7fe fde9 	bl	8008414 <USBD_LL_DataInStage>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe feed 	bl	8008638 <USBD_LL_SOF>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800986e:	2301      	movs	r3, #1
 8009870:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d001      	beq.n	800987e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800987a:	f7f7 f906 	bl	8000a8a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009884:	7bfa      	ldrb	r2, [r7, #15]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fe9a 	bl	80085c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fe53 	bl	8008540 <USBD_LL_Reset>
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fe95 	bl	80085e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098c0:	4b04      	ldr	r3, [pc, #16]	; (80098d4 <HAL_PCD_SuspendCallback+0x30>)
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	4a03      	ldr	r2, [pc, #12]	; (80098d4 <HAL_PCD_SuspendCallback+0x30>)
 80098c6:	f043 0306 	orr.w	r3, r3, #6
 80098ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	e000ed00 	.word	0xe000ed00

080098d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e8:	4b08      	ldr	r3, [pc, #32]	; (800990c <HAL_PCD_ResumeCallback+0x34>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	4a07      	ldr	r2, [pc, #28]	; (800990c <HAL_PCD_ResumeCallback+0x34>)
 80098ee:	f023 0306 	bic.w	r3, r3, #6
 80098f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80098f4:	f000 fa9e 	bl	8009e34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fe84 	bl	800860c <USBD_LL_Resume>
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	e000ed00 	.word	0xe000ed00

08009910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009918:	f7f9 fa5c 	bl	8002dd4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800991c:	4a2b      	ldr	r2, [pc, #172]	; (80099cc <USBD_LL_Init+0xbc>)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a29      	ldr	r2, [pc, #164]	; (80099cc <USBD_LL_Init+0xbc>)
 8009928:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800992c:	4b27      	ldr	r3, [pc, #156]	; (80099cc <USBD_LL_Init+0xbc>)
 800992e:	4a28      	ldr	r2, [pc, #160]	; (80099d0 <USBD_LL_Init+0xc0>)
 8009930:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <USBD_LL_Init+0xbc>)
 8009934:	2208      	movs	r2, #8
 8009936:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009938:	4b24      	ldr	r3, [pc, #144]	; (80099cc <USBD_LL_Init+0xbc>)
 800993a:	2202      	movs	r2, #2
 800993c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800993e:	4b23      	ldr	r3, [pc, #140]	; (80099cc <USBD_LL_Init+0xbc>)
 8009940:	2202      	movs	r2, #2
 8009942:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009944:	4b21      	ldr	r3, [pc, #132]	; (80099cc <USBD_LL_Init+0xbc>)
 8009946:	2200      	movs	r2, #0
 8009948:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800994a:	4b20      	ldr	r3, [pc, #128]	; (80099cc <USBD_LL_Init+0xbc>)
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009950:	4b1e      	ldr	r3, [pc, #120]	; (80099cc <USBD_LL_Init+0xbc>)
 8009952:	2200      	movs	r2, #0
 8009954:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <USBD_LL_Init+0xbc>)
 8009958:	2200      	movs	r2, #0
 800995a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800995c:	481b      	ldr	r0, [pc, #108]	; (80099cc <USBD_LL_Init+0xbc>)
 800995e:	f7f7 fe2f 	bl	80015c0 <HAL_PCD_Init>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009968:	f7f7 f88f 	bl	8000a8a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009972:	2318      	movs	r3, #24
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	f7f9 f94a 	bl	8002c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009982:	2358      	movs	r3, #88	; 0x58
 8009984:	2200      	movs	r2, #0
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	f7f9 f942 	bl	8002c10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009992:	23c0      	movs	r3, #192	; 0xc0
 8009994:	2200      	movs	r2, #0
 8009996:	2181      	movs	r1, #129	; 0x81
 8009998:	f7f9 f93a 	bl	8002c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80099a6:	2200      	movs	r2, #0
 80099a8:	2101      	movs	r1, #1
 80099aa:	f7f9 f931 	bl	8002c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b8:	2200      	movs	r2, #0
 80099ba:	2182      	movs	r1, #130	; 0x82
 80099bc:	f7f9 f928 	bl	8002c10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20001888 	.word	0x20001888
 80099d0:	40006800 	.word	0x40006800

080099d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fefa 	bl	80017e4 <HAL_PCD_Start>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d816      	bhi.n	8009a28 <USBD_LL_Start+0x54>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <USBD_LL_Start+0x2c>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a11 	.word	0x08009a11
 8009a04:	08009a17 	.word	0x08009a17
 8009a08:	08009a1d 	.word	0x08009a1d
 8009a0c:	08009a23 	.word	0x08009a23
    case HAL_OK :
      usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
    break;
 8009a14:	e00b      	b.n	8009a2e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a16:	2303      	movs	r3, #3
 8009a18:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1a:	e008      	b.n	8009a2e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a20:	e005      	b.n	8009a2e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a22:	2303      	movs	r3, #3
 8009a24:	73fb      	strb	r3, [r7, #15]
    break;
 8009a26:	e002      	b.n	8009a2e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2c:	bf00      	nop
  }
  return usb_status;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	70fb      	strb	r3, [r7, #3]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70bb      	strb	r3, [r7, #2]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a60:	78bb      	ldrb	r3, [r7, #2]
 8009a62:	883a      	ldrh	r2, [r7, #0]
 8009a64:	78f9      	ldrb	r1, [r7, #3]
 8009a66:	f7f8 f852 	bl	8001b0e <HAL_PCD_EP_Open>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d817      	bhi.n	8009aa4 <USBD_LL_OpenEP+0x6c>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBD_LL_OpenEP+0x44>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009a93 	.word	0x08009a93
 8009a84:	08009a99 	.word	0x08009a99
 8009a88:	08009a9f 	.word	0x08009a9f
    case HAL_OK :
      usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	e00b      	b.n	8009aaa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
    break;
 8009a96:	e008      	b.n	8009aaa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9c:	e005      	b.n	8009aaa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa2:	e002      	b.n	8009aaa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa8:	bf00      	nop
  }
  return usb_status;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f8 f881 	bl	8001bda <HAL_PCD_EP_Close>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d816      	bhi.n	8009b10 <USBD_LL_CloseEP+0x5c>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USBD_LL_CloseEP+0x34>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009aff 	.word	0x08009aff
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b0b 	.word	0x08009b0b
    case HAL_OK :
      usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
    break;
 8009afc:	e00b      	b.n	8009b16 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	73fb      	strb	r3, [r7, #15]
    break;
 8009b02:	e008      	b.n	8009b16 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e005      	b.n	8009b16 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e002      	b.n	8009b16 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	bf00      	nop
  }
  return usb_status;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b3a:	78fa      	ldrb	r2, [r7, #3]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f8 f92b 	bl	8001d9a <HAL_PCD_EP_SetStall>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d816      	bhi.n	8009b7c <USBD_LL_StallEP+0x5c>
 8009b4e:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <USBD_LL_StallEP+0x34>)
 8009b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b6b 	.word	0x08009b6b
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b77 	.word	0x08009b77
    case HAL_OK :
      usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
    break;
 8009b68:	e00b      	b.n	8009b82 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b6e:	e008      	b.n	8009b82 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
    break;
 8009b74:	e005      	b.n	8009b82 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b76:	2303      	movs	r3, #3
 8009b78:	73fb      	strb	r3, [r7, #15]
    break;
 8009b7a:	e002      	b.n	8009b82 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b80:	bf00      	nop
  }
  return usb_status;
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f8 f955 	bl	8001e5a <HAL_PCD_EP_ClrStall>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d816      	bhi.n	8009be8 <USBD_LL_ClearStallEP+0x5c>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <USBD_LL_ClearStallEP+0x34>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009bd1 	.word	0x08009bd1
 8009bc4:	08009bd7 	.word	0x08009bd7
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009be3 	.word	0x08009be3
    case HAL_OK :
      usb_status = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e00b      	b.n	8009bee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bda:	e008      	b.n	8009bee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	e005      	b.n	8009bee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009be2:	2303      	movs	r3, #3
 8009be4:	73fb      	strb	r3, [r7, #15]
    break;
 8009be6:	e002      	b.n	8009bee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	bf00      	nop
  }
  return usb_status;
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da0c      	bge.n	8009c2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	440b      	add	r3, r1
 8009c28:	3302      	adds	r3, #2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	e00b      	b.n	8009c46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c34:	68f9      	ldr	r1, [r7, #12]
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	440b      	add	r3, r1
 8009c40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009c44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c6e:	78fa      	ldrb	r2, [r7, #3]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f7 ff26 	bl	8001ac4 <HAL_PCD_SetAddress>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d816      	bhi.n	8009cb0 <USBD_LL_SetUSBAddress+0x5c>
 8009c82:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <USBD_LL_SetUSBAddress+0x34>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009c99 	.word	0x08009c99
 8009c8c:	08009c9f 	.word	0x08009c9f
 8009c90:	08009ca5 	.word	0x08009ca5
 8009c94:	08009cab 	.word	0x08009cab
    case HAL_OK :
      usb_status = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9c:	e00b      	b.n	8009cb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca2:	e008      	b.n	8009cb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca8:	e005      	b.n	8009cb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	73fb      	strb	r3, [r7, #15]
    break;
 8009cae:	e002      	b.n	8009cb6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb4:	bf00      	nop
  }
  return usb_status;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	607a      	str	r2, [r7, #4]
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cde:	7af9      	ldrb	r1, [r7, #11]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f7f8 f816 	bl	8001d14 <HAL_PCD_EP_Transmit>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009cec:	7dbb      	ldrb	r3, [r7, #22]
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d816      	bhi.n	8009d20 <USBD_LL_Transmit+0x60>
 8009cf2:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <USBD_LL_Transmit+0x38>)
 8009cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf8:	08009d09 	.word	0x08009d09
 8009cfc:	08009d0f 	.word	0x08009d0f
 8009d00:	08009d15 	.word	0x08009d15
 8009d04:	08009d1b 	.word	0x08009d1b
    case HAL_OK :
      usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
    break;
 8009d0c:	e00b      	b.n	8009d26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	75fb      	strb	r3, [r7, #23]
    break;
 8009d12:	e008      	b.n	8009d26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d14:	2301      	movs	r3, #1
 8009d16:	75fb      	strb	r3, [r7, #23]
    break;
 8009d18:	e005      	b.n	8009d26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	75fb      	strb	r3, [r7, #23]
    break;
 8009d1e:	e002      	b.n	8009d26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	75fb      	strb	r3, [r7, #23]
    break;
 8009d24:	bf00      	nop
  }
  return usb_status;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d4e:	7af9      	ldrb	r1, [r7, #11]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	f7f7 ff89 	bl	8001c6a <HAL_PCD_EP_Receive>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009d5c:	7dbb      	ldrb	r3, [r7, #22]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d816      	bhi.n	8009d90 <USBD_LL_PrepareReceive+0x60>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBD_LL_PrepareReceive+0x38>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d7f 	.word	0x08009d7f
 8009d70:	08009d85 	.word	0x08009d85
 8009d74:	08009d8b 	.word	0x08009d8b
    case HAL_OK :
      usb_status = USBD_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]
    break;
 8009d7c:	e00b      	b.n	8009d96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	75fb      	strb	r3, [r7, #23]
    break;
 8009d82:	e008      	b.n	8009d96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d84:	2301      	movs	r3, #1
 8009d86:	75fb      	strb	r3, [r7, #23]
    break;
 8009d88:	e005      	b.n	8009d96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	75fb      	strb	r3, [r7, #23]
    break;
 8009d8e:	e002      	b.n	8009d96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009d90:	2303      	movs	r3, #3
 8009d92:	75fb      	strb	r3, [r7, #23]
    break;
 8009d94:	bf00      	nop
  }
  return usb_status;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f7 ff94 	bl	8001ce4 <HAL_PCD_EP_GetRxCount>
 8009dbc:	4603      	mov	r3, r0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <HAL_PCDEx_LPM_Callback+0x18>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d013      	beq.n	8009e06 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009dde:	e023      	b.n	8009e28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009de8:	f000 f824 	bl	8009e34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dec:	4b10      	ldr	r3, [pc, #64]	; (8009e30 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	4a0f      	ldr	r2, [pc, #60]	; (8009e30 <HAL_PCDEx_LPM_Callback+0x68>)
 8009df2:	f023 0306 	bic.w	r3, r3, #6
 8009df6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe fc04 	bl	800860c <USBD_LL_Resume>
    break;
 8009e04:	e010      	b.n	8009e28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fbe8 	bl	80085e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	4a04      	ldr	r2, [pc, #16]	; (8009e30 <HAL_PCDEx_LPM_Callback+0x68>)
 8009e20:	f043 0306 	orr.w	r3, r3, #6
 8009e24:	6113      	str	r3, [r2, #16]
    break;
 8009e26:	bf00      	nop
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	e000ed00 	.word	0xe000ed00

08009e34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e38:	f7f6 fbce 	bl	80005d8 <SystemClock_Config>
}
 8009e3c:	bf00      	nop
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <__errno>:
 8009e40:	4b01      	ldr	r3, [pc, #4]	; (8009e48 <__errno+0x8>)
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000190 	.word	0x20000190

08009e4c <__libc_init_array>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	4e0d      	ldr	r6, [pc, #52]	; (8009e84 <__libc_init_array+0x38>)
 8009e50:	4c0d      	ldr	r4, [pc, #52]	; (8009e88 <__libc_init_array+0x3c>)
 8009e52:	1ba4      	subs	r4, r4, r6
 8009e54:	10a4      	asrs	r4, r4, #2
 8009e56:	2500      	movs	r5, #0
 8009e58:	42a5      	cmp	r5, r4
 8009e5a:	d109      	bne.n	8009e70 <__libc_init_array+0x24>
 8009e5c:	4e0b      	ldr	r6, [pc, #44]	; (8009e8c <__libc_init_array+0x40>)
 8009e5e:	4c0c      	ldr	r4, [pc, #48]	; (8009e90 <__libc_init_array+0x44>)
 8009e60:	f000 f8ea 	bl	800a038 <_init>
 8009e64:	1ba4      	subs	r4, r4, r6
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	2500      	movs	r5, #0
 8009e6a:	42a5      	cmp	r5, r4
 8009e6c:	d105      	bne.n	8009e7a <__libc_init_array+0x2e>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e74:	4798      	blx	r3
 8009e76:	3501      	adds	r5, #1
 8009e78:	e7ee      	b.n	8009e58 <__libc_init_array+0xc>
 8009e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e7e:	4798      	blx	r3
 8009e80:	3501      	adds	r5, #1
 8009e82:	e7f2      	b.n	8009e6a <__libc_init_array+0x1e>
 8009e84:	0800a0ec 	.word	0x0800a0ec
 8009e88:	0800a0ec 	.word	0x0800a0ec
 8009e8c:	0800a0ec 	.word	0x0800a0ec
 8009e90:	0800a0f0 	.word	0x0800a0f0

08009e94 <malloc>:
 8009e94:	4b02      	ldr	r3, [pc, #8]	; (8009ea0 <malloc+0xc>)
 8009e96:	4601      	mov	r1, r0
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	f000 b861 	b.w	8009f60 <_malloc_r>
 8009e9e:	bf00      	nop
 8009ea0:	20000190 	.word	0x20000190

08009ea4 <free>:
 8009ea4:	4b02      	ldr	r3, [pc, #8]	; (8009eb0 <free+0xc>)
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	f000 b80b 	b.w	8009ec4 <_free_r>
 8009eae:	bf00      	nop
 8009eb0:	20000190 	.word	0x20000190

08009eb4 <memset>:
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d100      	bne.n	8009ebe <memset+0xa>
 8009ebc:	4770      	bx	lr
 8009ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec2:	e7f9      	b.n	8009eb8 <memset+0x4>

08009ec4 <_free_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d045      	beq.n	8009f58 <_free_r+0x94>
 8009ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed0:	1f0c      	subs	r4, r1, #4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	bfb8      	it	lt
 8009ed6:	18e4      	addlt	r4, r4, r3
 8009ed8:	f000 f8ac 	bl	800a034 <__malloc_lock>
 8009edc:	4a1f      	ldr	r2, [pc, #124]	; (8009f5c <_free_r+0x98>)
 8009ede:	6813      	ldr	r3, [r2, #0]
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	b933      	cbnz	r3, 8009ef2 <_free_r+0x2e>
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	6014      	str	r4, [r2, #0]
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eee:	f000 b8a2 	b.w	800a036 <__malloc_unlock>
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	d90c      	bls.n	8009f10 <_free_r+0x4c>
 8009ef6:	6821      	ldr	r1, [r4, #0]
 8009ef8:	1862      	adds	r2, r4, r1
 8009efa:	4293      	cmp	r3, r2
 8009efc:	bf04      	itt	eq
 8009efe:	681a      	ldreq	r2, [r3, #0]
 8009f00:	685b      	ldreq	r3, [r3, #4]
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	bf04      	itt	eq
 8009f06:	1852      	addeq	r2, r2, r1
 8009f08:	6022      	streq	r2, [r4, #0]
 8009f0a:	6004      	str	r4, [r0, #0]
 8009f0c:	e7ec      	b.n	8009ee8 <_free_r+0x24>
 8009f0e:	4613      	mov	r3, r2
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	b10a      	cbz	r2, 8009f18 <_free_r+0x54>
 8009f14:	42a2      	cmp	r2, r4
 8009f16:	d9fa      	bls.n	8009f0e <_free_r+0x4a>
 8009f18:	6819      	ldr	r1, [r3, #0]
 8009f1a:	1858      	adds	r0, r3, r1
 8009f1c:	42a0      	cmp	r0, r4
 8009f1e:	d10b      	bne.n	8009f38 <_free_r+0x74>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	4401      	add	r1, r0
 8009f24:	1858      	adds	r0, r3, r1
 8009f26:	4282      	cmp	r2, r0
 8009f28:	6019      	str	r1, [r3, #0]
 8009f2a:	d1dd      	bne.n	8009ee8 <_free_r+0x24>
 8009f2c:	6810      	ldr	r0, [r2, #0]
 8009f2e:	6852      	ldr	r2, [r2, #4]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	4401      	add	r1, r0
 8009f34:	6019      	str	r1, [r3, #0]
 8009f36:	e7d7      	b.n	8009ee8 <_free_r+0x24>
 8009f38:	d902      	bls.n	8009f40 <_free_r+0x7c>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	e7d3      	b.n	8009ee8 <_free_r+0x24>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	1821      	adds	r1, r4, r0
 8009f44:	428a      	cmp	r2, r1
 8009f46:	bf04      	itt	eq
 8009f48:	6811      	ldreq	r1, [r2, #0]
 8009f4a:	6852      	ldreq	r2, [r2, #4]
 8009f4c:	6062      	str	r2, [r4, #4]
 8009f4e:	bf04      	itt	eq
 8009f50:	1809      	addeq	r1, r1, r0
 8009f52:	6021      	streq	r1, [r4, #0]
 8009f54:	605c      	str	r4, [r3, #4]
 8009f56:	e7c7      	b.n	8009ee8 <_free_r+0x24>
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000218 	.word	0x20000218

08009f60 <_malloc_r>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	1ccd      	adds	r5, r1, #3
 8009f64:	f025 0503 	bic.w	r5, r5, #3
 8009f68:	3508      	adds	r5, #8
 8009f6a:	2d0c      	cmp	r5, #12
 8009f6c:	bf38      	it	cc
 8009f6e:	250c      	movcc	r5, #12
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	4606      	mov	r6, r0
 8009f74:	db01      	blt.n	8009f7a <_malloc_r+0x1a>
 8009f76:	42a9      	cmp	r1, r5
 8009f78:	d903      	bls.n	8009f82 <_malloc_r+0x22>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	6033      	str	r3, [r6, #0]
 8009f7e:	2000      	movs	r0, #0
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
 8009f82:	f000 f857 	bl	800a034 <__malloc_lock>
 8009f86:	4a21      	ldr	r2, [pc, #132]	; (800a00c <_malloc_r+0xac>)
 8009f88:	6814      	ldr	r4, [r2, #0]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	b991      	cbnz	r1, 8009fb4 <_malloc_r+0x54>
 8009f8e:	4c20      	ldr	r4, [pc, #128]	; (800a010 <_malloc_r+0xb0>)
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	b91b      	cbnz	r3, 8009f9c <_malloc_r+0x3c>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f000 f83d 	bl	800a014 <_sbrk_r>
 8009f9a:	6020      	str	r0, [r4, #0]
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f000 f838 	bl	800a014 <_sbrk_r>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d124      	bne.n	8009ff2 <_malloc_r+0x92>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	6033      	str	r3, [r6, #0]
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f842 	bl	800a036 <__malloc_unlock>
 8009fb2:	e7e4      	b.n	8009f7e <_malloc_r+0x1e>
 8009fb4:	680b      	ldr	r3, [r1, #0]
 8009fb6:	1b5b      	subs	r3, r3, r5
 8009fb8:	d418      	bmi.n	8009fec <_malloc_r+0x8c>
 8009fba:	2b0b      	cmp	r3, #11
 8009fbc:	d90f      	bls.n	8009fde <_malloc_r+0x7e>
 8009fbe:	600b      	str	r3, [r1, #0]
 8009fc0:	50cd      	str	r5, [r1, r3]
 8009fc2:	18cc      	adds	r4, r1, r3
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 f836 	bl	800a036 <__malloc_unlock>
 8009fca:	f104 000b 	add.w	r0, r4, #11
 8009fce:	1d23      	adds	r3, r4, #4
 8009fd0:	f020 0007 	bic.w	r0, r0, #7
 8009fd4:	1ac3      	subs	r3, r0, r3
 8009fd6:	d0d3      	beq.n	8009f80 <_malloc_r+0x20>
 8009fd8:	425a      	negs	r2, r3
 8009fda:	50e2      	str	r2, [r4, r3]
 8009fdc:	e7d0      	b.n	8009f80 <_malloc_r+0x20>
 8009fde:	428c      	cmp	r4, r1
 8009fe0:	684b      	ldr	r3, [r1, #4]
 8009fe2:	bf16      	itet	ne
 8009fe4:	6063      	strne	r3, [r4, #4]
 8009fe6:	6013      	streq	r3, [r2, #0]
 8009fe8:	460c      	movne	r4, r1
 8009fea:	e7eb      	b.n	8009fc4 <_malloc_r+0x64>
 8009fec:	460c      	mov	r4, r1
 8009fee:	6849      	ldr	r1, [r1, #4]
 8009ff0:	e7cc      	b.n	8009f8c <_malloc_r+0x2c>
 8009ff2:	1cc4      	adds	r4, r0, #3
 8009ff4:	f024 0403 	bic.w	r4, r4, #3
 8009ff8:	42a0      	cmp	r0, r4
 8009ffa:	d005      	beq.n	800a008 <_malloc_r+0xa8>
 8009ffc:	1a21      	subs	r1, r4, r0
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f808 	bl	800a014 <_sbrk_r>
 800a004:	3001      	adds	r0, #1
 800a006:	d0cf      	beq.n	8009fa8 <_malloc_r+0x48>
 800a008:	6025      	str	r5, [r4, #0]
 800a00a:	e7db      	b.n	8009fc4 <_malloc_r+0x64>
 800a00c:	20000218 	.word	0x20000218
 800a010:	2000021c 	.word	0x2000021c

0800a014 <_sbrk_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4c06      	ldr	r4, [pc, #24]	; (800a030 <_sbrk_r+0x1c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4605      	mov	r5, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	f7f6 fee4 	bl	8000dec <_sbrk>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_sbrk_r+0x1a>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_sbrk_r+0x1a>
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20001b7c 	.word	0x20001b7c

0800a034 <__malloc_lock>:
 800a034:	4770      	bx	lr

0800a036 <__malloc_unlock>:
 800a036:	4770      	bx	lr

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
